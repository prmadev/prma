
{
    "version": "https://jsonfeed.org/version/1.1",
    "title": "type-system on prma",
    "home_page_url": "https://prma.dev/tags/type-system/",
    "feed_url": "https://prma.dev/tags/type-system/feed.json",
    "items": [ {
            "title": "Pure Rust",
            "id": "https://prma.dev/posts/pure_rust/",
            "url": "https://prma.dev/posts/pure_rust/",
            "summary": "Intro If you are not familiar with Functional Programming FP, you are in for a ride. I will try to explain FP in more practical terms.\nA definition to work with FP is a declarative way of writing a program that consists mostly of pure functions that operate on and produce immutable data. That was many other unfamiliar words. Let\u0026rsquo;s make it concrete.\nMaking it more concrete Here is a function in Rust that we will work on:",
            "content_html": "\u003ch2 id=\"intro\"\u003eIntro\u003c/h2\u003e\n\u003cp\u003eIf you are not familiar with Functional Programming \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003cabbr title=\"Functional Programming\"\u003eFP\u003c/abbr\u003e, you are in for a ride.\nI will try to explain \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003cabbr title=\"Functional Programming\"\u003eFP\u003c/abbr\u003e in more practical terms.\u003c/p\u003e\n\u003ch2 id=\"a-definition-to-work-with\"\u003eA definition to work with\u003c/h2\u003e\n\u003cp\u003e\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003cabbr title=\"Functional Programming\"\u003eFP\u003c/abbr\u003e is a \u003cdfn\u003edeclarative\u003c/dfn\u003e way of writing a program that consists mostly of \u003cem\u003epure functions\u003c/em\u003e that operate on and produce \u003cem\u003eimmutable data\u003c/em\u003e.\nThat was many other unfamiliar words. Let\u0026rsquo;s make it concrete.\u003c/p\u003e\n\u003ch2 id=\"making-it-more-concrete\"\u003eMaking it more concrete\u003c/h2\u003e\n\u003cp\u003eHere is a function in \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003ca class=\"language\" href=\"https://www.rust-lang.org/\"\u003eRust\u003c/a\u003e\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n that we will work on:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-rust\" data-lang=\"rust\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"font-weight:bold\"\u003efn\u003c/span\u003e \u003cspan style=\"color:#666;font-weight:bold;font-style:italic\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#888;font-style:italic\"\u003e// Calling `calculate_my_lateness` seems like magic.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#888;font-style:italic\"\u003e\u003c/span\u003e  \u003cspan style=\"color:#888;font-style:italic\"\u003e// We don\u0026#39;t know how it calculates it, and why it is doing that.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#888;font-style:italic\"\u003e\u003c/span\u003e  \u003cspan style=\"font-weight:bold;font-style:italic\"\u003elet\u003c/span\u003e \u003cspan style=\"font-weight:bold\"\u003emut\u003c/span\u003e status: \u003cspan style=\"font-weight:bold\"\u003ebool\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  calculate_my_lateness(\u0026amp;\u003cspan style=\"font-weight:bold\"\u003emut\u003c/span\u003e status);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#888;font-style:italic\"\u003e// This sometimes crashes and sometimes, it does not.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#888;font-style:italic\"\u003e\u003c/span\u003e  assert_eq!(status, \u003cspan style=\"font-weight:bold\"\u003etrue\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#888;font-style:italic\"\u003e// The point of this function is to tell us if we are late\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#888;font-style:italic\"\u003e// Ask yourself, how would you write a test for such a function?\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#888;font-style:italic\"\u003e\u003c/span\u003e\u003cspan style=\"font-weight:bold\"\u003efn\u003c/span\u003e \u003cspan style=\"color:#666;font-weight:bold;font-style:italic\"\u003ecalculate_my_lateness\u003c/span\u003e(status: \u003cspan style=\"font-weight:bold\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#666;font-weight:bold;font-style:italic\"\u003emut\u003c/span\u003e \u003cspan style=\"font-weight:bold\"\u003ebool\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"font-weight:bold;font-style:italic\"\u003elet\u003c/span\u003e current_time = std::time::SystemTime::now();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"font-weight:bold;font-style:italic\"\u003elet\u003c/span\u003e expected_time = std::time::SystemTime::from(\u003cspan style=\"color:#666;font-weight:bold;font-style:italic\"\u003eSOME_SPECIFIED_TIME\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    status = current_time \u0026lt;= date_time;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eNow, let\u0026rsquo;s make it \u003cem\u003epure\u003c/em\u003e and while we are at it, we introduce \u003cem\u003epure functions\u003c/em\u003e and some principles as well.\u003c/p\u003e\n\u003ch3 id=\"pure-functions-return-at-least-one-output\"\u003ePure functions return at least one output\u003c/h3\u003e\n\u003cp\u003eThat means that if you have a function named \u003ccode\u003esome_function\u003c/code\u003e, you will have at least one argument \u003ccode\u003esome_input\u003c/code\u003e and it will return at least one output \u003ccode\u003esome_output\u003c/code\u003e.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-rust\" data-lang=\"rust\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"font-weight:bold\"\u003efn\u003c/span\u003e \u003cspan style=\"color:#666;font-weight:bold;font-style:italic\"\u003esome_function\u003c/span\u003e(some_input) -\u0026gt; \u003cspan style=\"color:#666;font-weight:bold;font-style:italic\"\u003esome_output\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eWhy do we do this? When we are calling a function, we are expecting \u003cspan class=\"underline\"\u003esomething\u003c/span\u003e to happen.\nIn \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003cabbr title=\"Functional Programming\"\u003eFP\u003c/abbr\u003e world, the only acceptable \u003cem\u003esomething\u003c/em\u003e is an output argument.\nA lack of output is \u003cem\u003esymptomatic\u003c/em\u003e of one of these two unacceptable situations:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003eOur function does nothing\u003c/strong\u003e. In which case, why are we even bothering to write it at all?\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eOur function is doing a side effect\u003c/strong\u003e. Which means that it is changing something other than what is inside the function.\nThese functions don\u0026rsquo;t let us know or control what they are doing inside, without making us look at the source code.\nWe will get back to this throughout this post.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003ePlease note the emphasis on \u003cem\u003esymptomatic\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eSo let\u0026rsquo;s make it return the output:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-rust\" data-lang=\"rust\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"font-weight:bold\"\u003efn\u003c/span\u003e \u003cspan style=\"color:#666;font-weight:bold;font-style:italic\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"font-weight:bold;font-style:italic\"\u003elet\u003c/span\u003e \u003cspan style=\"font-weight:bold\"\u003emut\u003c/span\u003e status: \u003cspan style=\"font-weight:bold\"\u003ebool\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"font-weight:bold;font-style:italic\"\u003elet\u003c/span\u003e output = calculate_my_lateness(\u0026amp;\u003cspan style=\"font-weight:bold\"\u003emut\u003c/span\u003e status);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#888;font-style:italic\"\u003e//--^^^^^^------------ we have an output now\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#888;font-style:italic\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  assert_eq!(output, \u003cspan style=\"font-weight:bold\"\u003etrue\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#888;font-style:italic\"\u003e//---------^^^^^^----- which we use here\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#888;font-style:italic\"\u003e\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"font-weight:bold\"\u003efn\u003c/span\u003e \u003cspan style=\"color:#666;font-weight:bold;font-style:italic\"\u003ecalculate_my_lateness\u003c/span\u003e(status: \u003cspan style=\"font-weight:bold\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#666;font-weight:bold;font-style:italic\"\u003emut\u003c/span\u003e \u003cspan style=\"font-weight:bold\"\u003ebool\u003c/span\u003e) -\u0026gt; \u003cspan style=\"font-weight:bold\"\u003ebool\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#888;font-style:italic\"\u003e//-notice that we are returning something--^^^^--\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#888;font-style:italic\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"font-weight:bold;font-style:italic\"\u003elet\u003c/span\u003e current_time = std::time::SystemTime::now();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"font-weight:bold;font-style:italic\"\u003elet\u003c/span\u003e expected_time = std::time::SystemTime::from(\u003cspan style=\"color:#666;font-weight:bold;font-style:italic\"\u003eSOME_SPECIFIED_TIME\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    status = current_time \u0026lt;= date_time;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    status \u003cspan style=\"color:#888;font-style:italic\"\u003e// \u0026lt;- what we are returning\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#888;font-style:italic\"\u003e\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"pure-functions-don-t-mutate-state\"\u003ePure functions don\u0026rsquo;t mutate state\u003c/h3\u003e\n\u003cp\u003eAs I mentioned before, a function does something when it returns something and changes the state of something outside itself.\nWe call that a \u003cdfn\u003eside-effect\u003c/dfn\u003e.\nYou may have noticed that our function takes a mutable variable of type \u003ccode\u003ebool\u003c/code\u003e and changes it.\nIn our first iteration of the function, we needed it. But now, we grew out of it. So let\u0026rsquo;s just delete it.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-rust\" data-lang=\"rust\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"font-weight:bold\"\u003efn\u003c/span\u003e \u003cspan style=\"color:#666;font-weight:bold;font-style:italic\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#888;font-style:italic\"\u003e// let mut status: bool;  \u0026lt;- we don\u0026#39;t need this\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#888;font-style:italic\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"font-weight:bold;font-style:italic\"\u003elet\u003c/span\u003e output = calculate_my_lateness();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#888;font-style:italic\"\u003e//--------------------------------^ we don\u0026#39;t need to take status any more\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#888;font-style:italic\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  assert_eq!(output, \u003cspan style=\"font-weight:bold\"\u003etrue\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"font-weight:bold\"\u003efn\u003c/span\u003e \u003cspan style=\"color:#666;font-weight:bold;font-style:italic\"\u003ecalculate_my_lateness\u003c/span\u003e() -\u0026gt; \u003cspan style=\"font-weight:bold\"\u003ebool\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#888;font-style:italic\"\u003e//------------------^^- we don\u0026#39;t need to take a mutable variable\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#888;font-style:italic\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"font-weight:bold;font-style:italic\"\u003elet\u003c/span\u003e current_time = std::time::SystemTime::now();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"font-weight:bold;font-style:italic\"\u003elet\u003c/span\u003e expected_time = std::time::SystemTime::from(\u003cspan style=\"color:#666;font-weight:bold;font-style:italic\"\u003eSOME_SPECIFIED_TIME\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    current_time \u0026lt;= date_time \u003cspan style=\"color:#888;font-style:italic\"\u003e//  \u0026lt;- what we are returning\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#888;font-style:italic\"\u003e\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eNow isn\u0026rsquo;t this better? When I call \u003ccode\u003ecalculate_my_lateness()\u003c/code\u003e\nI\u0026rsquo;m not worried about the function changing anything it\u0026rsquo;s not supposed to anymore.\nLet\u0026rsquo;s move on.\u003c/p\u003e\n\u003ch3 id=\"pure-functions-return-output-only-based-on-their-argument\"\u003ePure functions return output only based on their argument\u003c/h3\u003e\n\u003cp\u003eWhich means that when I call \u003ccode\u003ecalculate_my_lateness()\u003c/code\u003e, I should not expect it to do something different each time I run it.\nWhy is that? There are two reasons:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003eTransparency\u003c/strong\u003e: You should know what parameters change the output of a function, without needing to reading the function body.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eTesting\u003c/strong\u003e: It is hell of a lot easier to test a function that you can just control without needing to change the time of your computer. Won\u0026rsquo;t you say?\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eLet\u0026rsquo;s do it in two steps this time.\u003c/p\u003e\n\u003ch4 id=\"step-one-don-t-use-global-variables\"\u003eStep one: Don\u0026rsquo;t use global variables\u003c/h4\u003e\n\u003cp\u003eyou may have noticed \u003ccode\u003eSOME_SPECIFIED_TIME\u003c/code\u003e.\nThis is a variable we use to make a \u003ccode\u003eSystemTime\u003c/code\u003e which we compare current time with to know if we are late or not.\nThe problem here is these two:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eWe need to write a new function, each time we have a new meeting.\u003c/li\u003e\n\u003cli\u003eWe also don\u0026rsquo;t know what time current time is being compared to, unless we first read the function, and then find out what it uses as \u003ccode\u003eSOME_SPECIFIED_TIME\u003c/code\u003e.\u003c/li\u003e\n\u003c/ol\u003e\n\u003c!--listend--\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-rust\" data-lang=\"rust\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"font-weight:bold\"\u003efn\u003c/span\u003e \u003cspan style=\"color:#666;font-weight:bold;font-style:italic\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"font-weight:bold;font-style:italic\"\u003elet\u003c/span\u003e output = calculate_my_lateness(SystemTime::from(\u003cspan style=\"color:#666;font-weight:bold;font-style:italic\"\u003eSOME_SPECIFIED_TIME\u003c/span\u003e));\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#888;font-style:italic\"\u003e//---------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#888;font-style:italic\"\u003e\u003c/span\u003e  \u003cspan style=\"color:#888;font-style:italic\"\u003e// now the caller is supposed to provide the time\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#888;font-style:italic\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  assert_eq!(output, \u003cspan style=\"font-weight:bold\"\u003etrue\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"font-weight:bold\"\u003efn\u003c/span\u003e \u003cspan style=\"color:#666;font-weight:bold;font-style:italic\"\u003ecalculate_my_lateness\u003c/span\u003e(late_as_of: \u003cspan style=\"color:#666;font-weight:bold;font-style:italic\"\u003eSystemTime\u003c/span\u003e) -\u0026gt; \u003cspan style=\"font-weight:bold\"\u003ebool\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#888;font-style:italic\"\u003e//-------------------^^^^^^^^^^^^^^^^^^^^^^-----------\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#888;font-style:italic\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"font-weight:bold;font-style:italic\"\u003elet\u003c/span\u003e current_time = std::time::SystemTime::now();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    current_time \u0026lt;= late_as_of\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"step-two-don-t-use-functions-with-side-effects-inside-your-function\"\u003eStep Two: don\u0026rsquo;t use functions with side effects inside your function\u003c/h4\u003e\n\u003cp\u003eImagine that you have a non-alcoholic drink, if you add another non-alcoholic drink to it, it is still non-alcoholic.\nBut if you add an alcoholic drink to it, it will not remain non-alcoholic anymore.\nA pure function is only pure, if all the functions that are being called in it, are pure.\nAnd \u003ccode\u003estd::time:SystemTime::now()\u003c/code\u003e is definitely not pure.\nNow, at some point we need to get the current time, but we don\u0026rsquo;t need to do that where it is hidden from the caller.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-rust\" data-lang=\"rust\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"font-weight:bold\"\u003efn\u003c/span\u003e \u003cspan style=\"color:#666;font-weight:bold;font-style:italic\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"font-weight:bold;font-style:italic\"\u003elet\u003c/span\u003e output = calculate_my_lateness(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                   SystemTime::from(\u003cspan style=\"color:#666;font-weight:bold;font-style:italic\"\u003eSOME_SPECIFIED_TIME\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                   SystemTime::now(),\u003cspan style=\"color:#888;font-style:italic\"\u003e//\u0026lt;------ we provide the time\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#888;font-style:italic\"\u003e\u003c/span\u003e  );\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  assert_eq!(output, \u003cspan style=\"font-weight:bold\"\u003etrue\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"font-weight:bold\"\u003efn\u003c/span\u003e \u003cspan style=\"color:#666;font-weight:bold;font-style:italic\"\u003ecalculate_my_lateness\u003c/span\u003e(late_as_of: \u003cspan style=\"color:#666;font-weight:bold;font-style:italic\"\u003eSystemTime\u003c/span\u003e, target_time: \u003cspan style=\"color:#666;font-weight:bold;font-style:italic\"\u003eSystemTime\u003c/span\u003e ) -\u0026gt; \u003cspan style=\"font-weight:bold\"\u003ebool\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#888;font-style:italic\"\u003e//-------------------------------------------^^^^^^^^^^^^^^^^^^^^^^^-----------\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#888;font-style:italic\"\u003e\u003c/span\u003e    target_time \u0026lt;= late_as_of\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eNow the nice thing here is that we can easily test this function now!\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-rust\" data-lang=\"rust\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#888;font-style:italic\"\u003e// main and calculate_my_lateness are not shown here. Don\u0026#39;t be alarmed.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#888;font-style:italic\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#888;font-weight:bold\"\u003e#[cfg(test)]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"font-weight:bold\"\u003emod\u003c/span\u003e \u003cspan style=\"color:#666;font-weight:bold;font-style:italic\"\u003etests\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"font-weight:bold\"\u003euse\u003c/span\u003e \u003cspan style=\"font-weight:bold\"\u003esuper\u003c/span\u003e::calculate_my_lateness;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"font-weight:bold\"\u003euse\u003c/span\u003e std::time::SystemTime;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#888;font-weight:bold\"\u003e#[test]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"font-weight:bold\"\u003efn\u003c/span\u003e \u003cspan style=\"color:#666;font-weight:bold;font-style:italic\"\u003ebeing_late_works\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"font-weight:bold;font-style:italic\"\u003elet\u003c/span\u003e res = calculate_my_lateness(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            SystemTime::from(\u003cspan style=\"color:#666;font-weight:bold;font-style:italic\"\u003eA_TIME\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            SystemTime::from(\u003cspan style=\"color:#666;font-weight:bold;font-style:italic\"\u003eA_TIME_THAT_IS_AFTER_LATE_TIME\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        );\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        assert_eq!(res, \u003cspan style=\"font-weight:bold\"\u003etrue\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#888;font-weight:bold\"\u003e#[test]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"font-weight:bold\"\u003efn\u003c/span\u003e \u003cspan style=\"color:#666;font-weight:bold;font-style:italic\"\u003ebeing_early_works\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"font-weight:bold;font-style:italic\"\u003elet\u003c/span\u003e res = calculate_my_lateness(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            SystemTime::from(\u003cspan style=\"color:#666;font-weight:bold;font-style:italic\"\u003eA_TIME\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            SystemTime::from(\u003cspan style=\"color:#666;font-weight:bold;font-style:italic\"\u003eA_TIME_THAT_IS_BEFORE_LATE_TIME\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        );\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        assert_eq!(res, \u003cspan style=\"font-weight:bold\"\u003efalse\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eImagine doing this with the first function!\u003c/p\u003e\n\u003ch4 id=\"one-more-step\"\u003eOne more step\u003c/h4\u003e\n\u003cp\u003eOK, I lied\u0026hellip; Somewhat. Have you noticed the one glaring, lack of transparency and control here?\nIt\u0026rsquo;s the \u003ccode\u003e\u0026lt;=\u003c/code\u003e. You may need to read the function here, if you have this simple question:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eIf I call the function exactly, at the precise moment that I specified to be \u003ccode\u003elate_as_of\u003c/code\u003e, will return true, or false?\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eNow, not answering this question using the function signature,won\u0026rsquo;t make my function less pure,but still, it is a much nicer experience for the caller to be able to rely on their IDE\u0026rsquo;s autocomplete to tell them what happens.But how the hell should we do that? Easy! We take a comparator function as input!\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-rust\" data-lang=\"rust\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"font-weight:bold\"\u003efn\u003c/span\u003e \u003cspan style=\"color:#666;font-weight:bold;font-style:italic\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"font-weight:bold;font-style:italic\"\u003elet\u003c/span\u003e output = calculate_my_lateness(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                   SystemTime::from(\u003cspan style=\"color:#666;font-weight:bold;font-style:italic\"\u003eSOME_SPECIFIED_TIME\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                   SystemTime::now(),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                   |late, target| target \u0026gt; late, \u003cspan style=\"color:#888;font-style:italic\"\u003e// here the caller passes the function\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#888;font-style:italic\"\u003e\u003c/span\u003e                                                 \u003cspan style=\"color:#888;font-style:italic\"\u003e// you can also provide a few different functions yourself to make it easier for the caller\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#888;font-style:italic\"\u003e\u003c/span\u003e  );\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  assert_eq!(output, \u003cspan style=\"font-weight:bold\"\u003etrue\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"font-weight:bold\"\u003efn\u003c/span\u003e \u003cspan style=\"color:#666;font-weight:bold;font-style:italic\"\u003ecalculate_my_lateness\u003c/span\u003e(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    late_as_of: \u003cspan style=\"color:#666;font-weight:bold;font-style:italic\"\u003eSystemTime\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    target_time: \u003cspan style=\"color:#666;font-weight:bold;font-style:italic\"\u003eSystemTime\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    comparer: \u003cspan style=\"color:#666;font-weight:bold;font-style:italic\"\u003efn\u003c/span\u003e(SystemTime, SystemTime) -\u0026gt; \u003cspan style=\"font-weight:bold\"\u003ebool\u003c/span\u003e, \u003cspan style=\"color:#888;font-style:italic\"\u003e// magic happens here\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#888;font-style:italic\"\u003e\u003c/span\u003e) -\u0026gt; \u003cspan style=\"font-weight:bold\"\u003ebool\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    comparer(late_as_of, target_time)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eNow the caller is providing us we have everything we need. We did not hide one single thing.\u003c/p\u003e\n\u003ch3 id=\"isn-t-this-just-more-work-for-caller\"\u003eIsn\u0026rsquo;t this just more work for caller?\u003c/h3\u003e\n\u003cp\u003eWell, yes. Yes, it is\u0026hellip; if calling functions without understanding them is the only work that the caller of our function is doing.\nOtherwise, our caller knows everything they need using their language server, can change everything they need, have the assurance of our tests and don\u0026rsquo;t need to crawl through our source code, and they will face much fewer bugs where they don\u0026rsquo;t know where it came from.\nIt may seem unnecessary for this simple function, but imagine much more complex functions.\u003c/p\u003e\n\u003ch2 id=\"making-things-nicer-a-spicy-problem\"\u003eMaking things nicer: A spicy problem\u003c/h2\u003e\n\u003cp\u003eSo we have all this power and transparency.\nBut the elephant is in it room: We have a very shitty \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003cabbr title=\"Application Programming Interface\"\u003eAPI\u003c/abbr\u003e.\nLet\u0026rsquo;s make it nicer using a technique called \u003cdfn\u003ecurrying\u003c/dfn\u003e (hence the \u0026ldquo;spicy\u0026rdquo; pun).\nWhat it means is: as well as taking functions as argument, we can return functions.\nThat way, our \u003ccode\u003ecalculate_my_lateness\u003c/code\u003e function can become a function-maker.\nLet me make it more concrete.\u003c/p\u003e\n\u003ch3 id=\"consider-the-use-case\"\u003eConsider the use case\u003c/h3\u003e\n\u003cp\u003eLet us suppose that we want to find time in our list of times that is not late.\nCurrently, we have to call the whole function, repeatedly, and include every argument.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-rust\" data-lang=\"rust\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#888;font-style:italic\"\u003e// we are in main, don\u0026#39;t be alarmed\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#888;font-style:italic\"\u003e\u003c/span\u003e\u003cspan style=\"font-weight:bold;font-style:italic\"\u003elet\u003c/span\u003e output_time1 = calculate_my_lateness(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    SystemTime::from(\u003cspan style=\"color:#666;font-weight:bold;font-style:italic\"\u003eSOME_SPECIFIED_TIME\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    SystemTime::from(\u003cspan style=\"color:#666;font-weight:bold;font-style:italic\"\u003eFIRST_TIME\u003c/span\u003e), \u003cspan style=\"color:#888;font-style:italic\"\u003e//\u0026lt;------ we provide the time\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#888;font-style:italic\"\u003e\u003c/span\u003e    |late, target| target \u0026gt; late,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"font-weight:bold;font-style:italic\"\u003elet\u003c/span\u003e output_time2 = calculate_my_lateness(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    SystemTime::from(\u003cspan style=\"color:#666;font-weight:bold;font-style:italic\"\u003eSOME_SPECIFIED_TIME\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    SystemTime::from(\u003cspan style=\"color:#666;font-weight:bold;font-style:italic\"\u003eSECOND_TIME\u003c/span\u003e), \u003cspan style=\"color:#888;font-style:italic\"\u003e//\u0026lt;------ we provide the time\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#888;font-style:italic\"\u003e\u003c/span\u003e    |late, target| target \u0026gt; late,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"font-weight:bold;font-style:italic\"\u003elet\u003c/span\u003e output_time3 = calculate_my_lateness(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    SystemTime::from(\u003cspan style=\"color:#666;font-weight:bold;font-style:italic\"\u003eSOME_SPECIFIED_TIME\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    SystemTime::from(\u003cspan style=\"color:#666;font-weight:bold;font-style:italic\"\u003eTHIRD_TIME\u003c/span\u003e), \u003cspan style=\"color:#888;font-style:italic\"\u003e//\u0026lt;------ we provide the time\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#888;font-style:italic\"\u003e\u003c/span\u003e    |late, target| target \u0026gt; late,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#888;font-style:italic\"\u003e// etc...\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThis is not great.\nHere, We can just make a function that only takes our target time.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-rust\" data-lang=\"rust\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"font-weight:bold\"\u003efn\u003c/span\u003e \u003cspan style=\"color:#666;font-weight:bold;font-style:italic\"\u003ecalculate_my_lateness\u003c/span\u003e(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    late_as_of: \u003cspan style=\"color:#666;font-weight:bold;font-style:italic\"\u003eSystemTime\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#888;font-style:italic\"\u003e// target_time: SystemTime \u0026lt;------------ we don\u0026#39;t need to take this argument anymore\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#888;font-style:italic\"\u003e\u003c/span\u003e    comparer: \u003cspan style=\"color:#666;font-weight:bold;font-style:italic\"\u003efn\u003c/span\u003e(late_as_of: \u003cspan style=\"color:#666;font-weight:bold;font-style:italic\"\u003eSystemTime\u003c/span\u003e, target_time: \u003cspan style=\"color:#666;font-weight:bold;font-style:italic\"\u003eSystemTime\u003c/span\u003e) -\u0026gt; \u003cspan style=\"font-weight:bold\"\u003ebool\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e) -\u0026gt; \u003cspan style=\"color:#666;font-weight:bold;font-style:italic\"\u003efn\u003c/span\u003e(target_time: \u003cspan style=\"color:#666;font-weight:bold;font-style:italic\"\u003eSystemTime\u003c/span\u003e) -\u0026gt; \u003cspan style=\"font-weight:bold\"\u003ebool\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e     \u003cspan style=\"color:#888;font-style:italic\"\u003e//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---- notice that we are now returning a function\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#888;font-style:italic\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    |target_time: \u003cspan style=\"color:#666;font-weight:bold;font-style:italic\"\u003eSystemTime\u003c/span\u003e| -\u0026gt; \u003cspan style=\"font-weight:bold\"\u003ebool\u003c/span\u003e { comparer(target_time, late_as_of) }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#888;font-style:italic\"\u003e//^^^^^^^^^^^^^^^^^^^^^^           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#888;font-style:italic\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#888;font-style:italic\"\u003e//         |                this is where the calculation of lateness happens\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#888;font-style:italic\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#888;font-style:italic\"\u003e// we are taking target time here\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#888;font-style:italic\"\u003e\u003c/span\u003e }\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eYou might ask, \u0026ldquo;well, how does this help?\u0026rdquo;\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-rust\" data-lang=\"rust\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#888;font-style:italic\"\u003e// we are in  main\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#888;font-style:italic\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#888;font-style:italic\"\u003e// now our late_before_time_x is not of type bool,\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#888;font-style:italic\"\u003e// rather it is of type Fn(SystemTime) -\u0026gt; bool\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#888;font-style:italic\"\u003e\u003c/span\u003e\u003cspan style=\"font-weight:bold;font-style:italic\"\u003elet\u003c/span\u003e late_before_time_x = calculate_my_lateness(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    SystemTime::from(\u003cspan style=\"color:#666;font-weight:bold;font-style:italic\"\u003eSOME_SPECIFIED_TIME\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    |late, target| target \u0026gt; late,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#888;font-style:italic\"\u003e// So we can just:\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#888;font-style:italic\"\u003e\u003c/span\u003e\u003cspan style=\"font-weight:bold;font-style:italic\"\u003elet\u003c/span\u003e first_result = late_before_time_x(\u003cspan style=\"color:#666;font-weight:bold;font-style:italic\"\u003eFIRST_TIME\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"font-weight:bold;font-style:italic\"\u003elet\u003c/span\u003e second_result = late_before_time_x(\u003cspan style=\"color:#666;font-weight:bold;font-style:italic\"\u003eSECOND_TIME\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"font-weight:bold;font-style:italic\"\u003elet\u003c/span\u003e third_result = late_before_time_x(\u003cspan style=\"color:#666;font-weight:bold;font-style:italic\"\u003eTHIRD_TIME\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#888;font-style:italic\"\u003e// ...much less boilerplate\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"why-const-just-won-t-do\"\u003eWhy \u003ccode\u003econst\u003c/code\u003e just won\u0026rsquo;t do\u003c/h3\u003e\n\u003cp\u003eVeteran rustaceans among the readers of this blog might ask: \u0026ldquo;why not just use \u003ccode\u003econst\u003c/code\u003e to mark that functions are pure?\u0026rdquo;\nWell dear veteran, if you can make a function \u003ccode\u003econst\u003c/code\u003e, do every one a favor and actually do it.\nIn fact, I regularly use \u003ccode\u003eclippy::missing_const_for_fn\u003c/code\u003e lint and suggest you to use it as well.\nBut that does not guarantee that our functions are pure, or that every pure function can be \u003ccode\u003econst\u003c/code\u003e.\nHere are my reasons:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003ccode\u003econst\u003c/code\u003e functions can take \u003ccode\u003e\u0026amp;mut something\u003c/code\u003e as their arguments. Taking mutable references is definitely not very pure-function-y.\u003c/li\u003e\n\u003cli\u003eYou cannot \u003ccode\u003econst\u003c/code\u003e trait methods in stable \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003ca class=\"language\" href=\"https://www.rust-lang.org/\"\u003eRust\u003c/a\u003e\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n, as of now. And considering that every function call inside a \u003ccode\u003econst\u003c/code\u003e function should be \u003ccode\u003econst\u003c/code\u003e as well, you are extremely limited, without any reasons that have to do with pure functions.\u003c/li\u003e\n\u003cli\u003eMany libraries don\u0026rsquo;t to use \u003ccode\u003econst\u003c/code\u003e on the functions that are \u003ccode\u003econst\u003c/code\u003e. Again, limitation without pureness reasons.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"making-things-declarative\"\u003eMaking things declarative\u003c/h2\u003e\n\u003cp\u003eThere is this often repeated old joke that says:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eThere two hard problems in programming\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eCache invalidation\u003c/li\u003e\n\u003cli\u003eNaming things\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u0026ndash; \u003cspan class=\"person p-name\"\u003ePhil Karlton\u003c/span\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eAnd here we are concerned with the second one.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eIn the \u003cstrong\u003eimperative\u003c/strong\u003e universe, we usually name our functions using \u003cem\u003everbs\u003c/em\u003e. Think \u003ccode\u003ecalculate_my_lateness\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eIn the \u003cstrong\u003edeclarative\u003c/strong\u003e universe we are concerned with our output, we use \u003cem\u003enouns\u003c/em\u003e. Think \u003ccode\u003elateness_calculator\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThis makes the intent of our function clear.\nHow it is implemented under-the-hood is not what matters to the caller.\nThey only care about what they get out of it.\nIf you now are thinking that you cared about that part before, consider the things that we just can answer by seeing the arguments that our function takes.\nWe don\u0026rsquo;t need to rely on our function name anymore to tell use how the function is calculating lateness.\nWe only need to know what it\u0026rsquo;s intention is.\u003c/p\u003e\n\u003ch2 id=\"dear-reader\"\u003eDear Reader\u003c/h2\u003e\n\u003cp\u003eIn this post, I just preferred to focus on the heart of \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003cabbr title=\"Functional Programming\"\u003eFP\u003c/abbr\u003e: \u003cem\u003epure declarative functions\u003c/em\u003e.\nHowever, functional programming brings with it a set of extremely useful tools, patterns, etc. most well known are \u003cem\u003eiterators\u003c/em\u003e, \u003cem\u003emaps\u003c/em\u003e, \u003cem\u003efolds\u003c/em\u003e, \u003cem\u003efilters\u003c/em\u003e, etc.\nHonestly, they are well explained in other resources. My only suggestion would be to check out \u003ca href=\"https://docs.rs/itertools/latest/itertools/\"\u003eitertools\u003c/a\u003e crate.\u003c/p\u003e\n",
            "date_published": "2023-03-25T22:36:00+03:30"
        }
    ]
    
}
