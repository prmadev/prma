
{
    "version": "https://jsonfeed.org/version/1.1",
    "title": "languages on prma",
    "home_page_url": "https://prma.dev/tags/languages/",
    "feed_url": "https://prma.dev/tags/languages/feed.json",
    "items": [ {
            "title": "Rust Skills Transferability",
            "id": "https://prma.dev/posts/rust-skills-transferability/",
            "url": "https://prma.dev/posts/rust-skills-transferability/",
            "summary": "While the skills learned in Rust , like working with the borrow checker, may seem limited to Rust itself, the claim of their intransferability is somewhat overstated. Understanding the borrow checker is specific to languages using it, but the approaches it encourages are typically advanced and valued by experienced engineers. And often, it is evidenced by the patterns that are simplest to implement. The obvious exception to that is unwrap() and expect().",
            "content_html": "\u003cp\u003eWhile the skills learned in \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003ca class=\"language\" href=\"https://www.rust-lang.org/\"\u003eRust\u003c/a\u003e\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n, like working with the \u003cem\u003eborrow checker\u003c/em\u003e, may seem limited to \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003ca class=\"language\" href=\"https://www.rust-lang.org/\"\u003eRust\u003c/a\u003e\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n itself, the claim of their intransferability is somewhat overstated. Understanding the borrow checker is specific to languages using it, but the approaches it encourages are typically advanced and valued by experienced engineers.\nAnd often, it is evidenced by the patterns that are simplest to implement.\nThe obvious exception to that is \u003ccode\u003eunwrap()\u003c/code\u003e and \u003ccode\u003eexpect()\u003c/code\u003e. Even though the ? operator is an step towards simplifying that process, it is undeniable that the hassel of creating and managing errors is not simpler than the extra 8 characters introduced by the \u003ccode\u003e.unwrap()\u003c/code\u003e\u003c/p\u003e\n",
            "date_published": "2023-10-16T23:04:00+03:30"
        }
    ]
    
}
