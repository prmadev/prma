<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>languages on prma</title>
    <link>https://prma.dev/tags/languages/</link>
    <description>Recent content in languages on prma</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>prma.dev@protonmail.com (Perma)</managingEditor>
    <webMaster>prma.dev@protonmail.com (Perma)</webMaster>
    <copyright>CC v.4</copyright>
    <lastBuildDate>Mon, 16 Oct 2023 23:04:00 +0330</lastBuildDate>
    <atom:link href="https://prma.dev/tags/languages/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Rust Skills Transferability</title>
      <link>https://prma.dev/daily/rust-skills-transferability/</link>
      <pubDate>Mon, 16 Oct 2023 23:04:00 +0330</pubDate><author>prma.dev@protonmail.com (Perma)</author>
      <guid>https://prma.dev/daily/rust-skills-transferability/</guid>
      <description>While the skills learned in Rust , like working with the borrow checker, may seem limited to Rust itself, the claim of their intransferability is somewhat overstated. Understanding the borrow checker is specific to languages using it, but the approaches it encourages are typically advanced and valued by experienced engineers. And often, it is evidenced by the patterns that are simplest to implement. The obvious exception to that is unwrap() and expect().</description>
    </item>
  </channel>
</rss>
