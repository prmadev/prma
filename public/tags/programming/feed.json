
{
    "version": "https://jsonfeed.org/version/1.1",
    "title": "programming on prma",
    "home_page_url": "https://prma.dev/tags/programming/",
    "feed_url": "https://prma.dev/tags/programming/feed.json",
    "items": [ {
            "title": "Python And NixOS",
            "id": "https://prma.dev/posts/python_and_nixos/",
            "url": "https://prma.dev/posts/python_and_nixos/",
            "summary": "Me, whining about Python on NixOS",
            "content_html": "\u003cp\u003eThe problems surrounding \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003ca class=\"language\" href=\"https://www.python.org/\"\u003ePython\u003c/a\u003e\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n programs on NixOS seem never-ending.\nI often have to refrain from installing most \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003ca class=\"language\" href=\"https://www.python.org/\"\u003ePython\u003c/a\u003e\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n programs.\nOn each update, another one of them breaks during installation â€“ either their tests don\u0026rsquo;t pass, or their dependencies fail in some way.\u003c/p\u003e\n\u003cp\u003eAnd to be honest, I give the benefit of the doubt to NixOS, seeing its result with other languages, and knowing what I know about pip.\u003c/p\u003e\n",
            "date_published": "2023-11-02T11:03:07+03:30"
        }, {
            "title": "Rust's Productivity",
            "id": "https://prma.dev/posts/rust-productivity/",
            "url": "https://prma.dev/posts/rust-productivity/",
            "summary": "I think the best way to characterize Rust \u0026rsquo;s productivity, is to put it on a quality axis.\nIf you want low quality code (prototyping, etc) rust is much less productive than the alternative.\nFor medium level of quality, Rust is similar to others.\nFor high quality code, Rust is much more productive than any alternatives.\nQuality is intentionally vague, to encapsulate performance, leanness, documentation, and security.",
            "content_html": "\u003cp\u003eI think the best way to characterize \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003ca class=\"language\" href=\"https://www.rust-lang.org/\"\u003eRust\u003c/a\u003e\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u0026rsquo;s productivity, is to put it on a quality axis.\u003c/p\u003e\n\u003cp\u003eIf you want low quality code (prototyping, etc) rust is much less productive than the alternative.\u003c/p\u003e\n\u003cp\u003eFor medium level of quality, \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003ca class=\"language\" href=\"https://www.rust-lang.org/\"\u003eRust\u003c/a\u003e\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n is similar to others.\u003c/p\u003e\n\u003cp\u003eFor high quality code, \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003ca class=\"language\" href=\"https://www.rust-lang.org/\"\u003eRust\u003c/a\u003e\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n is much more productive than any alternatives.\u003c/p\u003e\n\u003cp\u003eQuality is intentionally vague, to encapsulate performance, leanness, documentation, and security.\u003c/p\u003e\n",
            "date_published": "2023-10-16T23:04:00+03:30"
        }, {
            "title": "The Tragedy of The Tech-Stacks",
            "id": "https://prma.dev/posts/tragedy_of_the_tech_stacks/",
            "url": "https://prma.dev/posts/tragedy_of_the_tech_stacks/",
            "summary": "Intro Back in 1958, there was this thinker named Garrett Hardin who kicked off his well-known piece titled \u0026ldquo;The Tragedy of the Commons\u0026rdquo; in the following way:\nAt the end of a thoughtful article on the future of nuclear war, Weisner and York concluded that \u0026ldquo;Both sides of the arms race are \u0026hellip; confronted by the dillema of steadily increasing military power and steadily decreasing natonal security. It is our considered our professional judgment that this delimma has not professional technical solution.",
            "content_html": "\u003ch2 id=\"intro\"\u003eIntro\u003c/h2\u003e\n\u003cp\u003eBack in 1958, there was this thinker named \u003cspan class=\"person p-name\"\u003eGarrett Hardin\u003c/span\u003e who kicked off his well-known piece titled \u0026ldquo;The Tragedy of the Commons\u0026rdquo; in the following way:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eAt the end of a thoughtful article on the future of nuclear war, Weisner and York concluded that \u0026ldquo;Both sides of the arms race are \u0026hellip; confronted by the dillema of steadily increasing military power and steadily decreasing natonal security. It is our considered our professional judgment that this delimma has not professional technical solution. If the great powers continue to look for solutions in the area of science and technology only, the result will be to worsen the situation.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eThen, \u003cspan class=\"person p-name\"\u003eHardin\u003c/span\u003e goes on to rattle the foundations by delving into a colossal issue - the challenge of population expansion. He breaks it down by saying that when you have a shared resource, and each individual aims to squeeze out the most benefit for themselves, the result is a harm inflicted upon everyone, even the very ones taking those actions.\u003c/p\u003e\n\u003cp\u003eNow, picture this famous analogy. Imagine a stretch of grassland, claimed by three farmers. Each of them brings their cow out to graze on it daily. Sounds reasonable, right? But then, one fortunate farmer\u0026rsquo;s cow becomes pregnant. This stroke of luck leaves him with two cows, effectively doubling his profits. Observing this triumph, the other farmers follow suit, diving into a spree of buying and breeding cows, aiming to maximize their individual gains. However, this frenzy leads to a rampant grazing that leaves the grassland bare and barren. Ultimately, the once lush grass disappears, and the insatiable appetite of the voracious cows brings about their own starvation. In the end, all the farmers are left with no cows, their initial wealth transformed into a state even worse than before.\u003c/p\u003e\n\u003cp\u003eHe coins it as the \u0026ldquo;tragedy of the commons.\u0026rdquo; I prefer to see it as a powerful representation of what often dampens the enjoyment across the software terrain for every key player involved: the user, the developer, the \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003cabbr title=\"Chief Executive Officer\"\u003eCEO\u003c/abbr\u003e, and the investor.\u003c/p\u003e\n\u003cp\u003eHow meta!\u003c/p\u003e\n\u003ch2 id=\"the-clever-one-the-frustrated-one-and-the-scared-one\"\u003eThe Clever One, The Frustrated One and The Scared One\u003c/h2\u003e\n\u003cp\u003eNow, let\u0026rsquo;s meet a familiar figure, the one we often encounter, the embodiment of many developers out there. We\u0026rsquo;ll give her a name: Sarah. Sarah\u0026rsquo;s eager to dive into a fresh technology - one that could potentially elevate her current position. So, how does she tackle this? She begins by exploring a domain, and within that, she sets her sights on a specific technology. Let\u0026rsquo;s designate this domain as something imaginary, to prevent any inadvertent offense. How about we refer to it as \u0026ldquo;Front-End Development\u0026rdquo;?\u003c/p\u003e\n\u003cp\u003eFor Front-End Sarah finds out a few different contenders in the field. She asks herself, what could the industry be thirsty for? The naive answer she arrives at, is \u0026ldquo;the most reliable one, the one that is the pleasure to develop and the one that has the most advantages\u0026rdquo;. Oh, Sarah, you impractical idealistic perfectionist, you!\u003c/p\u003e\n\u003cp\u003eNow, delving into the realm of Front-End, Sarah stumbles upon a handful of potential contenders. She ponders, what might the industry truly crave? Her initial, somewhat naive response is, \u0026ldquo;The most dependable option, the one that brings joy to the development process, and the one that boasts numerous advantages.\u0026rdquo; Oh Sarah, you, impractical, idealistic, perfectionist you!\u003c/p\u003e\n\u003cp\u003eArmed with these benchmarks, she opts for the \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003ca class=\"language\" href=\"https://elm-lang.org/\"\u003eElm\u003c/a\u003e\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n language (yet another mythical being). She proceeds to dive into \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003ca class=\"language\" href=\"https://elm-lang.org/\"\u003eElm\u003c/a\u003e\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n, driven by her enthusiasm. However, curiosity gets the better of her, and she sneakily glances at the job listings on LinkedIn. To her astonishment, she discovers a mere trio of job opportunities for \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003ca class=\"language\" href=\"https://elm-lang.org/\"\u003eElm\u003c/a\u003e\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n. This baffles her, leading her to question the accuracy of her initial language assessment.\u003c/p\u003e\n\u003cp\u003eSeeking insight, she turns to Tom, an exceptional \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n she\u0026rsquo;s acquainted with, to discuss whether \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003ca class=\"language\" href=\"https://elm-lang.org/\"\u003eElm\u003c/a\u003e\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n lives up to its hype. Much to Sarah\u0026rsquo;s astonishment, Tom echoes her initial convictions regarding \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003ca class=\"language\" href=\"https://elm-lang.org/\"\u003eElm\u003c/a\u003e\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n. He affirms that, indeed, \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003ca class=\"language\" href=\"https://elm-lang.org/\"\u003eElm\u003c/a\u003e\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n proves to be an exceptional language, boasting enduring dependability, a well-established ecosystem, and a delightful development journey.\u003c/p\u003e\n\u003cp\u003eSarah, now even more puzzled than before, directs her confusion towards Tom, questioning whether he\u0026rsquo;s in the process of recruiting \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003ca class=\"language\" href=\"https://elm-lang.org/\"\u003eElm\u003c/a\u003e\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n developers. Once again, Tom\u0026rsquo;s response is resolute: \u0026ldquo;Absolutely not! Where could I possibly locate a pool of \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003ca class=\"language\" href=\"https://elm-lang.org/\"\u003eElm\u003c/a\u003e\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n-savvy developers? However, we\u0026rsquo;re actively seeking out \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003cabbr class=\"language\" title=\"JS\"\u003e\u003ca href=\"https://ecma-international.org/publications-and-standards/standards/ecma-262/\"\u003eJavaScript\u003c/a\u003e\u003c/abbr\u003e\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n experts!\u0026rdquo; (once more, a language name sufficiently distanced from any existing real-world instances).\u003c/p\u003e\n\u003cp\u003eAfter a brief moment of contemplation, Sarah bursts out, \u003cq cite=\"sarah\"\u003e What about me?\u003c/q\u003e\u003c/p\u003e\n\u003cp\u003eTom responds with a shake of his head, stating, \u0026ldquo;Oh, that wouldn\u0026rsquo;t work. You see, for any given application, we require a team of 20 individuals to consistently handle maintenance and bug fixes. Where on earth would we come across 20 \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003ca class=\"language\" href=\"https://elm-lang.org/\"\u003eElm\u003c/a\u003e\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n developers?\u0026rdquo;\u003c/p\u003e\n\u003cp\u003e\u0026ldquo;Well, shouldn\u0026rsquo;t \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003ca class=\"language\" href=\"https://elm-lang.org/\"\u003eElm\u003c/a\u003e\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n apps theoretically require significantly less maintenance, given the multitude of bugs that are caught during the initial development stages?\u0026rdquo; Sarah counters silently within her mind. An idea begins to form, one she opts to keep to herself, \u0026ldquo;Ah, so maintaining a delicate codebase might indicate a higher demand for fresh \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003cabbr class=\"language\" title=\"JS\"\u003e\u003ca href=\"https://ecma-international.org/publications-and-standards/standards/ecma-262/\"\u003eJavaScript\u003c/a\u003e\u003c/abbr\u003e\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n developers - implying enhanced job security!\u0026rdquo;\u003c/p\u003e\n\u003cp\u003eFeeling rather clever, she decides to validate her hunch by perusing the (imaginary) yellow pages, named Glassdoor. And lo and behold, an endless scroll unveils a plethora of distinct job listings, all centered around \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003cabbr class=\"language\" title=\"JS\"\u003e\u003ca href=\"https://ecma-international.org/publications-and-standards/standards/ecma-262/\"\u003eJavaScript\u003c/a\u003e\u003c/abbr\u003e\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.\u003c/p\u003e\n\u003cp\u003eWell, Sarah learns \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003cabbr class=\"language\" title=\"JS\"\u003e\u003ca href=\"https://ecma-international.org/publications-and-standards/standards/ecma-262/\"\u003eJavaScript\u003c/a\u003e\u003c/abbr\u003e\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n and all her beliefs gets validated, she becomes a very wealthy engineer, with a great job security, with each company she enters trying to keep her, year-after-yer, while other companies trying to persuade her by higher and higher offers. Or at least that was the boring version of this post that did not start with the word \u0026ldquo;tragedy\u0026rdquo;.\u003c/p\u003e\n\u003cp\u003eInstead, she uncovers that her counterparts, much like herself, had also been quite \u003cem\u003eclever\u003c/em\u003e. A multitude of newcomers gravitated towards the language flaunting the highest job listings. Each job opening faced a surplus of around a hundred contenders. The \u0026ldquo;victor,\u0026rdquo; so to speak, emerges as the individual boasting the most qualifications and the most modest salary expectation. Or should we even label them as victors, considering that the instant they dare to dream a little bigger, a fresh job listing crops up, promptly displacing them with the next eager contender.\u003c/p\u003e\n\u003cp\u003eTom, our trusty \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n, worn out from the cycle of on-boarding one low-budget, novice developer after another, vents his frustrations to the \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n. The \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n engages in discussions with the investors, who share the same dissatisfaction due to their profits being eroded by an inefficient workforce. They call upon the \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n to devise a remedy for this predicament.\u003c/p\u003e\n\u003cp\u003eThe \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n returns with a strategy to shift from \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n to \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003ca class=\"language\" href=\"https://elm-lang.org/\"\u003eElm\u003c/a\u003e\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n technology. The investors, content with the proposal, take a brief pause to deliberate. A few days later, they rejoin the conversation, expressing a notable apprehension. \u0026ldquo;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003ca class=\"language\" href=\"https://elm-lang.org/\"\u003eElm\u003c/a\u003e\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n is practically unheard of! None of our rivals employ this language. That\u0026rsquo;s a substantial gamble we\u0026rsquo;re not prepared to take!\u0026rdquo;\u003c/p\u003e\n\u003cp\u003eArash, the \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003cabbr title=\"Chief Executive Officer\"\u003eCEO\u003c/abbr\u003e, \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003cabbr title=\"Chief Technology Officer\"\u003eCTO\u003c/abbr\u003e, \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003cabbr title=\"Chief Financial Officer\"\u003eCFO\u003c/abbr\u003e, Product Manager, and the visionary founder of a fledgling startup, confronts the very same imaginative quandary of selecting a technology stack. Given the inherent high-stakes nature of startups, Arash adopts a prudent approach by examining the practices of more established corporations, such as those overseen by individuals like Tom in his role as \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003cabbr title=\"Chief Technology Officer\"\u003eCTO\u003c/abbr\u003e, in order to identify a tried-and-true trajectory.\u003c/p\u003e\n\u003ch2 id=\"the-lose-lose-lose-situation\"\u003eThe Lose-Lose-Lose situation\u003c/h2\u003e\n\u003cp\u003eAt every juncture, every individual optimized their decisions for personal gain. At each instance, a superior option was presented, and they acknowledged the benefits it offered. Nevertheless, they settled for the inferior alternative (for the sake of avoiding any unnecessary debate, let\u0026rsquo;s refrain from mentioning that the hypothetical lesser choice was \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003cabbr title=\"Sorry I have not defined this abbreviation. Can you please report this to me with my email?\"\u003eJavaScript\u003c/abbr\u003e, naturally). As a result, each person finds themselves in a less advantageous position than if they had collectively embraced the superior alternative. This impact ripples beyond individuals, extending to the entire ecosystem, hindered by the precarious edifice of abstractions left behind by the swiftly growing number of predecessors.\u003c/p\u003e\n\u003cp\u003eSo, why did they all fall short of enhancing their own lives and the lives of others? Was it the technology\u0026rsquo;s flaw? Or did the ecosystem falter? You\u0026rsquo;re astute enough to deduce the answer; after all, you had the wit to discern the languages I implicitly referred to in my hypothetical scenarios.\u003c/p\u003e\n\u003ch2 id=\"the-solution\"\u003eThe Solution\u003c/h2\u003e\n\u003cp\u003eI must admit, I\u0026rsquo;m uncertain. The nuclear arsenal continues to expand, even though the era of the Cold War has long passed. Thankfully, our world hasn\u0026rsquo;t been ravaged by nuclear conflict. Rather, it\u0026rsquo;s the interplay of mutually assured destruction and the realization by the leaders of those two nations that not embracing an alternative risk could lead to dire consequences. This, at least, has placed us in a relatively improved state.\u003c/p\u003e\n\u003cp\u003eSimultaneously, we find ourselves grappling with \u003cspan class=\"person p-name\"\u003eGarrett Hardin\u003c/span\u003e\u0026rsquo;s preoccupation \u0026ndash; the persistent challenges of overpopulation and looming environmental catastrophes. Evidently, the far-reaching peril of not embracing an alternative is of such extended duration that it transcends the immediate concerns of the very generation opting against alternatives. The burden of their choices is instead borne by their descendants: \u003cq cite=\"Current Generation\"\u003eFuck those brats.\u003c/q\u003e\u003c/p\u003e\n\u003cp\u003eIn the world of software, the tempo is notably faster, the stakes less dire compared to earlier circumstances, and the individuals engaged are often more honest than politicians and notably smarter than the average voter.\u003c/p\u003e\n\u003cp\u003eHowever, the remedy doesn\u0026rsquo;t entail adhering to an oddly precise series\nof ritualistic maneuvers. It\u0026rsquo;s a more daunting challenge. Just as\n\u003cspan class=\"person p-name\"\u003eGarrett Hardin\u003c/span\u003e titled his article, the solution remains much the same:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eThe population problem has no technical solution; it requires a fundamental extension of in morality.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"dear-reader\"\u003eDear Reader\u003c/h2\u003e\n\u003cp\u003eI know! The gastly claim of \u003cq cite=\"me\"\u003eto improve developer experience we first should grow an ethical sense\u003c/q\u003e, seems absurd. Yet I see no specifically little amount of gradual change, where at least some one on the whole chain did not bite the bullet and risk it.\u003c/p\u003e\n",
            "date_published": "2023-08-11T12:38:00+03:30"
        }, {
            "title": "Consider Developer's Snack",
            "id": "https://prma.dev/posts/consider_developers_snack/",
            "url": "https://prma.dev/posts/consider_developers_snack/",
            "summary": "Intro During my early 20s, I found myself immersed in the world of sustainable architecture as an architecture student. Engaging in various workshops centered around this field, one particular experience stands out as a monumental turning point in my life. It was a workshop conducted by a renowned professor in Iran, where I gained valuable insights. Within this workshop, we collectively brainstormed strategies to harness heat sources for a four-member family\u0026rsquo;s house, aiming to optimize its thermal efficiency.",
            "content_html": "\u003ch2 id=\"intro\"\u003eIntro\u003c/h2\u003e\n\u003cp\u003eDuring my early 20s, I found myself immersed in the world of sustainable architecture as an architecture student. Engaging in various workshops centered around this field, one particular experience stands out as a monumental turning point in my life. It was a workshop conducted by a renowned professor in Iran, where I gained valuable insights.\nWithin this workshop, we collectively brainstormed strategies to harness heat sources for a four-member family\u0026rsquo;s house, aiming to optimize its thermal efficiency. We considered a range of possibilities, including solar and geothermal heat, as well as the heat generated by the kitchen oven. However, there was one significant heat source that eluded our attention, as pointed out persistently by the professor.\u003c/p\u003e\n\u003cp\u003eEventually, he provided us with a clue: \u0026ldquo;You seem to have overlooked four 37-degree Celsius heaters.\u0026rdquo; It dawned on us that we had forgotten to factor in the heat generated by the family members themselves. Their body heat, a natural source of warmth, had slipped our minds entirely.\u003c/p\u003e\n\u003cp\u003eReflecting on a more recent occurrence, a certain paper began circulating, comparing the energy usage footprint of different programming languages. Yet, I couldn\u0026rsquo;t help but notice that the discussions surrounding this paper overlooked a crucial aspect-it solely measured the energy footprint at one specific point in the application\u0026rsquo;s lifecycle.\u003c/p\u003e\n\u003cp\u003eIt is essential to recognize that the energy usage of a programming language extends beyond a mere snapshot analysis. To truly grasp the overall impact, we must consider the entire lifecycle of the application, accounting for factors such as development, deployment, maintenance, and eventual retirement. Only then can we gain a comprehensive understanding of the energy implications associated with different programming languages.\u003c/p\u003e\n\u003ch2 id=\"the-paper-as-the-thread-we-pull\"\u003eThe Paper, As The Thread We Pull\u003c/h2\u003e\n\u003cp\u003eThe paper, titled \u0026ldquo;Energy Efficiency Across Programming Languages,\u0026rdquo; delves into the exploration of various problems and their corresponding solutions, which are implemented across multiple programming languages. The researchers conducted an analysis of the electricity consumption associated with each implementation. In essence, the primary focus of the study revolves around determining the relative energy efficiency of different programming languages, with \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003ca class=\"language\" href=\"https://www.iso.org/standard/74528.html\"\u003eC\u003c/a\u003e\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n emerging as the most efficient and serving as the benchmark for measurement.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eC      | 01.00 | â–“\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eRust   | 01.03 | â–“\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eJava   | 01.98 | â–“â–“\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ePython | 75.88 | â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ePerl   | 79.58 | â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThese results carry considerable weight, although it is essential to address a common misconception surrounding their implications. Contrary to popular belief, these findings do not unequivocally assert that a \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003ca class=\"language\" href=\"https://www.iso.org/standard/74528.html\"\u003eC\u003c/a\u003e\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n program is inherently more environmentally sustainable than its \u003cdfn\u003eJava\u003c/dfn\u003e counterpart.\u003c/p\u003e\n\u003ch2 id=\"consider-the-snack\"\u003eConsider The Snack\u003c/h2\u003e\n\u003cp\u003eIn the field of sustainability literature, there exists a concept known as \u003cdfn\u003eLife-Cycle Assessment\u003c/dfn\u003e. \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003cabbr title=\"Life-Cycle Assessment\"\u003eLCA\u003c/abbr\u003e involves evaluating the environmental impact of a product throughout its entire life cycle, encompassing aspects such as raw material extraction, manufacturing, and disposal or recycling.\u003c/p\u003e\n\u003cp\u003eWhen applying this concept to the assessment of software life cycles, we realize that there are several significant factors that have been overlooked. Allow me to provide some insights on these important considerations.\u003c/p\u003e\n\u003cp\u003eFirstly, the authors of the paper have primarily focused on the runtime of a specific set of problems. This means that their applications follow a sequence of starting up, solving the given problem, and then exiting. Consequently, the results obtained are biased towards programming languages that excel at efficient startup and shutdown processes. However, this perspective fails to account for the behavior of servers and long-running processes. Servers, for instance, typically start up once per day or even less frequently and spend extended periods in the computational phase. If a programming language is efficient during the initial startup but requires frequent restarts during runtime, this crucial aspect is overlooked.\u003c/p\u003e\n\u003cp\u003eBut we shouldn\u0026rsquo;t stop there. Another aspect to consider is compilation. While \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003ca class=\"language\" href=\"https://www.rust-lang.org/\"\u003eRust\u003c/a\u003e\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n is indeed an impressive language, its compilation process is significantly more resource-intensive compared to \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003ca class=\"language\" href=\"https://go.dev/\"\u003eGo\u003c/a\u003e\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n. \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003ca class=\"language\" href=\"https://www.rust-lang.org/\"\u003eRust\u003c/a\u003e\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n yields highly efficient binaries, but the energy expended during the compilation process is also considerably higher.\u003c/p\u003e\n\u003cp\u003eFurthermore, the improved quality of \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003ca class=\"language\" href=\"https://www.rust-lang.org/\"\u003eRust\u003c/a\u003e\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u0026rsquo;s compiled binaries becomes relevant when we consider the potential presence of bugs and the subsequent need for recompilation. More permissive compilers may result in programs with a higher likelihood of bugs, necessitating additional rounds of debugging, fixing, and retesting. It\u0026rsquo;s important to acknowledge that this discussion goes beyond the developer\u0026rsquo;s running computer and includes factors such as sustenance needs, energy consumption to support their biological functioning during the process of bug fixing, and the overall impact on the environment.\u003c/p\u003e\n\u003cp\u003eAdditionally, the continuous deployment or release cycles, repackaging efforts, and the use of \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003cabbr title=\"Continues Integration\"\u003eCI\u003c/abbr\u003e/\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003cabbr title=\"Continues Delivery\"\u003eCD\u003c/abbr\u003e practices all contribute to the \u003cem\u003eecological footprint\u003c/em\u003e. Recompilation for each platform targeted, as well as the network costs associated with distributing binaries or source code to different endpoints, also significantly impact the environment.\u003c/p\u003e\n\u003cp\u003eThe problem of compatibility further compounds the issue. Programming languages with runtimes shipped separately from the package, such as \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003ca class=\"language\" href=\"https://www.python.org/\"\u003ePython\u003c/a\u003e\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n, \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003ca class=\"language\" href=\"https://lua.org/\"\u003eLua\u003c/a\u003e\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n, and other scripting or \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003cabbr title=\"Just-In-Time [compilation]\"\u003eJIT\u003c/abbr\u003e languages, as well as those based on virtual machines like \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003cabbr title=\"Java Virtual Machine\"\u003eJVM\u003c/abbr\u003e, often require reprogramming or the inclusion of older runtime versions when breaking changes occur. This adds to the complexity and environmental impact of software development and packaging.\u003c/p\u003e\n\u003cp\u003eFurthermore, poorly designed programs can accumulate significant technical debt over time, resulting in rewriting. Although the language and toolchain themselves may not directly cause this, the ecosystem surrounding languages like \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003cabbr class=\"language\" title=\"JS\"\u003e\u003ca href=\"https://ecma-international.org/publications-and-standards/standards/ecma-262/\"\u003eJavaScript\u003c/a\u003e\u003c/abbr\u003e\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n, \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003cabbr class=\"language\" title=\"PHP: Hypertext Preprocessor\"\u003e\u003ca href=\"https://www.php.net/\"\u003ePHP\u003c/a\u003e\u003c/abbr\u003e\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n, and \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003ca class=\"language\" href=\"https://www.python.org/\"\u003ePython\u003c/a\u003e\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   tends to encourage short-term thinking. In contrast, languages like \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003ca class=\"language\" href=\"https://www.rust-lang.org/\"\u003eRust\u003c/a\u003e\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n, \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003ca class=\"language\" href=\"https://www.iso.org/standard/74528.html\"\u003eC\u003c/a\u003e\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n, \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003ca class=\"language\" href=\"https://fortran-lang.org/\"\u003eFortran\u003c/a\u003e\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n, and others that focus on system-level development promote long-term support and are home to projects that have thrived for several decades.\u003c/p\u003e\n\u003cp\u003eMoreover, the variability in usage patterns must be taken into account. While languages like \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003ca class=\"language\" href=\"https://www.iso.org/standard/74528.html\"\u003eC\u003c/a\u003e\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  and \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003ca class=\"language\" href=\"#ZgotmplZ\"\u003eC\u0026#43;\u0026#43;\u003c/a\u003e\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n require substantial energy for compilation across different platforms, languages such as \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003ca class=\"language\" href=\"https://www.rust-lang.org/\"\u003eRust\u003c/a\u003e\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n, \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003ca class=\"language\" href=\"https://go.dev/\"\u003eGo\u003c/a\u003e\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n, and \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003ca class=\"language\" href=\"https://www.java.com\"\u003eJava\u003c/a\u003e\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n mitigate the duplication of energy required to support multiple platforms within a single application.\u003c/p\u003e\n\u003cp\u003eFinally, we must consider the energy expended in the development, maintenance, and support of programming languages. Languages like \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003ca class=\"language\" href=\"https://www.rust-lang.org/\"\u003eRust\u003c/a\u003e\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n offer remarkable expressive capabilities, not merely due to better timing or superior thinking but also as a result of extensive collaborative efforts. Conversely, languages like \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003ca class=\"language\" href=\"https://elm-lang.org/\"\u003eElm\u003c/a\u003e\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n undergo minimal changes over time.\u003c/p\u003e\n\u003cp\u003eIt is worth emphasizing that the energy required to learn a language, the environmental consequences of mistakes made during coding (e.g., unintentionally sending a million requests to thousands to different servers), variations in energy usage among developers from different countries, and the decreasing lifespan of hardware are all factors that contribute to the overall consideration.\u003c/p\u003e\n\u003ch2 id=\"dear-reader\"\u003eDear Reader\u003c/h2\u003e\n\u003cp\u003eThe crux of the matter is that complexity pervades these considerations, demanding our thoughtful attention and appropriate mitigation for each aspect. Failing to acknowledge and address each facet places us at risk of optimizing solely for one element while sacrificing the other to the extent of rendering our efforts absurd.\u003c/p\u003e\n\u003cp\u003eIt is important to note that I have deliberately omitted discussions about post-harm mitigation. Our focus has been on reducing harm itself. Exploring the costs associated with bootstrapping and averting catastrophic scenarios would expand beyond the scope of this essay.\u003c/p\u003e\n",
            "date_published": "2023-06-21T11:43:00+03:30"
        }, {
            "title": "FLOSS For Software Longevity",
            "id": "https://prma.dev/posts/floss_for_longevity/",
            "url": "https://prma.dev/posts/floss_for_longevity/",
            "summary": "Intro Free/Libre and Open Source Software ( FLOSS) is a captivating realm within software development. What makes FLOSS particularly intriguing is its deviation from conventional business goals, leading to planned longevity and a distinct approach to sustainability.\nReasons Let us delve into the unique qualities of FLOSS and the factors that contribute to its better suitability for longevity.\nThe longevity of the FLOSS business model serves it well The common business models are better suited for short-term goals.",
            "content_html": "\u003ch2 id=\"intro\"\u003eIntro\u003c/h2\u003e\n\u003cp\u003eFree/Libre and Open Source Software (\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003cabbr title=\"Free/Libre and Open Source Software\"\u003eFLOSS\u003c/abbr\u003e) is a captivating realm within software development. What makes \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003cabbr title=\"Free/Libre and Open Source Software\"\u003eFLOSS\u003c/abbr\u003e particularly intriguing is its deviation from conventional business goals, leading to planned longevity and a distinct approach to sustainability.\u003c/p\u003e\n\u003ch2 id=\"reasons\"\u003eReasons\u003c/h2\u003e\n\u003cp\u003eLet us delve into the unique qualities of \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003cabbr title=\"Free/Libre and Open Source Software\"\u003eFLOSS\u003c/abbr\u003e and the factors that contribute to its better suitability for longevity.\u003c/p\u003e\n\u003ch3 id=\"the-longevity-of-the-business-model-serves-it-well\"\u003eThe longevity of the \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003cabbr title=\"Free/Libre and Open Source Software\"\u003eFLOSS\u003c/abbr\u003e business model serves it well\u003c/h3\u003e\n\u003cp\u003eThe common business models are better suited for short-term goals. There are two major approaches: selling or renting.\u003c/p\u003e\n\u003cp\u003eSmall to mid-sized software companies predominantly prioritize the sale of their products. The concept of product longevity, while acknowledged as necessary, assumes a secondary role rather than being a central objective. Its primary function lies in establishing trust among consumers. Once the initial excitement surrounding the launch of a new and captivating product subsides, these companies swiftly shift their attention to the next innovation. The success of marketing these novel products heavily relies on users\u0026rsquo; fear of missing out and the perceived loss of functionality associated with the previous iteration. Unfortunately, this often leads to the inclusion of unnecessary features, deliberate planning for obsolescence, and resistance against the right to repair. In this cycle, longevity takes a backseat as the perpetual replacement of one product with another takes precedence.\u003c/p\u003e\n\u003cp\u003eConversely, larger companies place a premium on the rental model for software. Instead of users owning the software outright, they opt for subscription-based payment models for continuous usage. One might assume that these companies would prioritize stability to retain their subscribers. However, practical implementation often takes a different route. These companies rely on monopolistic tactics, such as acquiring competitors or launching extensive marketing campaigns to stifle new entrants. In cases where competition persists, they resort to content exclusivity, coercing users to purchase their product alongside competitors\u0026rsquo; offerings. Consequently, users find themselves utilizing these products for prolonged periods not due to their exceptional quality, but rather because they perceive limited alternative options. The subscription model may make sense when paying for a service, but it doesn\u0026rsquo;t align with current software development. Paying subscription for developing and bug-fix of a product is simply paying for the privilege of using an incomplete version of a product.\u003c/p\u003e\n\u003cp\u003eIn contrast, companies adopting a pay-for-enterprise-support model for open-source products, such as Canonical and Red Hat, exhibit commendable practices. Their primary emphasis lies on longevity. If the software is functioning adequately, their tasks are straightforward, eliminating the need to address the same issue repeatedly for each client. Longevity serves as both their evidence and modus operandi. They provide support for software that has already weathered numerous instabilities. They employ different development stages, such as alpha, unstable, stable, and long-term releases. These features can subsequently be passed on to other distributions with more robust objectives, such as REHL.\u003c/p\u003e\n\u003cp\u003eAlthough these companies may impose charges for bug fixes, their underlying offering revolves around selling stability and longevity (think \u003cem\u003eUbuntu Pro\u003c/em\u003e). This approach is not driven solely by inherent benevolence but rather stems from a lack of alternatives. They are unable to monopolize a product that can be cloned, forked, and utilized to initiate independent ventures. Nor can they vend software that others can fork, enhance, and sell at higher prices or even distribute for free. Their sole viable course of action entails creating a product that strikes a balance, avoiding both excessive limitations that render it futile and excessive complexity that complicates support.\u003c/p\u003e\n\u003cp\u003eHowever, business is just one piece of the puzzle.\u003c/p\u003e\n\u003ch3 id=\"engineers-prioritize-quality-over-quantity\"\u003e\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003cabbr title=\"Free/Libre and Open Source Software\"\u003eFLOSS\u003c/abbr\u003e engineers prioritize quality over quantity\u003c/h3\u003e\n\u003cp\u003eAs we discussed, most businesses prioritize product quality only until it reaches a level sufficient for selling.\u003c/p\u003e\n\u003cp\u003eThis often leads to engineers being pushed and encouraged to develop faster, sacrificing quality and stability when it hinders \u0026ldquo;beating the competition to market.\u0026rdquo; I\u0026rsquo;m sure I\u0026rsquo;m not alone in feeling dissatisfied with creating instant legacy products and leaving behind a trail of subpar, useless software. It leaves no room for pride in one\u0026rsquo;s work.\u003c/p\u003e\n\u003cp\u003eAs a result, engineers who value quality find satisfaction in other avenues, such as personal projects or contributing to libraries and tools they use themselves.\u003c/p\u003e\n\u003cp\u003eThe dynamics of development in these situations differ. Open-source software often lacks the same level of resources, making maintainability a crucial concern. Allowing technical debt to accumulate in a project one maintains can result in paying a hefty price, even in a short period. The more users a project has, the more the burden of technical debt becomes apparent-quite the opposite of the industry\u0026rsquo;s \u0026ldquo;move broken things, fast\u0026rdquo; mentality.\u003c/p\u003e\n\u003cp\u003eConsequently, successful open-source products tend to have meticulous and uncompromising maintainers.\u003c/p\u003e\n\u003cp\u003eAnother important aspect to consider is that open-source software greatly enhances one\u0026rsquo;s resume. Similar to a resume, open-source projects showcase an individual\u0026rsquo;s best work. They are like first dates, where you present yourself at your best. Consequently, open-source projects motivate developers to create their finest code and documentation.\u003c/p\u003e\n\u003cp\u003eFurthermore, transparency is a vital aspect of open-source projects. Engaging in dubious practices, such as intrusive telemetry, can agitate the surrounding community.\u003c/p\u003e\n\u003cp\u003eIn summary, there are four main reasons:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eThe cost of maintainability\u003c/li\u003e\n\u003cli\u003eThe positive impact on one\u0026rsquo;s resume\u003c/li\u003e\n\u003cli\u003eCounteracting the lack of satisfaction caused by lower quality software in daily work\u003c/li\u003e\n\u003cli\u003eEmbracing transparency\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"exhibits-a-greater-degree-of-diversity-dot\"\u003e\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003cabbr title=\"Free/Libre and Open Source Software\"\u003eFLOSS\u003c/abbr\u003e exhibits a greater degree of diversity.\u003c/h3\u003e\n\u003cp\u003eWhen it comes to a biological ecosystem, its resilience stems from the diversity of its members. Let\u0026rsquo;s imagine a scenario involving a moth that feeds on maple tree branches. In a jungle filled with maple trees, the moth can feast and reproduce endlessly. However, there\u0026rsquo;s a twist.\u003c/p\u003e\n\u003cp\u003eAround 10% of the maple trees have developed a variation of their membrane that is toxic to the moth, purely by chance. Now, if the moth tries to feed on these trees, it has a 1 in 10 chance of being fatally poisoned. If there were only a single moth, it would be the end of its lineage. However, imagine a population of 100 moths, and 10% of them have accidentally developed immunity. These \u0026ldquo;super moths\u0026rdquo; may be larger and more resistant to the trees, but they are also more visible to predators like birds. And so, the cycle continues.\u003c/p\u003e\n\u003cp\u003eThe diversity of approaches within a biological ecosystem is crucial. In the context of biological beings, the exchange of random sets of genes through sexual reproduction likely emerged as a means to enhance resilience. Microbes that prey on others, on the other hand, face a more challenging situation, as the result.\u003c/p\u003e\n\u003cp\u003eThese advantageous mechanisms resulting from diversity are also present in the software ecosystem.\u003c/p\u003e\n\u003cp\u003eThe needs and threats faced by a server differ from those faced by a German student\u0026rsquo;s laptop. While Linux is ubiquitous in the open-source desktop realm, there are numerous slightly different Linux distributions available. These variations encompass different themes, preinstalled applications, package managers, and even packaging architecture models. Additionally, there are kernels compiled with different flags and versions.\u003c/p\u003e\n\u003cp\u003eGiven this remarkable diversity, it comes as little astonishment that Microsoft\u0026rsquo;s ardent campaign during the 2000s against the comparably youthful, less cohesive, and resource-limited Linux met with abysmal failure. Strikingly, in a twist of events, Microsoft has lately unveiled its very own Linux distribution and dedicated years to crafting the Windows Subsystem for Linux.\u003c/p\u003e\n\u003cp\u003eTo the proprietary realm, an ecosystem characterized by the development, redesign, and forking of diverse products, yielding a multitude of solutions, may appear inherently inefficient. Yet, from the perspective of permaculture and PermaComputing, such an ecosystem manifests as nothing short of utopia.\u003c/p\u003e\n\u003ch3 id=\"demonstrates-a-higher-level-of-robustness\"\u003e\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003cabbr title=\"Free/Libre and Open Source Software\"\u003eFLOSS\u003c/abbr\u003e demonstrates a higher level of robustness\u003c/h3\u003e\n\u003cp\u003e\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003cabbr title=\"Free/Libre and Open Source Software\"\u003eFLOSS\u003c/abbr\u003e transcends being a mere generator of independent variations that begin anew each time. It represents a system where progress builds upon existing foundations, with each subsequent layer amplifying the importance of the underlying ones. Irrespective of how many stories above the ground one ascends, the ground level remains a paramount concern if its integrity is jeopardized. Prominent examples of this phenomenon can be observed in projects like curl, the kernel, and OpenSSL. Although these initiatives were initially initiated by individuals, they have evolved into integral components of numerous other undertakings. The driving force compelling many individuals to contribute to these projects stems from the realization that the cost of abstaining from participation would be significantly greater.\u003c/p\u003e\n\u003cp\u003eHowever, it is important to recognize that this process is not always pleasant. Consider the immense pressure on OpenSSL developers. If they were to become overwhelmed and exhausted like many other open-source maintainers, the consequences could be significant.\u003c/p\u003e\n\u003cp\u003eYet, when such challenges arise (and they do), we all become aware of them. We sense the danger and collectively strive to find solutions. This is in stark contrast to the situation when a proprietary software developer abandons a company. Until a replacement is found, users are left unaware and vulnerable to potential security threats posed by malicious hackers.\u003c/p\u003e\n\u003cp\u003eThanks to this collective effort and attention to robustness, many foundational open-source software programs have remained the best tools for the job even after decades of use.\u003c/p\u003e\n\u003ch2 id=\"dear-reader\"\u003eDear Reader\u003c/h2\u003e\n\u003cp\u003eNow, esteemed reader, I trust you comprehend the rationale behind why individuals with a penchant for enduring solutions find the realm of \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003cabbr title=\"Free/Libre and Open Source Software\"\u003eFLOSS\u003c/abbr\u003e far more fertile than its alternatives.\u003c/p\u003e\n",
            "date_published": "2023-06-14T11:26:00+03:30"
        }, {
            "title": "Go Vs Rust readability",
            "id": "https://prma.dev/posts/go_vs_rust_readability/",
            "url": "https://prma.dev/posts/go_vs_rust_readability/",
            "summary": "Intro Traditionally speaking, Go and Rust are not direct competitors on many fronts. Each take different trade-offs. But more often than not, you might need to choose one over the other. It is compared in the niche the other fails. Like low-level system development, which Rust easily rules. Or maybe dev-ops tooling which Go is easily good at it.\nHowever, there are many overlaps in their use case. Think high-performance web-servers.",
            "content_html": "\u003ch2 id=\"intro\"\u003eIntro\u003c/h2\u003e\n\u003cp\u003eTraditionally speaking, \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003ca class=\"language\" href=\"https://go.dev/\"\u003eGo\u003c/a\u003e\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n and \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003ca class=\"language\" href=\"https://www.rust-lang.org/\"\u003eRust\u003c/a\u003e\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n are not direct competitors on many fronts. Each take different trade-offs. But more often than not, you might need to choose one over the other. It is compared in the niche the other fails. Like low-level system development, which \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003ca class=\"language\" href=\"https://www.rust-lang.org/\"\u003eRust\u003c/a\u003e\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n easily rules. Or maybe dev-ops tooling which \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003ca class=\"language\" href=\"https://go.dev/\"\u003eGo\u003c/a\u003e\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n is easily good at it.\u003c/p\u003e\n\u003cp\u003eHowever, there are many overlaps in their use case. Think high-performance web-servers. In those spaces, we should compare other things. Like readability and maintainability of language. In this post, I want to share my thoughts on readability.\u003c/p\u003e\n\u003ch2 id=\"tl-dr\"\u003eTl;DR\u003c/h2\u003e\n\u003cp\u003e\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003ca class=\"language\" href=\"https://www.rust-lang.org/\"\u003eRust\u003c/a\u003e\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n is not less maintainable than \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003ca class=\"language\" href=\"https://go.dev/\"\u003eGo\u003c/a\u003e\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n because \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003ca class=\"language\" href=\"https://www.rust-lang.org/\"\u003eRust\u003c/a\u003e\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n is less readable.\u003c/p\u003e\n\u003ch2 id=\"what-i-do-not-disagree-with\"\u003eWhat I do not disagree with\u003c/h2\u003e\n\u003cp\u003eJust to be clear, although I\u0026rsquo;m making a case for \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003ca class=\"language\" href=\"https://www.rust-lang.org/\"\u003eRust\u003c/a\u003e\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n and arguing that readability should not be as much concern, I would like to make clear that I\u0026rsquo;m not arguing against these common-sense statements:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003ca class=\"language\" href=\"https://go.dev/\"\u003eGo\u003c/a\u003e\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n is more readable.\u003c/li\u003e\n\u003cli\u003e\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003ca class=\"language\" href=\"https://go.dev/\"\u003eGo\u003c/a\u003e\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n has less overhead for people with no previous experience with language.\u003c/li\u003e\n\u003cli\u003eReadability is generally what you want.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"why-readability-is-good\"\u003eWhy readability is good\u003c/h2\u003e\n\u003cp\u003eEnglish is more readable than any programming language. However, readability is not the only measure that we are using for chosing a language.\u003c/p\u003e\n\u003cp\u003eReadability and clearity are not inherently good, rather it is a proxy for something else we value: A readable code helps us understand the flow of information in order to \u003cstrong\u003eunderstand its logic\u003c/strong\u003e, \u003cstrong\u003ecapture its bugs\u003c/strong\u003e and \u003cstrong\u003eextend it\u003c/strong\u003e, easier. A line of code is read in many situations:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eI want to find out how a piece of code can give rise to a specific runtime bug.\u003c/li\u003e\n\u003cli\u003eI want to audit it to see if it exposes any specific vulnerability, data-race, etc.\u003c/li\u003e\n\u003cli\u003eI want to add features to it, and I want to know where and how I should plug the new functionality to.\u003c/li\u003e\n\u003cli\u003eI want to make a code more robust, document it and make it more available for other people by refactoring it.\u003c/li\u003e\n\u003cli\u003eI want to review the code of my colleague to see if a set of fresh eyes could capture a new bug, or an inconsistent styling with the rest of the codebase.\u003c/li\u003e\n\u003cli\u003eI want to understand what a code base does. Maybe I\u0026rsquo;m trying to see if a  software is spying on me, or maybe I\u0026rsquo;m trying to understand the way it calculated my taxes.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eThese are all noble pursuits. And in all these cases, readability is vital in preventing disasters and better experience in onboarding others.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003ca class=\"language\" href=\"https://go.dev/\"\u003eGo\u003c/a\u003e\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u0026rsquo;s readability is probably one of its best features. At my current and previous jobs, I have had to jump into different code bases with different levels of legacy and problematic codebases where junior developers with no-idea of idiomatic ways of coding \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003ca class=\"language\" href=\"https://go.dev/\"\u003eGo\u003c/a\u003e\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n left their projects without any context for the next developer.\nSuch low quality codes should take forever for one to decode. However, because of the beautifully simple syntax of \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003ca class=\"language\" href=\"https://go.dev/\"\u003eGo\u003c/a\u003e\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n, I could start to be productive and sending PRs in less than a day. Have you seen a codebase where all the back-end code was coded by a narcissistic lone-wolf meth-addict? Well, I have, and it\u0026rsquo;s an absolute shit-show. Yet, I committed my first edits in 3 hours. \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003ca class=\"language\" href=\"https://go.dev/\"\u003eGo\u003c/a\u003e\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n is excellent at that. And I can understand how a huge tech company with very quick employee turn-over can give rise to such language. Kudos to the \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003ca class=\"language\" href=\"https://go.dev/\"\u003eGo\u003c/a\u003e\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n team.\u003c/p\u003e\n",
            "date_published": "2023-04-14T23:49:00+03:30"
        }, {
            "title": "Moving in Rust is Pure",
            "id": "https://prma.dev/posts/moving_is_pure/",
            "url": "https://prma.dev/posts/moving_is_pure/",
            "summary": "Intro The act of moving arguments within Rust \u0026rsquo;s functions serves as a compelling means to uphold the purity of the function. By embracing this practice, we ensure that the function operates on unique ownership of its inputs, preserving the integrity and immutability of data, which are fundamental tenets of functional programming.\nMoving a Variable to a Function in Rust Doesn\u0026rsquo;t Make It Impure So as an introduction, if you don\u0026rsquo;t know Rust .",
            "content_html": "\u003ch2 id=\"intro\"\u003eIntro\u003c/h2\u003e\n\u003cp\u003eThe act of moving arguments within \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003ca class=\"language\" href=\"https://www.rust-lang.org/\"\u003eRust\u003c/a\u003e\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u0026rsquo;s functions serves as a compelling means to uphold the \u003cem\u003epurity\u003c/em\u003e of the function. By embracing this practice, we ensure that the function operates on unique ownership of its inputs, preserving the integrity and \u003cem\u003eimmutability\u003c/em\u003e of data, which are fundamental tenets of \u003cem\u003efunctional programming\u003c/em\u003e.\u003c/p\u003e\n\u003ch2 id=\"moving-a-variable-to-a-function-in-doesn-t-make-it-impure\"\u003eMoving a Variable to a Function in \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003ca class=\"language\" href=\"https://www.rust-lang.org/\"\u003eRust\u003c/a\u003e\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n Doesn\u0026rsquo;t Make It Impure\u003c/h2\u003e\n\u003cp\u003eSo as an introduction, if you don\u0026rsquo;t know \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003ca class=\"language\" href=\"https://www.rust-lang.org/\"\u003eRust\u003c/a\u003e\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.\u003c/p\u003e\n\u003cp\u003eIn \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003ca class=\"language\" href=\"https://www.rust-lang.org/\"\u003eRust\u003c/a\u003e\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n, we have this concept of \u003cem\u003emoving\u003c/em\u003e variables. It is like this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-rust\" data-lang=\"rust\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#888;font-style:italic\"\u003e//  A variable is made.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#888;font-style:italic\"\u003e\u003c/span\u003e\u003cspan style=\"font-weight:bold;font-style:italic\"\u003elet\u003c/span\u003e a_variable = some_value;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#888;font-style:italic\"\u003e// It moves into this function.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#888;font-style:italic\"\u003e\u003c/span\u003e_ = a_function_that_takes_ownership(a_variable);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#888;font-style:italic\"\u003e// We cannot use a_variable anymore! So, we cannot do this!\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#888;font-style:italic\"\u003e\u003c/span\u003e\u003cspan style=\"font-weight:bold;font-style:italic\"\u003elet\u003c/span\u003e b_variable = a_variable;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eNow I consider \u003ccode\u003ea_function_that_takes_ownership\u003c/code\u003e to be a \u003cem\u003epure function\u003c/em\u003e. However, it raises a possible confusion:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eDoesn\u0026rsquo;t a_function_that_takes_ownership change the state of the outer function? Isn\u0026rsquo;t that a side effect?\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eI argue that it doesn\u0026rsquo;t. Here is why: a function is not a function call. Ok. let\u0026rsquo;s visualize it.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      ________outer_function_______\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e--in-\u0026gt;|       __inner_f___        |-out-\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      | -in-\u0026gt; |          | -out-\u0026gt; |\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      |       ------------        |\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      -----------------------------\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eSo we have two functions. One outer, and one inner.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eEach function should have inputs and an output.\u003c/li\u003e\n\u003cli\u003eOther than their outputs, they should not change anything outside their function space.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIf these conditions are not met, our function is not \u003cem\u003epure\u003c/em\u003e.\u003c/p\u003e\n\u003ch3 id=\"step-1\"\u003eStep 1\u003c/h3\u003e\n\u003cp\u003eNow consider a variable \u003ccode\u003e[V]\u003c/code\u003e.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      _____________________________\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e-----\u0026gt;| [v]   ____________        |-----\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      | ----\u0026gt; |          | -----\u0026gt; |\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      |       ------------        |\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      -----------------------------\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"step-2\"\u003eStep 2\u003c/h3\u003e\n\u003cp\u003eWith our outer function, we create a function call for the inner function.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      _____________________________\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e-----\u0026gt;|       ____________        |-----\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      | [v]-\u0026gt; |          | -----\u0026gt; |\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      |       ------------        |\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      -----------------------------\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"step-3\"\u003eStep 3\u003c/h3\u003e\n\u003cp\u003eIt is no longer in the state space of the outer function. The inner function takes \u003cem\u003eownership\u003c/em\u003e of it.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      _____________________________\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e-----\u0026gt;|       ____________        |-----\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      | ----\u0026gt; |   [v]    | -----\u0026gt; |\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      |       ------------        |\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      -----------------------------\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eSemantically, for the outer function \u003ccode\u003e[v]\u003c/code\u003e was used in the function call and then dropped. Which does not violate our rules. For the inner function, it just got an input and returns an output. So it makes sematic sense.\u003c/p\u003e\n\u003cp\u003eIn practice, it also makes the same guarantees as any other \u003cem\u003epure function\u003c/em\u003e: - No null pointers. - No \u003cem\u003emutable state\u003c/em\u003e. - No \u003cem\u003eside effects\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eIf the caller \u003ccode\u003e.clone()\u003c/code\u003e our value and make a copy of it and pass that to the inner function, it provides us with no other guarantees, other than more memory usage and slightly longer code.\u003c/p\u003e\n\u003ch2 id=\"why-does-it-matter\"\u003eWhy does it matter?\u003c/h2\u003e\n\u003cp\u003eWell, Honestly, it doesn\u0026rsquo;t. I just had to decide if in a \u003cem\u003epure function\u003c/em\u003e I can consume a self, if I want to make it a \u003cem\u003epure function\u003c/em\u003e, considering that I cannot make it \u003cem\u003econst\u003c/em\u003e. This was my thinking output. Now you are the outer function.\u003c/p\u003e\n",
            "date_published": "2023-04-09T10:44:00+03:30"
        }, {
            "title": "Pure Rust",
            "id": "https://prma.dev/posts/pure_rust/",
            "url": "https://prma.dev/posts/pure_rust/",
            "summary": "Intro If you are not familiar with Functional Programming FP, you are in for a ride. I will try to explain FP in more practical terms.\nA definition to work with FP is a declarative way of writing a program that consists mostly of pure functions that operate on and produce immutable data. That was many other unfamiliar words. Let\u0026rsquo;s make it concrete.\nMaking it more concrete Here is a function in Rust that we will work on:",
            "content_html": "\u003ch2 id=\"intro\"\u003eIntro\u003c/h2\u003e\n\u003cp\u003eIf you are not familiar with Functional Programming \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003cabbr title=\"Functional Programming\"\u003eFP\u003c/abbr\u003e, you are in for a ride.\nI will try to explain \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003cabbr title=\"Functional Programming\"\u003eFP\u003c/abbr\u003e in more practical terms.\u003c/p\u003e\n\u003ch2 id=\"a-definition-to-work-with\"\u003eA definition to work with\u003c/h2\u003e\n\u003cp\u003e\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003cabbr title=\"Functional Programming\"\u003eFP\u003c/abbr\u003e is a \u003cdfn\u003edeclarative\u003c/dfn\u003e way of writing a program that consists mostly of \u003cem\u003epure functions\u003c/em\u003e that operate on and produce \u003cem\u003eimmutable data\u003c/em\u003e.\nThat was many other unfamiliar words. Let\u0026rsquo;s make it concrete.\u003c/p\u003e\n\u003ch2 id=\"making-it-more-concrete\"\u003eMaking it more concrete\u003c/h2\u003e\n\u003cp\u003eHere is a function in \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003ca class=\"language\" href=\"https://www.rust-lang.org/\"\u003eRust\u003c/a\u003e\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n that we will work on:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-rust\" data-lang=\"rust\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"font-weight:bold\"\u003efn\u003c/span\u003e \u003cspan style=\"color:#666;font-weight:bold;font-style:italic\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#888;font-style:italic\"\u003e// Calling `calculate_my_lateness` seems like magic.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#888;font-style:italic\"\u003e\u003c/span\u003e  \u003cspan style=\"color:#888;font-style:italic\"\u003e// We don\u0026#39;t know how it calculates it, and why it is doing that.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#888;font-style:italic\"\u003e\u003c/span\u003e  \u003cspan style=\"font-weight:bold;font-style:italic\"\u003elet\u003c/span\u003e \u003cspan style=\"font-weight:bold\"\u003emut\u003c/span\u003e status: \u003cspan style=\"font-weight:bold\"\u003ebool\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  calculate_my_lateness(\u0026amp;\u003cspan style=\"font-weight:bold\"\u003emut\u003c/span\u003e status);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#888;font-style:italic\"\u003e// This sometimes crashes and sometimes, it does not.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#888;font-style:italic\"\u003e\u003c/span\u003e  assert_eq!(status, \u003cspan style=\"font-weight:bold\"\u003etrue\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#888;font-style:italic\"\u003e// The point of this function is to tell us if we are late\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#888;font-style:italic\"\u003e// Ask yourself, how would you write a test for such a function?\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#888;font-style:italic\"\u003e\u003c/span\u003e\u003cspan style=\"font-weight:bold\"\u003efn\u003c/span\u003e \u003cspan style=\"color:#666;font-weight:bold;font-style:italic\"\u003ecalculate_my_lateness\u003c/span\u003e(status: \u003cspan style=\"font-weight:bold\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#666;font-weight:bold;font-style:italic\"\u003emut\u003c/span\u003e \u003cspan style=\"font-weight:bold\"\u003ebool\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"font-weight:bold;font-style:italic\"\u003elet\u003c/span\u003e current_time = std::time::SystemTime::now();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"font-weight:bold;font-style:italic\"\u003elet\u003c/span\u003e expected_time = std::time::SystemTime::from(\u003cspan style=\"color:#666;font-weight:bold;font-style:italic\"\u003eSOME_SPECIFIED_TIME\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    status = current_time \u0026lt;= date_time;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eNow, let\u0026rsquo;s make it \u003cem\u003epure\u003c/em\u003e and while we are at it, we introduce \u003cem\u003epure functions\u003c/em\u003e and some principles as well.\u003c/p\u003e\n\u003ch3 id=\"pure-functions-return-at-least-one-output\"\u003ePure functions return at least one output\u003c/h3\u003e\n\u003cp\u003eThat means that if you have a function named \u003ccode\u003esome_function\u003c/code\u003e, you will have at least one argument \u003ccode\u003esome_input\u003c/code\u003e and it will return at least one output \u003ccode\u003esome_output\u003c/code\u003e.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-rust\" data-lang=\"rust\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"font-weight:bold\"\u003efn\u003c/span\u003e \u003cspan style=\"color:#666;font-weight:bold;font-style:italic\"\u003esome_function\u003c/span\u003e(some_input) -\u0026gt; \u003cspan style=\"color:#666;font-weight:bold;font-style:italic\"\u003esome_output\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eWhy do we do this? When we are calling a function, we are expecting \u003cspan class=\"underline\"\u003esomething\u003c/span\u003e to happen.\nIn \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003cabbr title=\"Functional Programming\"\u003eFP\u003c/abbr\u003e world, the only acceptable \u003cem\u003esomething\u003c/em\u003e is an output argument.\nA lack of output is \u003cem\u003esymptomatic\u003c/em\u003e of one of these two unacceptable situations:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003eOur function does nothing\u003c/strong\u003e. In which case, why are we even bothering to write it at all?\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eOur function is doing a side effect\u003c/strong\u003e. Which means that it is changing something other than what is inside the function.\nThese functions don\u0026rsquo;t let us know or control what they are doing inside, without making us look at the source code.\nWe will get back to this throughout this post.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003ePlease note the emphasis on \u003cem\u003esymptomatic\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eSo let\u0026rsquo;s make it return the output:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-rust\" data-lang=\"rust\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"font-weight:bold\"\u003efn\u003c/span\u003e \u003cspan style=\"color:#666;font-weight:bold;font-style:italic\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"font-weight:bold;font-style:italic\"\u003elet\u003c/span\u003e \u003cspan style=\"font-weight:bold\"\u003emut\u003c/span\u003e status: \u003cspan style=\"font-weight:bold\"\u003ebool\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"font-weight:bold;font-style:italic\"\u003elet\u003c/span\u003e output = calculate_my_lateness(\u0026amp;\u003cspan style=\"font-weight:bold\"\u003emut\u003c/span\u003e status);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#888;font-style:italic\"\u003e//--^^^^^^------------ we have an output now\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#888;font-style:italic\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  assert_eq!(output, \u003cspan style=\"font-weight:bold\"\u003etrue\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#888;font-style:italic\"\u003e//---------^^^^^^----- which we use here\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#888;font-style:italic\"\u003e\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"font-weight:bold\"\u003efn\u003c/span\u003e \u003cspan style=\"color:#666;font-weight:bold;font-style:italic\"\u003ecalculate_my_lateness\u003c/span\u003e(status: \u003cspan style=\"font-weight:bold\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#666;font-weight:bold;font-style:italic\"\u003emut\u003c/span\u003e \u003cspan style=\"font-weight:bold\"\u003ebool\u003c/span\u003e) -\u0026gt; \u003cspan style=\"font-weight:bold\"\u003ebool\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#888;font-style:italic\"\u003e//-notice that we are returning something--^^^^--\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#888;font-style:italic\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"font-weight:bold;font-style:italic\"\u003elet\u003c/span\u003e current_time = std::time::SystemTime::now();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"font-weight:bold;font-style:italic\"\u003elet\u003c/span\u003e expected_time = std::time::SystemTime::from(\u003cspan style=\"color:#666;font-weight:bold;font-style:italic\"\u003eSOME_SPECIFIED_TIME\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    status = current_time \u0026lt;= date_time;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    status \u003cspan style=\"color:#888;font-style:italic\"\u003e// \u0026lt;- what we are returning\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#888;font-style:italic\"\u003e\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"pure-functions-don-t-mutate-state\"\u003ePure functions don\u0026rsquo;t mutate state\u003c/h3\u003e\n\u003cp\u003eAs I mentioned before, a function does something when it returns something and changes the state of something outside itself.\nWe call that a \u003cdfn\u003eside-effect\u003c/dfn\u003e.\nYou may have noticed that our function takes a mutable variable of type \u003ccode\u003ebool\u003c/code\u003e and changes it.\nIn our first iteration of the function, we needed it. But now, we grew out of it. So let\u0026rsquo;s just delete it.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-rust\" data-lang=\"rust\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"font-weight:bold\"\u003efn\u003c/span\u003e \u003cspan style=\"color:#666;font-weight:bold;font-style:italic\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#888;font-style:italic\"\u003e// let mut status: bool;  \u0026lt;- we don\u0026#39;t need this\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#888;font-style:italic\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"font-weight:bold;font-style:italic\"\u003elet\u003c/span\u003e output = calculate_my_lateness();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#888;font-style:italic\"\u003e//--------------------------------^ we don\u0026#39;t need to take status any more\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#888;font-style:italic\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  assert_eq!(output, \u003cspan style=\"font-weight:bold\"\u003etrue\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"font-weight:bold\"\u003efn\u003c/span\u003e \u003cspan style=\"color:#666;font-weight:bold;font-style:italic\"\u003ecalculate_my_lateness\u003c/span\u003e() -\u0026gt; \u003cspan style=\"font-weight:bold\"\u003ebool\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#888;font-style:italic\"\u003e//------------------^^- we don\u0026#39;t need to take a mutable variable\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#888;font-style:italic\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"font-weight:bold;font-style:italic\"\u003elet\u003c/span\u003e current_time = std::time::SystemTime::now();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"font-weight:bold;font-style:italic\"\u003elet\u003c/span\u003e expected_time = std::time::SystemTime::from(\u003cspan style=\"color:#666;font-weight:bold;font-style:italic\"\u003eSOME_SPECIFIED_TIME\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    current_time \u0026lt;= date_time \u003cspan style=\"color:#888;font-style:italic\"\u003e//  \u0026lt;- what we are returning\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#888;font-style:italic\"\u003e\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eNow isn\u0026rsquo;t this better? When I call \u003ccode\u003ecalculate_my_lateness()\u003c/code\u003e\nI\u0026rsquo;m not worried about the function changing anything it\u0026rsquo;s not supposed to anymore.\nLet\u0026rsquo;s move on.\u003c/p\u003e\n\u003ch3 id=\"pure-functions-return-output-only-based-on-their-argument\"\u003ePure functions return output only based on their argument\u003c/h3\u003e\n\u003cp\u003eWhich means that when I call \u003ccode\u003ecalculate_my_lateness()\u003c/code\u003e, I should not expect it to do something different each time I run it.\nWhy is that? There are two reasons:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003eTransparency\u003c/strong\u003e: You should know what parameters change the output of a function, without needing to reading the function body.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eTesting\u003c/strong\u003e: It is hell of a lot easier to test a function that you can just control without needing to change the time of your computer. Won\u0026rsquo;t you say?\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eLet\u0026rsquo;s do it in two steps this time.\u003c/p\u003e\n\u003ch4 id=\"step-one-don-t-use-global-variables\"\u003eStep one: Don\u0026rsquo;t use global variables\u003c/h4\u003e\n\u003cp\u003eyou may have noticed \u003ccode\u003eSOME_SPECIFIED_TIME\u003c/code\u003e.\nThis is a variable we use to make a \u003ccode\u003eSystemTime\u003c/code\u003e which we compare current time with to know if we are late or not.\nThe problem here is these two:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eWe need to write a new function, each time we have a new meeting.\u003c/li\u003e\n\u003cli\u003eWe also don\u0026rsquo;t know what time current time is being compared to, unless we first read the function, and then find out what it uses as \u003ccode\u003eSOME_SPECIFIED_TIME\u003c/code\u003e.\u003c/li\u003e\n\u003c/ol\u003e\n\u003c!--listend--\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-rust\" data-lang=\"rust\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"font-weight:bold\"\u003efn\u003c/span\u003e \u003cspan style=\"color:#666;font-weight:bold;font-style:italic\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"font-weight:bold;font-style:italic\"\u003elet\u003c/span\u003e output = calculate_my_lateness(SystemTime::from(\u003cspan style=\"color:#666;font-weight:bold;font-style:italic\"\u003eSOME_SPECIFIED_TIME\u003c/span\u003e));\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#888;font-style:italic\"\u003e//---------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#888;font-style:italic\"\u003e\u003c/span\u003e  \u003cspan style=\"color:#888;font-style:italic\"\u003e// now the caller is supposed to provide the time\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#888;font-style:italic\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  assert_eq!(output, \u003cspan style=\"font-weight:bold\"\u003etrue\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"font-weight:bold\"\u003efn\u003c/span\u003e \u003cspan style=\"color:#666;font-weight:bold;font-style:italic\"\u003ecalculate_my_lateness\u003c/span\u003e(late_as_of: \u003cspan style=\"color:#666;font-weight:bold;font-style:italic\"\u003eSystemTime\u003c/span\u003e) -\u0026gt; \u003cspan style=\"font-weight:bold\"\u003ebool\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#888;font-style:italic\"\u003e//-------------------^^^^^^^^^^^^^^^^^^^^^^-----------\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#888;font-style:italic\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"font-weight:bold;font-style:italic\"\u003elet\u003c/span\u003e current_time = std::time::SystemTime::now();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    current_time \u0026lt;= late_as_of\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"step-two-don-t-use-functions-with-side-effects-inside-your-function\"\u003eStep Two: don\u0026rsquo;t use functions with side effects inside your function\u003c/h4\u003e\n\u003cp\u003eImagine that you have a non-alcoholic drink, if you add another non-alcoholic drink to it, it is still non-alcoholic.\nBut if you add an alcoholic drink to it, it will not remain non-alcoholic anymore.\nA pure function is only pure, if all the functions that are being called in it, are pure.\nAnd \u003ccode\u003estd::time:SystemTime::now()\u003c/code\u003e is definitely not pure.\nNow, at some point we need to get the current time, but we don\u0026rsquo;t need to do that where it is hidden from the caller.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-rust\" data-lang=\"rust\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"font-weight:bold\"\u003efn\u003c/span\u003e \u003cspan style=\"color:#666;font-weight:bold;font-style:italic\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"font-weight:bold;font-style:italic\"\u003elet\u003c/span\u003e output = calculate_my_lateness(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                   SystemTime::from(\u003cspan style=\"color:#666;font-weight:bold;font-style:italic\"\u003eSOME_SPECIFIED_TIME\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                   SystemTime::now(),\u003cspan style=\"color:#888;font-style:italic\"\u003e//\u0026lt;------ we provide the time\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#888;font-style:italic\"\u003e\u003c/span\u003e  );\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  assert_eq!(output, \u003cspan style=\"font-weight:bold\"\u003etrue\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"font-weight:bold\"\u003efn\u003c/span\u003e \u003cspan style=\"color:#666;font-weight:bold;font-style:italic\"\u003ecalculate_my_lateness\u003c/span\u003e(late_as_of: \u003cspan style=\"color:#666;font-weight:bold;font-style:italic\"\u003eSystemTime\u003c/span\u003e, target_time: \u003cspan style=\"color:#666;font-weight:bold;font-style:italic\"\u003eSystemTime\u003c/span\u003e ) -\u0026gt; \u003cspan style=\"font-weight:bold\"\u003ebool\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#888;font-style:italic\"\u003e//-------------------------------------------^^^^^^^^^^^^^^^^^^^^^^^-----------\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#888;font-style:italic\"\u003e\u003c/span\u003e    target_time \u0026lt;= late_as_of\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eNow the nice thing here is that we can easily test this function now!\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-rust\" data-lang=\"rust\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#888;font-style:italic\"\u003e// main and calculate_my_lateness are not shown here. Don\u0026#39;t be alarmed.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#888;font-style:italic\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#888;font-weight:bold\"\u003e#[cfg(test)]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"font-weight:bold\"\u003emod\u003c/span\u003e \u003cspan style=\"color:#666;font-weight:bold;font-style:italic\"\u003etests\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"font-weight:bold\"\u003euse\u003c/span\u003e \u003cspan style=\"font-weight:bold\"\u003esuper\u003c/span\u003e::calculate_my_lateness;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"font-weight:bold\"\u003euse\u003c/span\u003e std::time::SystemTime;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#888;font-weight:bold\"\u003e#[test]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"font-weight:bold\"\u003efn\u003c/span\u003e \u003cspan style=\"color:#666;font-weight:bold;font-style:italic\"\u003ebeing_late_works\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"font-weight:bold;font-style:italic\"\u003elet\u003c/span\u003e res = calculate_my_lateness(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            SystemTime::from(\u003cspan style=\"color:#666;font-weight:bold;font-style:italic\"\u003eA_TIME\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            SystemTime::from(\u003cspan style=\"color:#666;font-weight:bold;font-style:italic\"\u003eA_TIME_THAT_IS_AFTER_LATE_TIME\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        );\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        assert_eq!(res, \u003cspan style=\"font-weight:bold\"\u003etrue\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#888;font-weight:bold\"\u003e#[test]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"font-weight:bold\"\u003efn\u003c/span\u003e \u003cspan style=\"color:#666;font-weight:bold;font-style:italic\"\u003ebeing_early_works\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"font-weight:bold;font-style:italic\"\u003elet\u003c/span\u003e res = calculate_my_lateness(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            SystemTime::from(\u003cspan style=\"color:#666;font-weight:bold;font-style:italic\"\u003eA_TIME\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            SystemTime::from(\u003cspan style=\"color:#666;font-weight:bold;font-style:italic\"\u003eA_TIME_THAT_IS_BEFORE_LATE_TIME\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        );\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        assert_eq!(res, \u003cspan style=\"font-weight:bold\"\u003efalse\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eImagine doing this with the first function!\u003c/p\u003e\n\u003ch4 id=\"one-more-step\"\u003eOne more step\u003c/h4\u003e\n\u003cp\u003eOK, I lied\u0026hellip; Somewhat. Have you noticed the one glaring, lack of transparency and control here?\nIt\u0026rsquo;s the \u003ccode\u003e\u0026lt;=\u003c/code\u003e. You may need to read the function here, if you have this simple question:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eIf I call the function exactly, at the precise moment that I specified to be \u003ccode\u003elate_as_of\u003c/code\u003e, will return true, or false?\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eNow, not answering this question using the function signature,won\u0026rsquo;t make my function less pure,but still, it is a much nicer experience for the caller to be able to rely on their IDE\u0026rsquo;s autocomplete to tell them what happens.But how the hell should we do that? Easy! We take a comparator function as input!\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-rust\" data-lang=\"rust\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"font-weight:bold\"\u003efn\u003c/span\u003e \u003cspan style=\"color:#666;font-weight:bold;font-style:italic\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"font-weight:bold;font-style:italic\"\u003elet\u003c/span\u003e output = calculate_my_lateness(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                   SystemTime::from(\u003cspan style=\"color:#666;font-weight:bold;font-style:italic\"\u003eSOME_SPECIFIED_TIME\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                   SystemTime::now(),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                   |late, target| target \u0026gt; late, \u003cspan style=\"color:#888;font-style:italic\"\u003e// here the caller passes the function\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#888;font-style:italic\"\u003e\u003c/span\u003e                                                 \u003cspan style=\"color:#888;font-style:italic\"\u003e// you can also provide a few different functions yourself to make it easier for the caller\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#888;font-style:italic\"\u003e\u003c/span\u003e  );\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  assert_eq!(output, \u003cspan style=\"font-weight:bold\"\u003etrue\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"font-weight:bold\"\u003efn\u003c/span\u003e \u003cspan style=\"color:#666;font-weight:bold;font-style:italic\"\u003ecalculate_my_lateness\u003c/span\u003e(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    late_as_of: \u003cspan style=\"color:#666;font-weight:bold;font-style:italic\"\u003eSystemTime\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    target_time: \u003cspan style=\"color:#666;font-weight:bold;font-style:italic\"\u003eSystemTime\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    comparer: \u003cspan style=\"color:#666;font-weight:bold;font-style:italic\"\u003efn\u003c/span\u003e(SystemTime, SystemTime) -\u0026gt; \u003cspan style=\"font-weight:bold\"\u003ebool\u003c/span\u003e, \u003cspan style=\"color:#888;font-style:italic\"\u003e// magic happens here\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#888;font-style:italic\"\u003e\u003c/span\u003e) -\u0026gt; \u003cspan style=\"font-weight:bold\"\u003ebool\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    comparer(late_as_of, target_time)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eNow the caller is providing us we have everything we need. We did not hide one single thing.\u003c/p\u003e\n\u003ch3 id=\"isn-t-this-just-more-work-for-caller\"\u003eIsn\u0026rsquo;t this just more work for caller?\u003c/h3\u003e\n\u003cp\u003eWell, yes. Yes, it is\u0026hellip; if calling functions without understanding them is the only work that the caller of our function is doing.\nOtherwise, our caller knows everything they need using their language server, can change everything they need, have the assurance of our tests and don\u0026rsquo;t need to crawl through our source code, and they will face much fewer bugs where they don\u0026rsquo;t know where it came from.\nIt may seem unnecessary for this simple function, but imagine much more complex functions.\u003c/p\u003e\n\u003ch2 id=\"making-things-nicer-a-spicy-problem\"\u003eMaking things nicer: A spicy problem\u003c/h2\u003e\n\u003cp\u003eSo we have all this power and transparency.\nBut the elephant is in it room: We have a very shitty \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003cabbr title=\"Application Programming Interface\"\u003eAPI\u003c/abbr\u003e.\nLet\u0026rsquo;s make it nicer using a technique called \u003cdfn\u003ecurrying\u003c/dfn\u003e (hence the \u0026ldquo;spicy\u0026rdquo; pun).\nWhat it means is: as well as taking functions as argument, we can return functions.\nThat way, our \u003ccode\u003ecalculate_my_lateness\u003c/code\u003e function can become a function-maker.\nLet me make it more concrete.\u003c/p\u003e\n\u003ch3 id=\"consider-the-use-case\"\u003eConsider the use case\u003c/h3\u003e\n\u003cp\u003eLet us suppose that we want to find time in our list of times that is not late.\nCurrently, we have to call the whole function, repeatedly, and include every argument.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-rust\" data-lang=\"rust\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#888;font-style:italic\"\u003e// we are in main, don\u0026#39;t be alarmed\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#888;font-style:italic\"\u003e\u003c/span\u003e\u003cspan style=\"font-weight:bold;font-style:italic\"\u003elet\u003c/span\u003e output_time1 = calculate_my_lateness(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    SystemTime::from(\u003cspan style=\"color:#666;font-weight:bold;font-style:italic\"\u003eSOME_SPECIFIED_TIME\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    SystemTime::from(\u003cspan style=\"color:#666;font-weight:bold;font-style:italic\"\u003eFIRST_TIME\u003c/span\u003e), \u003cspan style=\"color:#888;font-style:italic\"\u003e//\u0026lt;------ we provide the time\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#888;font-style:italic\"\u003e\u003c/span\u003e    |late, target| target \u0026gt; late,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"font-weight:bold;font-style:italic\"\u003elet\u003c/span\u003e output_time2 = calculate_my_lateness(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    SystemTime::from(\u003cspan style=\"color:#666;font-weight:bold;font-style:italic\"\u003eSOME_SPECIFIED_TIME\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    SystemTime::from(\u003cspan style=\"color:#666;font-weight:bold;font-style:italic\"\u003eSECOND_TIME\u003c/span\u003e), \u003cspan style=\"color:#888;font-style:italic\"\u003e//\u0026lt;------ we provide the time\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#888;font-style:italic\"\u003e\u003c/span\u003e    |late, target| target \u0026gt; late,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"font-weight:bold;font-style:italic\"\u003elet\u003c/span\u003e output_time3 = calculate_my_lateness(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    SystemTime::from(\u003cspan style=\"color:#666;font-weight:bold;font-style:italic\"\u003eSOME_SPECIFIED_TIME\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    SystemTime::from(\u003cspan style=\"color:#666;font-weight:bold;font-style:italic\"\u003eTHIRD_TIME\u003c/span\u003e), \u003cspan style=\"color:#888;font-style:italic\"\u003e//\u0026lt;------ we provide the time\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#888;font-style:italic\"\u003e\u003c/span\u003e    |late, target| target \u0026gt; late,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#888;font-style:italic\"\u003e// etc...\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThis is not great.\nHere, We can just make a function that only takes our target time.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-rust\" data-lang=\"rust\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"font-weight:bold\"\u003efn\u003c/span\u003e \u003cspan style=\"color:#666;font-weight:bold;font-style:italic\"\u003ecalculate_my_lateness\u003c/span\u003e(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    late_as_of: \u003cspan style=\"color:#666;font-weight:bold;font-style:italic\"\u003eSystemTime\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#888;font-style:italic\"\u003e// target_time: SystemTime \u0026lt;------------ we don\u0026#39;t need to take this argument anymore\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#888;font-style:italic\"\u003e\u003c/span\u003e    comparer: \u003cspan style=\"color:#666;font-weight:bold;font-style:italic\"\u003efn\u003c/span\u003e(late_as_of: \u003cspan style=\"color:#666;font-weight:bold;font-style:italic\"\u003eSystemTime\u003c/span\u003e, target_time: \u003cspan style=\"color:#666;font-weight:bold;font-style:italic\"\u003eSystemTime\u003c/span\u003e) -\u0026gt; \u003cspan style=\"font-weight:bold\"\u003ebool\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e) -\u0026gt; \u003cspan style=\"color:#666;font-weight:bold;font-style:italic\"\u003efn\u003c/span\u003e(target_time: \u003cspan style=\"color:#666;font-weight:bold;font-style:italic\"\u003eSystemTime\u003c/span\u003e) -\u0026gt; \u003cspan style=\"font-weight:bold\"\u003ebool\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e     \u003cspan style=\"color:#888;font-style:italic\"\u003e//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---- notice that we are now returning a function\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#888;font-style:italic\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    |target_time: \u003cspan style=\"color:#666;font-weight:bold;font-style:italic\"\u003eSystemTime\u003c/span\u003e| -\u0026gt; \u003cspan style=\"font-weight:bold\"\u003ebool\u003c/span\u003e { comparer(target_time, late_as_of) }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#888;font-style:italic\"\u003e//^^^^^^^^^^^^^^^^^^^^^^           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#888;font-style:italic\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#888;font-style:italic\"\u003e//         |                this is where the calculation of lateness happens\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#888;font-style:italic\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#888;font-style:italic\"\u003e// we are taking target time here\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#888;font-style:italic\"\u003e\u003c/span\u003e }\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eYou might ask, \u0026ldquo;well, how does this help?\u0026rdquo;\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-rust\" data-lang=\"rust\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#888;font-style:italic\"\u003e// we are in  main\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#888;font-style:italic\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#888;font-style:italic\"\u003e// now our late_before_time_x is not of type bool,\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#888;font-style:italic\"\u003e// rather it is of type Fn(SystemTime) -\u0026gt; bool\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#888;font-style:italic\"\u003e\u003c/span\u003e\u003cspan style=\"font-weight:bold;font-style:italic\"\u003elet\u003c/span\u003e late_before_time_x = calculate_my_lateness(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    SystemTime::from(\u003cspan style=\"color:#666;font-weight:bold;font-style:italic\"\u003eSOME_SPECIFIED_TIME\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    |late, target| target \u0026gt; late,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#888;font-style:italic\"\u003e// So we can just:\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#888;font-style:italic\"\u003e\u003c/span\u003e\u003cspan style=\"font-weight:bold;font-style:italic\"\u003elet\u003c/span\u003e first_result = late_before_time_x(\u003cspan style=\"color:#666;font-weight:bold;font-style:italic\"\u003eFIRST_TIME\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"font-weight:bold;font-style:italic\"\u003elet\u003c/span\u003e second_result = late_before_time_x(\u003cspan style=\"color:#666;font-weight:bold;font-style:italic\"\u003eSECOND_TIME\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"font-weight:bold;font-style:italic\"\u003elet\u003c/span\u003e third_result = late_before_time_x(\u003cspan style=\"color:#666;font-weight:bold;font-style:italic\"\u003eTHIRD_TIME\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#888;font-style:italic\"\u003e// ...much less boilerplate\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"why-const-just-won-t-do\"\u003eWhy \u003ccode\u003econst\u003c/code\u003e just won\u0026rsquo;t do\u003c/h3\u003e\n\u003cp\u003eVeteran rustaceans among the readers of this blog might ask: \u0026ldquo;why not just use \u003ccode\u003econst\u003c/code\u003e to mark that functions are pure?\u0026rdquo;\nWell dear veteran, if you can make a function \u003ccode\u003econst\u003c/code\u003e, do every one a favor and actually do it.\nIn fact, I regularly use \u003ccode\u003eclippy::missing_const_for_fn\u003c/code\u003e lint and suggest you to use it as well.\nBut that does not guarantee that our functions are pure, or that every pure function can be \u003ccode\u003econst\u003c/code\u003e.\nHere are my reasons:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003ccode\u003econst\u003c/code\u003e functions can take \u003ccode\u003e\u0026amp;mut something\u003c/code\u003e as their arguments. Taking mutable references is definitely not very pure-function-y.\u003c/li\u003e\n\u003cli\u003eYou cannot \u003ccode\u003econst\u003c/code\u003e trait methods in stable \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003ca class=\"language\" href=\"https://www.rust-lang.org/\"\u003eRust\u003c/a\u003e\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n, as of now. And considering that every function call inside a \u003ccode\u003econst\u003c/code\u003e function should be \u003ccode\u003econst\u003c/code\u003e as well, you are extremely limited, without any reasons that have to do with pure functions.\u003c/li\u003e\n\u003cli\u003eMany libraries don\u0026rsquo;t to use \u003ccode\u003econst\u003c/code\u003e on the functions that are \u003ccode\u003econst\u003c/code\u003e. Again, limitation without pureness reasons.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"making-things-declarative\"\u003eMaking things declarative\u003c/h2\u003e\n\u003cp\u003eThere is this often repeated old joke that says:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eThere two hard problems in programming\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eCache invalidation\u003c/li\u003e\n\u003cli\u003eNaming things\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u0026ndash; \u003cspan class=\"person p-name\"\u003ePhil Karlton\u003c/span\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eAnd here we are concerned with the second one.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eIn the \u003cstrong\u003eimperative\u003c/strong\u003e universe, we usually name our functions using \u003cem\u003everbs\u003c/em\u003e. Think \u003ccode\u003ecalculate_my_lateness\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eIn the \u003cstrong\u003edeclarative\u003c/strong\u003e universe we are concerned with our output, we use \u003cem\u003enouns\u003c/em\u003e. Think \u003ccode\u003elateness_calculator\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThis makes the intent of our function clear.\nHow it is implemented under-the-hood is not what matters to the caller.\nThey only care about what they get out of it.\nIf you now are thinking that you cared about that part before, consider the things that we just can answer by seeing the arguments that our function takes.\nWe don\u0026rsquo;t need to rely on our function name anymore to tell use how the function is calculating lateness.\nWe only need to know what it\u0026rsquo;s intention is.\u003c/p\u003e\n\u003ch2 id=\"dear-reader\"\u003eDear Reader\u003c/h2\u003e\n\u003cp\u003eIn this post, I just preferred to focus on the heart of \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003cabbr title=\"Functional Programming\"\u003eFP\u003c/abbr\u003e: \u003cem\u003epure declarative functions\u003c/em\u003e.\nHowever, functional programming brings with it a set of extremely useful tools, patterns, etc. most well known are \u003cem\u003eiterators\u003c/em\u003e, \u003cem\u003emaps\u003c/em\u003e, \u003cem\u003efolds\u003c/em\u003e, \u003cem\u003efilters\u003c/em\u003e, etc.\nHonestly, they are well explained in other resources. My only suggestion would be to check out \u003ca href=\"https://docs.rs/itertools/latest/itertools/\"\u003eitertools\u003c/a\u003e crate.\u003c/p\u003e\n",
            "date_published": "2023-03-25T22:36:00+03:30"
        }
    ]
    
}
