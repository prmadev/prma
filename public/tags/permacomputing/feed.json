
{
    "version": "https://jsonfeed.org/version/1.1",
    "title": "permacomputing on prma",
    "home_page_url": "https://prma.dev/tags/permacomputing/",
    "feed_url": "https://prma.dev/tags/permacomputing/feed.json",
    "authors": [{
        "name": {"email":"prma.dev@protonmail.com","name":"Perma"},
    }],
    "items": [ {
            "title": "Dishonesty of Optimizing for Developer Time",
            "id": "https://prma.dev/posts/dishonesty_of_optimizing_for_developers_time/",
            "url": "https://prma.dev/posts/dishonesty_of_optimizing_for_developers_time/",
            "summary": "Intro Based on some individuals\u0026rsquo; viewpoints, they emphasize optimizing for developer time or productivity as their main priority, rather than giving top precedence to aspects such as performance, robustness, or correctness.\nThe Thesis Their argument revolves around the idea that developers\u0026rsquo; time is more valuable and expensive than server resources. They often use phrases like \u0026ldquo;You can always refactor,\u0026rdquo; \u0026ldquo;You can always optimize for performance,\u0026rdquo; or \u0026ldquo;We will fix bugs later on\u0026rdquo; to support their viewpoint.",
            "content_html": "\u003ch2 id=\"intro\"\u003eIntro\u003c/h2\u003e\n\u003cp\u003eBased on some individuals\u0026rsquo; viewpoints, they emphasize optimizing for developer time or productivity as their main priority, rather than giving top precedence to aspects such as performance, robustness, or correctness.\u003c/p\u003e\n\u003ch2 id=\"the-thesis\"\u003eThe Thesis\u003c/h2\u003e\n\u003cp\u003eTheir argument revolves around the idea that developers\u0026rsquo; time is more valuable and expensive than server resources. They often use phrases like \u0026ldquo;You can always refactor,\u0026rdquo; \u0026ldquo;You can always optimize for performance,\u0026rdquo; or \u0026ldquo;We will fix bugs later on\u0026rdquo; to support their viewpoint. While this perspective may be considered ingenious, it is contingent on proper planning, weighing the trade-offs, and actually acting upon those decisions.\u003c/p\u003e\n\u003ch2 id=\"my-antithesis\"\u003eMy Antithesis\u003c/h2\u003e\n\u003cp\u003eHowever, if this were genuinely the case, more substantial effort would have been invested in refactoring or choosing a more rigorous language than \u003cabbr class=\"language\" title=\"JS\"\u003e\u003ca href=\"https://ecma-international.org/publications-and-standards/standards/ecma-262/\"\u003eJavaScript\u003c/a\u003e\u003c/abbr\u003e\n, for example, a language that can significantly boost performance in the long run.\u003c/p\u003e\n\u003cp\u003eFixing bugs in backends written in \u003cabbr class=\"language\" title=\"JS\"\u003e\u003ca href=\"https://ecma-international.org/publications-and-standards/standards/ecma-262/\"\u003eJavaScript\u003c/a\u003e\u003c/abbr\u003e\n, \u003cabbr class=\"language\" title=\"PHP: Hypertext Preprocessor\"\u003e\u003ca href=\"https://www.php.net/\"\u003ePHP\u003c/a\u003e\u003c/abbr\u003e\n, or \u003ca class=\"language\" href=\"https://www.python.org/\"\u003ePython\u003c/a\u003e\n is certainly feasible, but adding performance improvements can become challenging, if not improbable. More meticulous programming tools automate the process of finding and fixing even the most elusive bugs and come with significant performance optimizations. The ability to make well-founded assumptions about the program allows for better optimization.\u003c/p\u003e\n\u003cp\u003eThis approach often leads to a situation where future engineers, tasked with rewriting the \u003cabbr title=\"Minimum Viable Product\"\u003eMVP\u003c/abbr\u003e\n program in a more scalable language, face an archeological rediscovery process.\u003c/p\u003e\n\u003cp\u003eSo, if they are not genuinely optimizing for shorter development time, what are they doing?\u003c/p\u003e\n\u003ch2 id=\"lifting-the-veil-the-actual-thesis\"\u003eLifting The Veil: The Actual Thesis\u003c/h2\u003e\n\u003cp\u003eIt appears that they prioritize short-term gains over achieving greater long-term goals.\u003c/p\u003e\n\u003cp\u003eA language like \u003ca class=\"language\" href=\"https://www.rust-lang.org/\"\u003eRust\u003c/a\u003e\n, while providing benefits like enhanced safety and reliability, requires significantly more time to produce a binary or \u003cabbr title=\"Application Programming Interface\"\u003eAPI\u003c/abbr\u003e\ns. The manual labor of finding bugs is taken over by the compiler and the language\u0026rsquo;s semantics. If the focus is on developer productivity, then this automation is naturally desirable. However, what one truly desires to convey is \u0026ldquo;I have this feature, even though it may have some bugs and performance issues, I have it nonetheless.\u0026rdquo;\u003c/p\u003e\n\u003ch2 id=\"the-synthesis\"\u003eThe Synthesis\u003c/h2\u003e\n\u003cp\u003eThat may be a positively good idea for trying the market to see if there is any for that specific idea, for most software developements though, the actual intention is not experimentation, as the novelty of product and bussiness plan do not warrant a need for experimentaion. rather, having something to sell, as fast as possible. That\u0026rsquo;s for start ups. Where there is both legitimate and illegitimate short-termism. But more established enterprises may have this pairing as well. While there are A/B experimentaions going on, trying different approaches to see which works, middle management might also like the addition of another achievement in their yearly reports.\u003c/p\u003e\n\u003cp\u003eA rapid way to discern whether it falls under the category of experimentation/prototyping or an \u003cabbr title=\"Minimum Viable Product\"\u003eMVP\u003c/abbr\u003e\n/achievement-oriented project is to examine whether there is a notably extended period allocated for the program\u0026rsquo;s rewrite compared to its initial development phase.\u003c/p\u003e\n\u003ch2 id=\"dear-reader\"\u003eDear Reader\u003c/h2\u003e\n\u003cp\u003eSimilar to many phenomena, short-termism can indeed have legitimate applications. The reluctance of many to embrace this term is rooted in its improper and illegitimate uses.\u003c/p\u003e\n\u003cp\u003eCertainly, there are well-intentioned individuals who advocate for developer productivity. However, those with ample experience will acknowledge that long-term developer productivity is not synonymous with low-overhead development, and, more often than not, these two objectives are incompatible.\u003c/p\u003e\n",
            "date_published": "2023-07-31T12:24:00+03:30"
        }, {
            "title": "Consider Developer's Snack",
            "id": "https://prma.dev/posts/consider_developers_snack/",
            "url": "https://prma.dev/posts/consider_developers_snack/",
            "summary": "Intro During my early 20s, I found myself immersed in the world of sustainable architecture as an architecture student. Engaging in various workshops centered around this field, one particular experience stands out as a monumental turning point in my life. It was a workshop conducted by a renowned professor in Iran, where I gained valuable insights. Within this workshop, we collectively brainstormed strategies to harness heat sources for a four-member family\u0026rsquo;s house, aiming to optimize its thermal efficiency.",
            "content_html": "\u003ch2 id=\"intro\"\u003eIntro\u003c/h2\u003e\n\u003cp\u003eDuring my early 20s, I found myself immersed in the world of sustainable architecture as an architecture student. Engaging in various workshops centered around this field, one particular experience stands out as a monumental turning point in my life. It was a workshop conducted by a renowned professor in Iran, where I gained valuable insights.\nWithin this workshop, we collectively brainstormed strategies to harness heat sources for a four-member family\u0026rsquo;s house, aiming to optimize its thermal efficiency. We considered a range of possibilities, including solar and geothermal heat, as well as the heat generated by the kitchen oven. However, there was one significant heat source that eluded our attention, as pointed out persistently by the professor.\u003c/p\u003e\n\u003cp\u003eEventually, he provided us with a clue: \u0026ldquo;You seem to have overlooked four 37-degree Celsius heaters.\u0026rdquo; It dawned on us that we had forgotten to factor in the heat generated by the family members themselves. Their body heat, a natural source of warmth, had slipped our minds entirely.\u003c/p\u003e\n\u003cp\u003eReflecting on a more recent occurrence, a certain paper began circulating, comparing the energy usage footprint of different programming languages. Yet, I couldn\u0026rsquo;t help but notice that the discussions surrounding this paper overlooked a crucial aspect-it solely measured the energy footprint at one specific point in the application\u0026rsquo;s lifecycle.\u003c/p\u003e\n\u003cp\u003eIt is essential to recognize that the energy usage of a programming language extends beyond a mere snapshot analysis. To truly grasp the overall impact, we must consider the entire lifecycle of the application, accounting for factors such as development, deployment, maintenance, and eventual retirement. Only then can we gain a comprehensive understanding of the energy implications associated with different programming languages.\u003c/p\u003e\n\u003ch2 id=\"the-paper-as-the-thread-we-pull\"\u003eThe Paper, As The Thread We Pull\u003c/h2\u003e\n\u003cp\u003eThe paper, titled \u0026ldquo;Energy Efficiency Across Programming Languages,\u0026rdquo; delves into the exploration of various problems and their corresponding solutions, which are implemented across multiple programming languages. The researchers conducted an analysis of the electricity consumption associated with each implementation. In essence, the primary focus of the study revolves around determining the relative energy efficiency of different programming languages, with \u003ca class=\"language\" href=\"https://www.iso.org/standard/74528.html\"\u003eC\u003c/a\u003e\n emerging as the most efficient and serving as the benchmark for measurement.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eC      | 01.00 | ▓\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eRust   | 01.03 | ▓\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eJava   | 01.98 | ▓▓\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ePython | 75.88 | ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ePerl   | 79.58 | ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThese results carry considerable weight, although it is essential to address a common misconception surrounding their implications. Contrary to popular belief, these findings do not unequivocally assert that a \u003ca class=\"language\" href=\"https://www.iso.org/standard/74528.html\"\u003eC\u003c/a\u003e\n program is inherently more environmentally sustainable than its \u003cdfn\u003eJava\u003c/dfn\u003e counterpart.\u003c/p\u003e\n\u003ch2 id=\"consider-the-snack\"\u003eConsider The Snack\u003c/h2\u003e\n\u003cp\u003eIn the field of sustainability literature, there exists a concept known as \u003cdfn\u003eLife-Cycle Assessment\u003c/dfn\u003e. \u003cabbr title=\"Life-Cycle Assessment\"\u003eLCA\u003c/abbr\u003e\n involves evaluating the environmental impact of a product throughout its entire life cycle, encompassing aspects such as raw material extraction, manufacturing, and disposal or recycling.\u003c/p\u003e\n\u003cp\u003eWhen applying this concept to the assessment of software life cycles, we realize that there are several significant factors that have been overlooked. Allow me to provide some insights on these important considerations.\u003c/p\u003e\n\u003cp\u003eFirstly, the authors of the paper have primarily focused on the runtime of a specific set of problems. This means that their applications follow a sequence of starting up, solving the given problem, and then exiting. Consequently, the results obtained are biased towards programming languages that excel at efficient startup and shutdown processes. However, this perspective fails to account for the behavior of servers and long-running processes. Servers, for instance, typically start up once per day or even less frequently and spend extended periods in the computational phase. If a programming language is efficient during the initial startup but requires frequent restarts during runtime, this crucial aspect is overlooked.\u003c/p\u003e\n\u003cp\u003eBut we shouldn\u0026rsquo;t stop there. Another aspect to consider is compilation. While \u003ca class=\"language\" href=\"https://www.rust-lang.org/\"\u003eRust\u003c/a\u003e\n is indeed an impressive language, its compilation process is significantly more resource-intensive compared to \u003ca class=\"language\" href=\"https://go.dev/\"\u003eGo\u003c/a\u003e\n. \u003ca class=\"language\" href=\"https://www.rust-lang.org/\"\u003eRust\u003c/a\u003e\n yields highly efficient binaries, but the energy expended during the compilation process is also considerably higher.\u003c/p\u003e\n\u003cp\u003eFurthermore, the improved quality of \u003ca class=\"language\" href=\"https://www.rust-lang.org/\"\u003eRust\u003c/a\u003e\n\u0026rsquo;s compiled binaries becomes relevant when we consider the potential presence of bugs and the subsequent need for recompilation. More permissive compilers may result in programs with a higher likelihood of bugs, necessitating additional rounds of debugging, fixing, and retesting. It\u0026rsquo;s important to acknowledge that this discussion goes beyond the developer\u0026rsquo;s running computer and includes factors such as sustenance needs, energy consumption to support their biological functioning during the process of bug fixing, and the overall impact on the environment.\u003c/p\u003e\n\u003cp\u003eAdditionally, the continuous deployment or release cycles, repackaging efforts, and the use of \u003cabbr title=\"Continues Integration\"\u003eCI\u003c/abbr\u003e\n/\u003cabbr title=\"Continues Delivery\"\u003eCD\u003c/abbr\u003e\n practices all contribute to the \u003cem\u003eecological footprint\u003c/em\u003e. Recompilation for each platform targeted, as well as the network costs associated with distributing binaries or source code to different endpoints, also significantly impact the environment.\u003c/p\u003e\n\u003cp\u003eThe problem of compatibility further compounds the issue. Programming languages with runtimes shipped separately from the package, such as \u003ca class=\"language\" href=\"https://www.python.org/\"\u003ePython\u003c/a\u003e\n, \u003ca class=\"language\" href=\"https://lua.org/\"\u003eLua\u003c/a\u003e\n, and other scripting or \u003cabbr title=\"Just-In-Time [compilation]\"\u003eJIT\u003c/abbr\u003e\n languages, as well as those based on virtual machines like \u003cabbr title=\"Java Virtual Machine\"\u003eJVM\u003c/abbr\u003e\n, often require reprogramming or the inclusion of older runtime versions when breaking changes occur. This adds to the complexity and environmental impact of software development and packaging.\u003c/p\u003e\n\u003cp\u003eFurthermore, poorly designed programs can accumulate significant technical debt over time, resulting in rewriting. Although the language and toolchain themselves may not directly cause this, the ecosystem surrounding languages like \u003cabbr class=\"language\" title=\"JS\"\u003e\u003ca href=\"https://ecma-international.org/publications-and-standards/standards/ecma-262/\"\u003eJavaScript\u003c/a\u003e\u003c/abbr\u003e\n, \u003cabbr class=\"language\" title=\"PHP: Hypertext Preprocessor\"\u003e\u003ca href=\"https://www.php.net/\"\u003ePHP\u003c/a\u003e\u003c/abbr\u003e\n, and \u003ca class=\"language\" href=\"https://www.python.org/\"\u003ePython\u003c/a\u003e\n   tends to encourage short-term thinking. In contrast, languages like \u003ca class=\"language\" href=\"https://www.rust-lang.org/\"\u003eRust\u003c/a\u003e\n, \u003ca class=\"language\" href=\"https://www.iso.org/standard/74528.html\"\u003eC\u003c/a\u003e\n, \u003ca class=\"language\" href=\"https://fortran-lang.org/\"\u003eFortran\u003c/a\u003e\n, and others that focus on system-level development promote long-term support and are home to projects that have thrived for several decades.\u003c/p\u003e\n\u003cp\u003eMoreover, the variability in usage patterns must be taken into account. While languages like \u003ca class=\"language\" href=\"https://www.iso.org/standard/74528.html\"\u003eC\u003c/a\u003e\n  and \u003cabbr class=\"language\" title=\"C\u0026#43;\u0026#43;\"\u003e\u003ca href=\"https://isocpp.org/\"\u003eCpp\u003c/a\u003e\u003c/abbr\u003e\n require substantial energy for compilation across different platforms, languages such as \u003ca class=\"language\" href=\"https://www.rust-lang.org/\"\u003eRust\u003c/a\u003e\n, \u003ca class=\"language\" href=\"https://go.dev/\"\u003eGo\u003c/a\u003e\n, and \u003ca class=\"language\" href=\"https://www.java.com\"\u003eJava\u003c/a\u003e\n mitigate the duplication of energy required to support multiple platforms within a single application.\u003c/p\u003e\n\u003cp\u003eFinally, we must consider the energy expended in the development, maintenance, and support of programming languages. Languages like \u003ca class=\"language\" href=\"https://www.rust-lang.org/\"\u003eRust\u003c/a\u003e\n offer remarkable expressive capabilities, not merely due to better timing or superior thinking but also as a result of extensive collaborative efforts. Conversely, languages like \u003ca class=\"language\" href=\"https://elm-lang.org/\"\u003eElm\u003c/a\u003e\n undergo minimal changes over time.\u003c/p\u003e\n\u003cp\u003eIt is worth emphasizing that the energy required to learn a language, the environmental consequences of mistakes made during coding (e.g., unintentionally sending a million requests to thousands to different servers), variations in energy usage among developers from different countries, and the decreasing lifespan of hardware are all factors that contribute to the overall consideration.\u003c/p\u003e\n\u003ch2 id=\"dear-reader\"\u003eDear Reader\u003c/h2\u003e\n\u003cp\u003eThe crux of the matter is that complexity pervades these considerations, demanding our thoughtful attention and appropriate mitigation for each aspect. Failing to acknowledge and address each facet places us at risk of optimizing solely for one element while sacrificing the other to the extent of rendering our efforts absurd.\u003c/p\u003e\n\u003cp\u003eIt is important to note that I have deliberately omitted discussions about post-harm mitigation. Our focus has been on reducing harm itself. Exploring the costs associated with bootstrapping and averting catastrophic scenarios would expand beyond the scope of this essay.\u003c/p\u003e\n",
            "date_published": "2023-06-21T11:43:00+03:30"
        }, {
            "title": "FLOSS For Software Longevity",
            "id": "https://prma.dev/posts/floss_for_longevity/",
            "url": "https://prma.dev/posts/floss_for_longevity/",
            "summary": "Intro Free/Libre and Open Source Software (FLOSS ) is a captivating realm within software development. What makes FLOSS particularly intriguing is its deviation from conventional business goals, leading to planned longevity and a distinct approach to sustainability.\nReasons Let us delve into the unique qualities of FLOSS and the factors that contribute to its better suitability for longevity.\nThe longevity of the FLOSS business model serves it well The common business models are better suited for short-term goals.",
            "content_html": "\u003ch2 id=\"intro\"\u003eIntro\u003c/h2\u003e\n\u003cp\u003eFree/Libre and Open Source Software (\u003cabbr title=\"Free/Libre and Open Source Software\"\u003eFLOSS\u003c/abbr\u003e\n) is a captivating realm within software development. What makes \u003cabbr title=\"Free/Libre and Open Source Software\"\u003eFLOSS\u003c/abbr\u003e\n particularly intriguing is its deviation from conventional business goals, leading to planned longevity and a distinct approach to sustainability.\u003c/p\u003e\n\u003ch2 id=\"reasons\"\u003eReasons\u003c/h2\u003e\n\u003cp\u003eLet us delve into the unique qualities of \u003cabbr title=\"Free/Libre and Open Source Software\"\u003eFLOSS\u003c/abbr\u003e\n and the factors that contribute to its better suitability for longevity.\u003c/p\u003e\n\u003ch3 id=\"the-longevity-of-the-business-model-serves-it-well\"\u003eThe longevity of the \u003cabbr title=\"Free/Libre and Open Source Software\"\u003eFLOSS\u003c/abbr\u003e\n business model serves it well\u003c/h3\u003e\n\u003cp\u003eThe common business models are better suited for short-term goals. There are two major approaches: selling or renting.\u003c/p\u003e\n\u003cp\u003eSmall to mid-sized software companies predominantly prioritize the sale of their products. The concept of product longevity, while acknowledged as necessary, assumes a secondary role rather than being a central objective. Its primary function lies in establishing trust among consumers. Once the initial excitement surrounding the launch of a new and captivating product subsides, these companies swiftly shift their attention to the next innovation. The success of marketing these novel products heavily relies on users\u0026rsquo; fear of missing out and the perceived loss of functionality associated with the previous iteration. Unfortunately, this often leads to the inclusion of unnecessary features, deliberate planning for obsolescence, and resistance against the right to repair. In this cycle, longevity takes a backseat as the perpetual replacement of one product with another takes precedence.\u003c/p\u003e\n\u003cp\u003eConversely, larger companies place a premium on the rental model for software. Instead of users owning the software outright, they opt for subscription-based payment models for continuous usage. One might assume that these companies would prioritize stability to retain their subscribers. However, practical implementation often takes a different route. These companies rely on monopolistic tactics, such as acquiring competitors or launching extensive marketing campaigns to stifle new entrants. In cases where competition persists, they resort to content exclusivity, coercing users to purchase their product alongside competitors\u0026rsquo; offerings. Consequently, users find themselves utilizing these products for prolonged periods not due to their exceptional quality, but rather because they perceive limited alternative options. The subscription model may make sense when paying for a service, but it doesn\u0026rsquo;t align with current software development. Paying subscription for developing and bug-fix of a product is simply paying for the privilege of using an incomplete version of a product.\u003c/p\u003e\n\u003cp\u003eIn contrast, companies adopting a pay-for-enterprise-support model for open-source products, such as Canonical and Red Hat, exhibit commendable practices. Their primary emphasis lies on longevity. If the software is functioning adequately, their tasks are straightforward, eliminating the need to address the same issue repeatedly for each client. Longevity serves as both their evidence and modus operandi. They provide support for software that has already weathered numerous instabilities. They employ different development stages, such as alpha, unstable, stable, and long-term releases. These features can subsequently be passed on to other distributions with more robust objectives, such as REHL.\u003c/p\u003e\n\u003cp\u003eAlthough these companies may impose charges for bug fixes, their underlying offering revolves around selling stability and longevity (think \u003cem\u003eUbuntu Pro\u003c/em\u003e). This approach is not driven solely by inherent benevolence but rather stems from a lack of alternatives. They are unable to monopolize a product that can be cloned, forked, and utilized to initiate independent ventures. Nor can they vend software that others can fork, enhance, and sell at higher prices or even distribute for free. Their sole viable course of action entails creating a product that strikes a balance, avoiding both excessive limitations that render it futile and excessive complexity that complicates support.\u003c/p\u003e\n\u003cp\u003eHowever, business is just one piece of the puzzle.\u003c/p\u003e\n\u003ch3 id=\"engineers-prioritize-quality-over-quantity\"\u003e\u003cabbr title=\"Free/Libre and Open Source Software\"\u003eFLOSS\u003c/abbr\u003e\n engineers prioritize quality over quantity\u003c/h3\u003e\n\u003cp\u003eAs we discussed, most businesses prioritize product quality only until it reaches a level sufficient for selling.\u003c/p\u003e\n\u003cp\u003eThis often leads to engineers being pushed and encouraged to develop faster, sacrificing quality and stability when it hinders \u0026ldquo;beating the competition to market.\u0026rdquo; I\u0026rsquo;m sure I\u0026rsquo;m not alone in feeling dissatisfied with creating instant legacy products and leaving behind a trail of subpar, useless software. It leaves no room for pride in one\u0026rsquo;s work.\u003c/p\u003e\n\u003cp\u003eAs a result, engineers who value quality find satisfaction in other avenues, such as personal projects or contributing to libraries and tools they use themselves.\u003c/p\u003e\n\u003cp\u003eThe dynamics of development in these situations differ. Open-source software often lacks the same level of resources, making maintainability a crucial concern. Allowing technical debt to accumulate in a project one maintains can result in paying a hefty price, even in a short period. The more users a project has, the more the burden of technical debt becomes apparent-quite the opposite of the industry\u0026rsquo;s \u0026ldquo;move broken things, fast\u0026rdquo; mentality.\u003c/p\u003e\n\u003cp\u003eConsequently, successful open-source products tend to have meticulous and uncompromising maintainers.\u003c/p\u003e\n\u003cp\u003eAnother important aspect to consider is that open-source software greatly enhances one\u0026rsquo;s resume. Similar to a resume, open-source projects showcase an individual\u0026rsquo;s best work. They are like first dates, where you present yourself at your best. Consequently, open-source projects motivate developers to create their finest code and documentation.\u003c/p\u003e\n\u003cp\u003eFurthermore, transparency is a vital aspect of open-source projects. Engaging in dubious practices, such as intrusive telemetry, can agitate the surrounding community.\u003c/p\u003e\n\u003cp\u003eIn summary, there are four main reasons:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eThe cost of maintainability\u003c/li\u003e\n\u003cli\u003eThe positive impact on one\u0026rsquo;s resume\u003c/li\u003e\n\u003cli\u003eCounteracting the lack of satisfaction caused by lower quality software in daily work\u003c/li\u003e\n\u003cli\u003eEmbracing transparency\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"exhibits-a-greater-degree-of-diversity-dot\"\u003e\u003cabbr title=\"Free/Libre and Open Source Software\"\u003eFLOSS\u003c/abbr\u003e\n exhibits a greater degree of diversity.\u003c/h3\u003e\n\u003cp\u003eWhen it comes to a biological ecosystem, its resilience stems from the diversity of its members. Let\u0026rsquo;s imagine a scenario involving a moth that feeds on maple tree branches. In a jungle filled with maple trees, the moth can feast and reproduce endlessly. However, there\u0026rsquo;s a twist.\u003c/p\u003e\n\u003cp\u003eAround 10% of the maple trees have developed a variation of their membrane that is toxic to the moth, purely by chance. Now, if the moth tries to feed on these trees, it has a 1 in 10 chance of being fatally poisoned. If there were only a single moth, it would be the end of its lineage. However, imagine a population of 100 moths, and 10% of them have accidentally developed immunity. These \u0026ldquo;super moths\u0026rdquo; may be larger and more resistant to the trees, but they are also more visible to predators like birds. And so, the cycle continues.\u003c/p\u003e\n\u003cp\u003eThe diversity of approaches within a biological ecosystem is crucial. In the context of biological beings, the exchange of random sets of genes through sexual reproduction likely emerged as a means to enhance resilience. Microbes that prey on others, on the other hand, face a more challenging situation, as the result.\u003c/p\u003e\n\u003cp\u003eThese advantageous mechanisms resulting from diversity are also present in the software ecosystem.\u003c/p\u003e\n\u003cp\u003eThe needs and threats faced by a server differ from those faced by a German student\u0026rsquo;s laptop. While Linux is ubiquitous in the open-source desktop realm, there are numerous slightly different Linux distributions available. These variations encompass different themes, preinstalled applications, package managers, and even packaging architecture models. Additionally, there are kernels compiled with different flags and versions.\u003c/p\u003e\n\u003cp\u003eGiven this remarkable diversity, it comes as little astonishment that Microsoft\u0026rsquo;s ardent campaign during the 2000s against the comparably youthful, less cohesive, and resource-limited Linux met with abysmal failure. Strikingly, in a twist of events, Microsoft has lately unveiled its very own Linux distribution and dedicated years to crafting the Windows Subsystem for Linux.\u003c/p\u003e\n\u003cp\u003eTo the proprietary realm, an ecosystem characterized by the development, redesign, and forking of diverse products, yielding a multitude of solutions, may appear inherently inefficient. Yet, from the perspective of permaculture and PermaComputing, such an ecosystem manifests as nothing short of utopia.\u003c/p\u003e\n\u003ch3 id=\"demonstrates-a-higher-level-of-robustness\"\u003e\u003cabbr title=\"Free/Libre and Open Source Software\"\u003eFLOSS\u003c/abbr\u003e\n demonstrates a higher level of robustness\u003c/h3\u003e\n\u003cp\u003e\u003cabbr title=\"Free/Libre and Open Source Software\"\u003eFLOSS\u003c/abbr\u003e\n transcends being a mere generator of independent variations that begin anew each time. It represents a system where progress builds upon existing foundations, with each subsequent layer amplifying the importance of the underlying ones. Irrespective of how many stories above the ground one ascends, the ground level remains a paramount concern if its integrity is jeopardized. Prominent examples of this phenomenon can be observed in projects like curl, the kernel, and OpenSSL. Although these initiatives were initially initiated by individuals, they have evolved into integral components of numerous other undertakings. The driving force compelling many individuals to contribute to these projects stems from the realization that the cost of abstaining from participation would be significantly greater.\u003c/p\u003e\n\u003cp\u003eHowever, it is important to recognize that this process is not always pleasant. Consider the immense pressure on OpenSSL developers. If they were to become overwhelmed and exhausted like many other open-source maintainers, the consequences could be significant.\u003c/p\u003e\n\u003cp\u003eYet, when such challenges arise (and they do), we all become aware of them. We sense the danger and collectively strive to find solutions. This is in stark contrast to the situation when a proprietary software developer abandons a company. Until a replacement is found, users are left unaware and vulnerable to potential security threats posed by malicious hackers.\u003c/p\u003e\n\u003cp\u003eThanks to this collective effort and attention to robustness, many foundational open-source software programs have remained the best tools for the job even after decades of use.\u003c/p\u003e\n\u003ch2 id=\"dear-reader\"\u003eDear Reader\u003c/h2\u003e\n\u003cp\u003eNow, esteemed reader, I trust you comprehend the rationale behind why individuals with a penchant for enduring solutions find the realm of \u003cabbr title=\"Free/Libre and Open Source Software\"\u003eFLOSS\u003c/abbr\u003e\n far more fertile than its alternatives.\u003c/p\u003e\n",
            "date_published": "2023-06-14T11:26:00+03:30"
        }
    ]
    
}
