<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>prma</title>
    <link>https://prma.dev/</link>
    <description>Recent content on prma</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>prma.dev@protonmail.com (Perma)</managingEditor>
    <webMaster>prma.dev@protonmail.com (Perma)</webMaster>
    <copyright>CC v.4</copyright>
    <lastBuildDate>Fri, 11 Aug 2023 12:38:00 +0330</lastBuildDate><atom:link href="https://prma.dev/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>The Tragedy of The Tech-Stacks</title>
      <link>https://prma.dev/posts/tragedy_of_the_tech_stacks/</link>
      <pubDate>Fri, 11 Aug 2023 12:38:00 +0330</pubDate>
      <author>prma.dev@protonmail.com (Perma)</author>
      <guid>https://prma.dev/posts/tragedy_of_the_tech_stacks/</guid>
      <description>Intro Back in 1958, there was this thinker named Garrett Hardin who kicked off his well-known piece titled &amp;ldquo;The Tragedy of the Commons&amp;rdquo; in the following way:
At the end of a thoughtful article on the future of nuclear war, Weisner and York concluded that &amp;ldquo;Both sides of the arms race are &amp;hellip; confronted by the dillema of steadily increasing military power and steadily decreasing natonal security. It is our considered our professional judgment that this delimma has not professional technical solution.</description>
      <content>&lt;h2 id=&#34;intro&#34;&gt;Intro&lt;/h2&gt;
&lt;p&gt;Back in 1958, there was this thinker named Garrett Hardin who kicked off his well-known piece titled &amp;ldquo;The Tragedy of the Commons&amp;rdquo; in the following way:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;At the end of a thoughtful article on the future of nuclear war, Weisner and York concluded that &amp;ldquo;Both sides of the arms race are &amp;hellip; confronted by the dillema of steadily increasing military power and steadily decreasing natonal security. It is our considered our professional judgment that this delimma has not professional technical solution. If the great powers continue to look for solutions in the area of science and technology only, the result will be to worsen the situation.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Then, Hardin goes on to rattle the foundations by delving into a colossal issue &amp;ndash; the challenge of population expansion. He breaks it down by saying that when you have a shared resource, and each individual aims to squeeze out the most benefit for themselves, the result is a harm inflicted upon everyone, even the very ones taking those actions.&lt;/p&gt;
&lt;p&gt;Now, picture this famous analogy. Imagine a stretch of grassland, claimed by three farmers. Each of them brings their cow out to graze on it daily. Sounds reasonable, right? But then, one fortunate farmer&amp;rsquo;s cow becomes pregnant. This stroke of luck leaves him with two cows, effectively doubling his profits. Observing this triumph, the other farmers follow suit, diving into a spree of buying and breeding cows, aiming to maximize their individual gains. However, this frenzy leads to a rampant grazing that leaves the grassland bare and barren. Ultimately, the once lush grass disappears, and the insatiable appetite of the voracious cows brings about their own starvation. In the end, all the farmers are left with no cows, their initial wealth transformed into a state even worse than before.&lt;/p&gt;
&lt;p&gt;He coins it as the &amp;ldquo;tragedy of the commons.&amp;rdquo; I prefer to see it as a powerful representation of what often dampens the enjoyment across the software terrain for every key player involved: the user, the developer, the CEO, and the investor.&lt;/p&gt;
&lt;p&gt;How meta!&lt;/p&gt;
&lt;h2 id=&#34;the-clever-one-the-frustrated-one-and-the-scared-one&#34;&gt;The Clever One, The Frustrated One and The Scared One&lt;/h2&gt;
&lt;p&gt;Now, let&amp;rsquo;s meet a familiar figure, the one we often encounter, the embodiment of many developers out there. We&amp;rsquo;ll give her a name: Sarah. Sarah&amp;rsquo;s eager to dive into a fresh technology &amp;ndash; one that could potentially elevate her current position. So, how does she tackle this? She begins by exploring a domain, and within that, she sets her sights on a specific technology. Let&amp;rsquo;s designate this domain as something imaginary, to prevent any inadvertent offense. How about we refer to it as &amp;ldquo;front-end development&amp;rdquo;?&lt;/p&gt;
&lt;p&gt;For fron-end Sarah finds out a few different contenders in the field. She asks herself, what could the industry be thirsty for? The naive answer she arrives at, is &amp;ldquo;the most reliable one, the one that is the pleasure to develop and the one that has the most advantages&amp;rdquo;. Oh, Sarah, you impractical idealistic perfectionist, you!&lt;/p&gt;
&lt;p&gt;Now, delving into the realm of front-end, Sarah stumbles upon a handful of potential contenders. She ponders, what might the industry truly crave? Her initial, somewhat naive response is, &amp;ldquo;The most dependable option, the one that brings joy to the development process, and the one that boasts numerous advantages.&amp;rdquo; Oh Sarah, you, impractical, idealistic, perfectionist you!&lt;/p&gt;
&lt;p&gt;Armed with these benchmarks, she opts for the Elm language (yet another mythical being). She proceeds to dive into Elm, driven by her enthusiasm. However, curiosity gets the better of her, and she sneakily glances at the job listings on LinkedIn. To her astonishment, she discovers a mere trio of job opportunities for Elm. This baffles her, leading her to question the accuracy of her initial language assessment.&lt;/p&gt;
&lt;p&gt;Seeking insight, she turns to Tom, an exceptional CTO she&amp;rsquo;s acquainted with, to discuss whether Elm lives up to its hype. Much to Sarah&amp;rsquo;s astonishment, Tom echoes her initial convictions regarding Elm. He affirms that, indeed, Elm proves to be an exceptional language, boasting enduring dependability, a well-established ecosystem, and a delightful development journey.&lt;/p&gt;
&lt;p&gt;Sarah, now even more puzzled than before, directs her confusion towards Tom, questioning whether he&amp;rsquo;s in the process of recruiting Elm developers. Once again, Tom&amp;rsquo;s response is resolute: &amp;ldquo;Absolutely not! Where could I possibly locate a pool of Elm-savvy developers? However, we&amp;rsquo;re actively seeking out JavaScript experts!&amp;rdquo; (once more, a language name sufficiently distanced from any existing real-world instances).&lt;/p&gt;
&lt;p&gt;After a brief moment of contemplation, Sarah bursts out, &amp;ldquo;Well, what about me?&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Tom responds with a shake of his head, stating, &amp;ldquo;Oh, that wouldn&amp;rsquo;t work. You see, for any given application, we require a team of 20 individuals to consistently handle maintenance and bug fixes. Where on earth would we come across 20 Elm developers?&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Well, shouldn&amp;rsquo;t Elm apps theoretically require significantly less maintenance, given the multitude of bugs that are caught during the initial development stages?&amp;rdquo; Sarah counters silently within her mind. An idea begins to form, one she opts to keep to herself, &amp;ldquo;Ah, so maintaining a delicate codebase might indicate a higher demand for fresh JavaScript developers &amp;ndash; implying enhanced job security!&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Feeling rather clever, she decides to validate her hunch by perusing the (imaginary) yellow pages, named Glassdoor. And lo and behold, an endless scroll unveils a plethora of distinct job listings, all centered around JavaScript.&lt;/p&gt;
&lt;p&gt;Well, Sarah learns javascript and all her beliefs gets validated, she becomes a very wealthy engineer, with a great job security, with each company she enters trying to keep her, year-after-yer, while other companies trying to persuade her by higher and higher offers. Or at least that was the boring version of this post that did not start with the word &amp;ldquo;tragedy&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Instead, she uncovers that her counterparts, much like herself, had also been quite &lt;em&gt;clever&lt;/em&gt;. A multitude of newcomers gravitated towards the language flaunting the highest job listings. Each job opening faced a surplus of around a hundred contenders. The &amp;ldquo;victor,&amp;rdquo; so to speak, emerges as the individual boasting the most qualifications and the most modest salary expectation. Or should we even label them as victors, considering that the instant they dare to dream a little bigger, a fresh job listing crops up, promptly displacing them with the next eager contender.&lt;/p&gt;
&lt;p&gt;Tom, our trusty CTO, worn out from the cycle of on-boarding one low-budget, novice developer after another, vents his frustrations to the CEO. The CEO engages in discussions with the investors, who share the same dissatisfaction due to their profits being eroded by an inefficient workforce. They call upon the CEO to devise a remedy for this predicament.&lt;/p&gt;
&lt;p&gt;The CEO returns with a strategy to shift from JavaScript to Elm technology. The investors, content with the proposal, take a brief pause to deliberate. A few days later, they rejoin the conversation, expressing a notable apprehension. &amp;ldquo;Elm is practically unheard of! None of our rivals employ this language. That&amp;rsquo;s a substantial gamble we&amp;rsquo;re not prepared to take!&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Arash, the CEO, CTO, CFO, Product Manager, and the visionary founder of a fledgling startup, confronts the very same imaginative quandary of selecting a technology stack. Given the inherent high-stakes nature of startups, Arash adopts a prudent approach by examining the practices of more established corporations, such as those overseen by individuals like Tom in his role as CTO, in order to identify a tried-and-true trajectory.&lt;/p&gt;
&lt;h2 id=&#34;the-lose-lose-lose-situation&#34;&gt;The Lose-Lose-Lose situation&lt;/h2&gt;
&lt;p&gt;At every juncture, every individual optimized their decisions for personal gain. At each instance, a superior option was presented, and they acknowledged the benefits it offered. Nevertheless, they settled for the inferior alternative (for the sake of avoiding any unnecessary debate, let&amp;rsquo;s refrain from mentioning that the hypothetical lesser choice was JavaScript, naturally). As a result, each person finds themselves in a less advantageous position than if they had collectively embraced the superior alternative. This impact ripples beyond individuals, extending to the entire ecosystem, hindered by the precarious edifice of abstractions left behind by the swiftly growing number of predecessors.&lt;/p&gt;
&lt;p&gt;So, why did they all fall short of enhancing their own lives and the lives of others? Was it the technology&amp;rsquo;s flaw? Or did the ecosystem falter? You&amp;rsquo;re astute enough to deduce the answer; after all, you had the wit to discern the languages I implicitly referred to in my hypothetical scenarios.&lt;/p&gt;
&lt;h2 id=&#34;the-solution&#34;&gt;The Solution&lt;/h2&gt;
&lt;p&gt;I must admit, I&amp;rsquo;m uncertain. The nuclear arsenal continues to expand, even though the era of the Cold War has long passed. Thankfully, our world hasn&amp;rsquo;t been ravaged by nuclear conflict. Rather, it&amp;rsquo;s the interplay of mutually assured destruction and the realization by the leaders of those two nations that not embracing an alternative risk could lead to dire consequences. This, at least, has placed us in a relatively improved state.&lt;/p&gt;
&lt;p&gt;Simultaneously, we find ourselves grappling with Garrett Hardin&amp;rsquo;s preoccupation &amp;ndash; the persistent challenges of overpopulation and looming environmental catastrophes. Evidently, the far-reaching peril of not embracing an alternative is of such extended duration that it transcends the immediate concerns of the very generation opting against alternatives. The burden of their choices is instead borne by their descendants: &amp;ldquo;Fuck those brats.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;In the world of software, the tempo is notably faster, the stakes less dire compared to earlier circumstances, and the individuals engaged are often more honest than politicians and notably smarter than the average voter.&lt;/p&gt;
&lt;p&gt;However, the remedy doesn&amp;rsquo;t entail adhering to an oddly precise series
of ritualistic maneuvers. It&amp;rsquo;s a more daunting challenge. Just as
Garrett Hardin titled his article, the solution remains much the same:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The population problem has no technical solution; it requires a fundamental extension of in morality.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;dear-readers&#34;&gt;Dear Readers&lt;/h2&gt;
&lt;p&gt;I know! The gastly claim of &amp;ldquo;to improve developer experience we first should grow an ethical sense&amp;rdquo;, seems absurd. Yet I see no specifically little amount of gradual change, where at least some one on the whole chain did not bite the bullet and risk it.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Call Me Perma</title>
      <link>https://prma.dev/posts/call_me_perma/</link>
      <pubDate>Wed, 09 Aug 2023 12:31:00 +0330</pubDate>
      <author>prma.dev@protonmail.com (Perma)</author>
      <guid>https://prma.dev/posts/call_me_perma/</guid>
      <description>Intro I find myself seated in the passenger&amp;rsquo;s seat of my mother&amp;rsquo;s car, as we make our way to an appointment with an educational psychologist. A sense of confusion and concern lingers within me, stemming from my mother&amp;rsquo;s sudden and puzzling reaction to my C-graded report card. The journey passes quietly, and we arrive at the specialist&amp;rsquo;s office without exchanging a word, leaving me still uncertain about the purpose of our visit.</description>
      <content>&lt;h2 id=&#34;intro&#34;&gt;Intro&lt;/h2&gt;
&lt;p&gt;I find myself seated in the passenger&amp;rsquo;s seat of my mother&amp;rsquo;s car, as we make our way to an appointment with an educational psychologist. A sense of confusion and concern lingers within me, stemming from my mother&amp;rsquo;s sudden and puzzling reaction to my C-graded report card. The journey passes quietly, and we arrive at the specialist&amp;rsquo;s office without exchanging a word, leaving me still uncertain about the purpose of our visit.&lt;/p&gt;
&lt;p&gt;The psychologist initiates our session by administering a series of aptitude and intelligence tests appropriate for my age. Throughout the process, my mother&amp;rsquo;s keen gaze remains fixed on me, intensifying my nerves. Eventually, the psychologist validates my mother&amp;rsquo;s suspicions, revealing that my intellectual capabilities far exceed those of my peers. This revelation prompts my mother to shed light on the purpose of our enigmatic expedition: &amp;ldquo;You see, you are not stupid, you are actually very smart, you just lack self-esteem!&amp;rdquo; Was that truly the root of the issue? While self-esteem was a factor in my unhappniess, I couldn&amp;rsquo;t help but feel that my lack of effort had deeper origins.&lt;/p&gt;
&lt;p&gt;Oh, but this wasn&amp;rsquo;t the first round of this comical saga. You see, on previous occasions, my dear mother would strategically place a glass of water right between us, like a cosmic prop. And what was the grand purpose behind this visual spectacle, you might ask? Well, it was her way of nudging me into a philosophical monologue about that very glass. In simple terms: &amp;ldquo;Hey, kiddo, you&amp;rsquo;ve got a shortage of optimism; you&amp;rsquo;re the sort who tends to spot the half-empty glass in life.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;And then we have my dear old dad, the master of responsibility training. He had this grand plan to shape my character, using internships as his secret weapon. &amp;ldquo;Off you go, my young apprentice!&amp;rdquo; he&amp;rsquo;d exclaim, nudging me into one vocational adventure after another. His hidden message? &amp;ldquo;Kid, I&amp;rsquo;m passing down the sacred skill of handling responsibilities!&amp;rdquo; Ah, the age-old dance of parental strategy.&lt;/p&gt;
&lt;p&gt;And there you have it, my childhood summed up, right from the time those kindergarten teachers began their chorus of complaints about my apparent &amp;ldquo;refusal&amp;rdquo; to embrace the songs that my peers had effortlessly committed to memory months before.&lt;/p&gt;
&lt;p&gt;As the days went by, I began to adopt a personal mantra: &amp;ldquo;I&amp;rsquo;m the poster child for laziness, the embodiment of irresponsibility, with motivation and vision nowhere to be found.&amp;rdquo; Oddly enough, despite knowing full well the significance of education and being genuinely captivated by the realms of science and math, my actions seemed to tell a different story altogether. It&amp;rsquo;s as if I was presenting evidence that contradicted my own beliefs. Perhaps deep down, I questioned my care for my parents, struggled to find motivation, or maybe I secretly aspired to master the art of freeloadery.&lt;/p&gt;
&lt;p&gt;The haze of doubt began to lift when I embarked on an ADHD medication journey, and lo and behold, I experienced the novel sensation of being able to sit down and read a paragraph without my mind spiraling into chaos. It was like finally playing a video game where you no longer wonder if you&amp;rsquo;re in control of that character&amp;rsquo;s movements or not. My epiphany was quite the reverse: &amp;ldquo;Oh, wait a minute, I can indeed make decisions and stick with them?&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Let me tell you, this realization was liberating, to put it mildly. Suddenly, I had the capacity to invest time in the very things that had ignited my curiosity.&lt;/p&gt;
&lt;p&gt;ADHD has had a profound impact on my life since childhood. One revelation that became clear after seeking medication was the extent to which I had surrendered agency and intentionality.&lt;/p&gt;
&lt;p&gt;My existence had been defined by reactivity, with a noticeable absence of honed decision-making skills. I found myself in a state of passivity, or even worse, mere reactivity. Nonetheless, I consistently strived to reclaim it.&lt;/p&gt;
&lt;h2 id=&#34;recent-victories&#34;&gt;Recent Victories&lt;/h2&gt;
&lt;p&gt;Over the past few years, I&amp;rsquo;ve encountered an almost comically disproportionate share of misfortune and have found myself under substantial duress. Yet, I&amp;rsquo;ve navigated my way through these challenges.&lt;/p&gt;
&lt;p&gt;I won&amp;rsquo;t delve into the specifics of these misfortunes, although those in my social circles can attest to their unusual frequency.&lt;/p&gt;
&lt;p&gt;However, I can share that I&amp;rsquo;ve achieved several noteworthy milestones during this time span: acquiring programming skills, entering the workforce, entering marriage, and most recently, opting to unofficially change my name.&lt;/p&gt;
&lt;p&gt;Formally, I remain Amirhossein, and I&amp;rsquo;m content should anyone choose to continue addressing me as such-I hold no animosity toward it. Nevertheless, it inadequately captures the depth of my identity.&lt;/p&gt;
&lt;h2 id=&#34;amirhossein-and-perma&#34;&gt;Amirhossein and Perma&lt;/h2&gt;
&lt;p&gt;The name Amirhossein is a composite of two Arabic names, Amir and Hossein, both of which carry two meanings. As for the firsts of these meanings, Amir translates to &amp;ldquo;prince,&amp;rdquo; while Hossein signifies &amp;ldquo;Good-junior.&amp;rdquo; The amalgamation results in the interpretation of &amp;ldquo;Junior Good Prince.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;However, I find myself at a loss when attempting to establish a personal connection with any aspect of this interpretation of this name. This brings us to its secondary and perhaps more intended connotation.&lt;/p&gt;
&lt;p&gt;In Shia Islam, there exists a concept akin to Christianity&amp;rsquo;s sainthood, known as &amp;ldquo;Imam.&amp;rdquo; However, these Imams are asserted to be leaders of the Islamic community. The first of these figures holds the title &amp;ldquo;Amir-al-momenin,&amp;rdquo; or the &amp;ldquo;prince of the faithful,&amp;rdquo; commonly abbreviated as Amir. The third Imam, the second son of the first, was named Hossein. Both individuals deviate significantly from pacifism.&lt;/p&gt;
&lt;p&gt;While these historical and linguistic connections hold merit, I must underscore a significant twist: since the age of 15, I have consciously disavowed Islam and theism in their entirety.&lt;/p&gt;
&lt;p&gt;I find &amp;ldquo;Perma&amp;rdquo; to be a more fitting option, resonating more harmoniously with my ears. Moreover, it aligns with certain themes and passions that hold significance in my life. It closely aligns with the ethos underpinning this blog. I&amp;rsquo;m captivated by the philosophy of the Permaculture and Permacomputing movements-albeit not necessarily their current implementations. My fascination lies in harmonizing with the world rather than coercing it to conform to my presence. Moreover, the notion of leaving a lasting imprint on the world holds a special allure for me. However, this yearning leans more toward the aesthetic realm rather than being rooted in utilitarian aspirations.&lt;/p&gt;
&lt;h2 id=&#34;dear-reader-dot-dot-dot&#34;&gt;Dear reader&amp;hellip;&lt;/h2&gt;
&lt;p&gt;If you&amp;rsquo;ve known me previously, you might have observed my recent shifts in usernames, emails, and name. Across the internet, I&amp;rsquo;ve opted for &lt;code&gt;Prma&lt;/code&gt; instead of the more direct &lt;code&gt;Perma&lt;/code&gt;, as the latter is frequently claimed or could serve other entities more fittingly.&lt;/p&gt;
&lt;p&gt;However, this change isn&amp;rsquo;t indicative of a complete unveiling of my authentic self. Thus, referring to me by my previous name isn&amp;rsquo;t as insensitive as the act of deadnaming. Rather, this transition signifies the inception of a renewed chapter, one marked by heightened purpose and intention.&lt;/p&gt;
&lt;p&gt;While I do prefer and hope for the usage of &amp;ldquo;Perma&amp;rdquo; moving forward, I&amp;rsquo;m entirely at ease if you choose otherwise. Your decision in this regard is genuinely respected.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Dishonesty of Optimizing for Developer Time</title>
      <link>https://prma.dev/posts/dishonesty_of_optimizing_for_developers_time/</link>
      <pubDate>Mon, 31 Jul 2023 12:24:00 +0330</pubDate>
      <author>prma.dev@protonmail.com (Perma)</author>
      <guid>https://prma.dev/posts/dishonesty_of_optimizing_for_developers_time/</guid>
      <description>Intro Based on some individuals&amp;rsquo; viewpoints, they emphasize optimizing for developer time or productivity as their main priority, rather than giving top precedence to aspects such as performance, robustness, or correctness.
The Thesis Their argument revolves around the idea that developers&amp;rsquo; time is more valuable and expensive than server resources. They often use phrases like &amp;ldquo;You can always refactor,&amp;rdquo; &amp;ldquo;You can always optimize for performance,&amp;rdquo; or &amp;ldquo;We will fix bugs later on&amp;rdquo; to support their viewpoint.</description>
      <content>&lt;h2 id=&#34;intro&#34;&gt;Intro&lt;/h2&gt;
&lt;p&gt;Based on some individuals&amp;rsquo; viewpoints, they emphasize optimizing for developer time or productivity as their main priority, rather than giving top precedence to aspects such as performance, robustness, or correctness.&lt;/p&gt;
&lt;h2 id=&#34;the-thesis&#34;&gt;The Thesis&lt;/h2&gt;
&lt;p&gt;Their argument revolves around the idea that developers&amp;rsquo; time is more valuable and expensive than server resources. They often use phrases like &amp;ldquo;You can always refactor,&amp;rdquo; &amp;ldquo;You can always optimize for performance,&amp;rdquo; or &amp;ldquo;We will fix bugs later on&amp;rdquo; to support their viewpoint. While this perspective may be considered ingenious, it is contingent on proper planning, weighing the trade-offs, and actually acting upon those decisions.&lt;/p&gt;
&lt;h2 id=&#34;my-antithesis&#34;&gt;My Antithesis&lt;/h2&gt;
&lt;p&gt;However, if this were genuinely the case, more substantial effort would have been invested in refactoring or choosing a more rigorous language than JavaScript, for example, a language that can significantly boost performance in the long run.&lt;/p&gt;
&lt;p&gt;Fixing bugs in backends written in JavaScript, PHP, or Python is certainly feasible, but adding performance improvements can become challenging, if not improbable. More meticulous programming tools automate the process of finding and fixing even the most elusive bugs and come with significant performance optimizations. The ability to make well-founded assumptions about the program allows for better optimization.&lt;/p&gt;
&lt;p&gt;This approach often leads to a situation where future engineers, tasked with rewriting the &amp;ldquo;MVP&amp;rdquo; program in a more scalable language, face an archeological rediscovery process.&lt;/p&gt;
&lt;p&gt;So, if they are not genuinely optimizing for shorter development time, what are they doing?&lt;/p&gt;
&lt;h2 id=&#34;lifting-the-veil-the-actual-thesis&#34;&gt;Lifting The Veil: The Actual Thesis&lt;/h2&gt;
&lt;p&gt;It appears that they prioritize short-term gains over achieving greater long-term goals.&lt;/p&gt;
&lt;p&gt;A language like Rust, while providing benefits like enhanced safety and reliability, requires significantly more time to produce a binary or APIs. The manual labor of finding bugs is taken over by the compiler and the language&amp;rsquo;s semantics. If the focus is on developer productivity, then this automation is naturally desirable. However, what one truly desires to convey is &amp;ldquo;I have this feature, even though it may have some bugs and performance issues, I have it nonetheless.&amp;rdquo;&lt;/p&gt;
&lt;h2 id=&#34;the-synthesis&#34;&gt;The Synthesis&lt;/h2&gt;
&lt;p&gt;That may be a positively good idea for trying the market to see if there is any for that specific idea, for most software developements though, the actual intention is not experimentation, as the novelty of product and bussiness plan do not warrant a need for experimentaion. rather, having something to sell, as fast as possible. That&amp;rsquo;s for start ups. Where there is both legitimate and illegitimate short-termism. But more established enterprises may have this pairing as well. While there are A/B experimentaions going on, trying different approaches to see which works, middle management might also like the addition of another achievement in their yearly reports.&lt;/p&gt;
&lt;p&gt;A rapid way to discern whether it falls under the category of experimentation/prototyping or an MVP/achievement-oriented project is to examine whether there is a notably extended period allocated for the program&amp;rsquo;s rewrite compared to its initial development phase.&lt;/p&gt;
&lt;h2 id=&#34;dear-reader&#34;&gt;Dear reader&lt;/h2&gt;
&lt;p&gt;Similar to many phenomena, short-termism can indeed have legitimate applications. The reluctance of many to embrace this term is rooted in its improper and illegitimate uses.&lt;/p&gt;
&lt;p&gt;Certainly, there are well-intentioned individuals who advocate for developer productivity. However, those with ample experience will acknowledge that long-term developer productivity is not synonymous with low-overhead development, and, more often than not, these two objectives are incompatible.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Criteria For Choosing Tools</title>
      <link>https://prma.dev/posts/criteria_for_choosing_tools/</link>
      <pubDate>Sat, 29 Jul 2023 12:14:00 +0330</pubDate>
      <author>prma.dev@protonmail.com (Perma)</author>
      <guid>https://prma.dev/posts/criteria_for_choosing_tools/</guid>
      <description>Intro The web is utterly fucked. But anyone with some resources resources at hand and curiosity at heart and intentional tool selection can have a decent experience.
The Reasons The web&amp;rsquo;s lamentable state can be attributed to several factors. Allow me to enumerate them concisely for clarity:
Bloated beyond reason. Plagued with incessant ads. Prioritizing feature over bug fixes, if addressed at all. Designed to cater to journalists and advertisers, neglecting your needs.</description>
      <content>&lt;h2 id=&#34;intro&#34;&gt;Intro&lt;/h2&gt;
&lt;p&gt;The web is utterly fucked. But anyone with some resources resources at hand and curiosity at heart and intentional tool selection can have a decent experience.&lt;/p&gt;
&lt;h2 id=&#34;the-reasons&#34;&gt;The Reasons&lt;/h2&gt;
&lt;p&gt;The web&amp;rsquo;s lamentable state can be attributed to several factors. Allow me to enumerate them concisely for clarity:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Bloated beyond reason.&lt;/li&gt;
&lt;li&gt;Plagued with incessant ads.&lt;/li&gt;
&lt;li&gt;Prioritizing feature over bug fixes, if addressed at all.&lt;/li&gt;
&lt;li&gt;Designed to cater to journalists and advertisers, neglecting your needs.&lt;/li&gt;
&lt;li&gt;Imposing confinement and isolation upon you.&lt;/li&gt;
&lt;li&gt;Failing to empower users like yourself.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;a-brief-digression&#34;&gt;A Brief Digression&lt;/h3&gt;
&lt;p&gt;The final point warrants further elaboration.&lt;/p&gt;
&lt;p&gt;The internet is, in fact, a tool. It is &lt;em&gt;something&lt;/em&gt; that is made to help &lt;em&gt;someone&lt;/em&gt; achieve &lt;em&gt;some goal&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The captivating world of &lt;em&gt;Web 2.0&lt;/em&gt; and &lt;em&gt;Social Media&lt;/em&gt; (the somethings) - initially promising to empower people (the someones), granting them enriched social connections (the some goal). A promising start, indeed, leaving many with pleasant experiences during the inception of Web 2.0.&lt;/p&gt;
&lt;p&gt;But, alas, as time went by, the very incentives that drove these Social Media companies veered them off their intended course. They embarked on a divergent path, straying from their professed mission, and now, Web 2.0 primarily serves as a platform to amplify the voices of journalists and celebrities (the actual someones), propelling them towards greater fame and recognition (the actual some goals).&lt;/p&gt;
&lt;p&gt;The driving force behind these shifts? The ever-persistent quest for revenue from advertisers, pushing them to create content that captures maximum engagement. The more captivating, the more lucrative.&lt;/p&gt;
&lt;p&gt;Regrettably, the landscape has birthed what I would call the &amp;ldquo;four horsemen of reactionary engagement&amp;rdquo;: the doomsday, super political reporter; the enraging, populist racist politician; the trolling, impulsive CEO; and the drama-driven, vacuous celebrity.&lt;/p&gt;
&lt;p&gt;In a nutshell, it appears you&amp;rsquo;ve been played for a fool. Social media&amp;rsquo;s purported aim of empowering you is nothing but a delusion.&lt;/p&gt;
&lt;h2 id=&#34;go-empower-yourself&#34;&gt;Go Empower yourself&lt;/h2&gt;
&lt;p&gt;Before you proceed, there&amp;rsquo;s a prerequisite to address: overcoming the fear of missing out. Now, how one achieves this is not within my scope to divulge, but I can assist you in understanding why these fears are unfounded.&lt;/p&gt;
&lt;p&gt;Consider this: Have you truly missed out on anything of genuine importance? Reflect on whether the latest controversial statement from Donald Trump has genuinely altered the course of your life. And if it did, was Twitter (or whatever they dub it these days) truly the sole or optimal medium for receiving such information?&lt;/p&gt;
&lt;p&gt;Even in Iran, where official channels are notorious for propagating falsehoods, Twitter appears to be excessive. For me, friends and private messages reliably convey essential information. And indeed, individuals might spend considerable time on Twitter, but isn&amp;rsquo;t the fundamental pledge of social media the relay of information? If that need is already being fulfilled through other means, what purpose does Twitter truly serve?&lt;/p&gt;
&lt;p&gt;If you find yourself fortunate enough to reside in a country with trustworthy official channels, and your well-being hinges on crucial information like hurricane alerts, rest assured that dedicated services cater specifically to such needs. Similarly, if you derive pleasure from reading news articles, I suggest identifying the authors whose work you value and following them directly. However, if these activities do not align with your interests, then quite frankly, you have no real necessity for engaging with this &amp;ldquo;stuff.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Oh, my friend, let me share with you a sobering truth about these companies - they&amp;rsquo;re akin to emotionally abusive partners, manipulating you into believing you&amp;rsquo;re nothing without them. They demean you, calling you stupid and incapable of managing your life without their presence. They cunningly weave a narrative of how your life is all thanks to them, that your friendships exist solely because of their benevolence.&lt;/p&gt;
&lt;p&gt;But don&amp;rsquo;t be fooled by their deceiving ways. They mangle your interactions, force-feeding you ads and utter nonsense, all while claiming it&amp;rsquo;s an act of love. And when their misdeeds come to light, they stage a grand spectacle of apologies and vows to change, only to strike back even harder later on.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s time to break free from this toxic cycle. I know it&amp;rsquo;s daunting, and fear may grip your heart initially, but liberate yourself from their clutches. You will discover a life far better than you ever imagined. You deserve more than this relentless manipulation. Embrace the freedom that awaits, my dear friend.&lt;/p&gt;
&lt;h2 id=&#34;how-to-find-a-good-tool&#34;&gt;How to find a good tool&lt;/h2&gt;
&lt;h3 id=&#34;step-one-find-the-low-hanging-fruits&#34;&gt;Step One: Find The Low Hanging Fruits&lt;/h3&gt;
&lt;p&gt;You stand at the precipice of transformation, ready to change your life for the better. The first step is to identify the areas in your life that require attention. What needs are you seeking to fulfill? And upon which inadequate services are you currently relying?&lt;/p&gt;
&lt;p&gt;In my case, I sought:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A steady flow of lightweight information.&lt;/li&gt;
&lt;li&gt;Daily interactions with fellow enthusiasts akin to myself.&lt;/li&gt;
&lt;li&gt;A means to uncover specific data.&lt;/li&gt;
&lt;li&gt;A reliable way to send emails.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For too long, I depended on subpar sources to meet these needs. For the first two, I found myself reliant on Twitter, Instagram, Reddit, and Google News. As for the third and fourth requirements, I resorted to Google&amp;rsquo;s services. However, all of these platforms consistently fell short and inflicted undue stress upon me.&lt;/p&gt;
&lt;h3 id=&#34;step-two-find-effective-replacements&#34;&gt;Step Two: Find Effective Replacements&lt;/h3&gt;
&lt;p&gt;In my earlier post I have mentioned that I already have replaced most of these services with better ones. But I have not mentioned what constitutes an effective solution.&lt;/p&gt;
&lt;p&gt;In &lt;a href=&#34;../web-exprience-makeover&#34;&gt;my previous post&lt;/a&gt;, I alluded to having replaced many of these services with superior alternatives. However, I haven&amp;rsquo;t delved into what exactly makes a solution effective.&lt;/p&gt;
&lt;p&gt;Allow me to outline the criteria and guiding principles for an empowering tool:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;It should not cause you any harm.&lt;/li&gt;
&lt;li&gt;It should not lock you in.&lt;/li&gt;
&lt;li&gt;It should not feel frugal.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now, let me delve into the rationale behind these criteria:&lt;/p&gt;
&lt;h4 id=&#34;1-dot-it-should-not-cause-you-more-harm-than-good&#34;&gt;1. It should not cause you more harm than good&lt;/h4&gt;
&lt;p&gt;If a tool causes more harm than good, why persist in using it at all?&lt;/p&gt;
&lt;p&gt;To safeguard your interests, ensure that the tool operates with transparency. Platforms that intentionally harm users are less inclined to be forthcoming about their inner workings. Opt for open-source and audited software, provided you trust the incentives and capabilities of the auditors, as this fosters transparency.&lt;/p&gt;
&lt;p&gt;Moreover, it is crucial to align the incentives of the tool&amp;rsquo;s creators with your own. While there will always be some degree of misalignment, not all cases are equal. Selling or renting software may incentivize developers to plan for obsolescence, sell incomplete products, or enforce lock-ins. Yet, these misalignments are overshadowed by the egregious discrepancies inherent in ad-driven models.&lt;/p&gt;
&lt;h4 id=&#34;2-dot-it-should-not-lock-you-in&#34;&gt;2. It should not lock you in&lt;/h4&gt;
&lt;p&gt;Indeed, the peril of being locked into a tool becomes evident when the company&amp;rsquo;s incentives undergo a shift. I experienced this firsthand in 2015 when I was a loyal Evernote user with a premium subscription, trusting it with all my valuable information. However, when Evernote decided to drop right-to-left language support crucial for the Middle Eastern languages, my pleas for assistance fell on deaf ears. They deemed the region unworthy of attention, leaving me stranded and unable to utilize my data effectively.&lt;/p&gt;
&lt;p&gt;The true pain emerged when I attempted to export my information and realized I was trapped in their ecosystem. They held my notes hostage, providing them back only in a non-standard format through XML or JSON files. This, my friends, was the dreaded lock-in, and I had to endure a labyrinthine journey of manual extraction to break free.&lt;/p&gt;
&lt;p&gt;To avoid such a predicament, one essential question should be posed:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Will it be more difficult for me to switch to a competitor once I&amp;rsquo;ve fully adopted this service compared to my current situation before using it?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If the service retains your data and only offers it back in a non-standard format, it becomes significantly more challenging to transition to a competitor after investing your notes into the first service. Be vigilant and consider the implications before getting entangled in such situations.&lt;/p&gt;
&lt;h4 id=&#34;3-dot-it-should-not-feel-frugal-dot&#34;&gt;3. It should not feel frugal.&lt;/h4&gt;
&lt;p&gt;Let us keep in mind the essence of this endeavor: to enhance the quality of our lives. Undoubtedly, there are noble causes that may necessitate adopting a certain level of frugality, as was the case for me with animal rights, which amusingly led me to embrace veganism.&lt;/p&gt;
&lt;p&gt;However, advocating for these causes demands energy, and it might inadvertently lead to isolation. We must acknowledge that not everything can or should be a constant battle. The purpose of utilizing these tools is to improve our lives, not to make them more arduous.&lt;/p&gt;
&lt;p&gt;If safeguarding your privacy to the utmost extreme is your goal, then by all means, employ complex passwords for each site and commit them to memory. Nevertheless, we must be mindful that our fighting energy is finite. Thus, it becomes essential to prioritize and channel our limited energy toward the most urgent and meaningful issues that truly resonate with our hearts.&lt;/p&gt;
&lt;h2 id=&#34;dear-reader-dot-dot-dot&#34;&gt;Dear reader&amp;hellip;&lt;/h2&gt;
&lt;p&gt;You are on the right path, and I believe in you wholeheartedly! Trust me, I&amp;rsquo;ve been through this journey myself, and it turned out to be a delightful and straightforward experience. Take heart, for you can certainly achieve it too! Keep going, and you&amp;rsquo;ll soon realize how much better and easier life becomes. You&amp;rsquo;ve got this!&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Giving My Exprience of Web a Makeover</title>
      <link>https://prma.dev/posts/web_experience_makeover/</link>
      <pubDate>Wed, 19 Jul 2023 12:04:00 +0330</pubDate>
      <author>prma.dev@protonmail.com (Perma)</author>
      <guid>https://prma.dev/posts/web_experience_makeover/</guid>
      <description>Intro Back in the good old days, I found myself drawn to the wonders of the internet, captivated by its virtual world, teeming with individuals who resonated with me, people I admired, or at least aspired to emulate. The communication channels of that era felt more personal, more akin to a lively conversation passed on through word of mouth.
More of Those Days In those youthful days, I&amp;rsquo;d eagerly scour the web for words that piqued the interests of my teenage self, and with a simple search, Google would present me with a treasure trove of blogs authored by kindred spirits.</description>
      <content>&lt;h2 id=&#34;intro&#34;&gt;Intro&lt;/h2&gt;
&lt;p&gt;Back in the good old days, I found myself drawn to the wonders of the internet, captivated by its virtual world, teeming with individuals who resonated with me, people I admired, or at least aspired to emulate. The communication channels of that era felt more personal, more akin to a lively conversation passed on through word of mouth.&lt;/p&gt;
&lt;h2 id=&#34;more-of-those-days&#34;&gt;More of Those Days&lt;/h2&gt;
&lt;p&gt;In those youthful days, I&amp;rsquo;d eagerly scour the web for words that piqued the interests of my teenage self, and with a simple search, Google would present me with a treasure trove of blogs authored by kindred spirits. I&amp;rsquo;d venture into the realms of Twitter, FriendFeed, Facebook, Orkut, and the myriad other social platforms, spending precious moments escaping the painful realities of feeling marginalized by my parents, teachers, and peers at school.&lt;/p&gt;
&lt;p&gt;The internet of that era held a special place in my heart; it offered solace and kinship. Even though I may not have been as popular as some within those social circles, I cherished engaging in conversations within a vibrant crowd of amazing individuals, the very ones I admired deeply.&lt;/p&gt;
&lt;p&gt;As time marched on, many of the cherished online spaces I once loved fell by the wayside, while others morphed into monstrous entities, becoming tools of ostracization. Although I personally may not have been the target of such mistreatment, I could discern the toxic environment that fostered and emboldened bullies.&lt;/p&gt;
&lt;p&gt;Even the search engines, once a source of discovery and connection, began to falter. Each passing day brought forth an ever-increasing deluge of hyper-SEO-optimized, meaningless content and tech-centric sites merely driven by profit, overtaking the slots that were once reserved for passionate individuals with independent blogs.&lt;/p&gt;
&lt;p&gt;As the landscape transformed, I gradually came to terms with the nostalgic allure of those bygone days, realizing that it had become a remnant of the lost innocence of the early internet or clouded by my own flawed perception of what truly transpired.&lt;/p&gt;
&lt;p&gt;The sense of desperation that had gripped me started to crumble when Elon Musk&amp;rsquo;s actions on Twitter triggered a disillusionment, pushing me to reconsider Fosstodon-an open-source social platform. And oh, what a fortuitous decision that turned out to be. It was as if I had stumbled upon the early days of FriendFeed, where genuine exchange of information thrived, embodying the very essence of the social web I yearned for.&lt;/p&gt;
&lt;p&gt;But a part of me questioned this fortunate discovery. Could it merely be a chance occurrence, a fluke in the otherwise distorted realm of human-generated nonsense? I grappled with doubts.&lt;/p&gt;
&lt;p&gt;Then, as if destiny had a hand in it, the second revelation struck-a website called Kagi, delivering yet another blow to the illusion I had held onto. The cracks in my previous beliefs widened, challenging me to confront the harsh realities of the digital landscape.&lt;/p&gt;
&lt;p&gt;Kagi, an unconventional paid search engine, piqued my curiosity, prompting me to give it a try. What unfolded before my eyes left me astounded-a screen brimming with blog posts dedicated to the concept of &amp;ldquo;permacomputing&amp;rdquo; occupied the very first page of results. In that moment, it dawned on me that the beloved world of independent blogging, which I had presumed to be on life support, had not faded away as I had believed. Instead, it thrived, resilient and as potent as ever. It was the so-called social media platforms and search engines, the very entities I had placed my trust in, that had ultimately let me down, betraying the internet I held dear.&lt;/p&gt;
&lt;p&gt;The illusion that once clouded my perception had dissipated into thin air.&lt;/p&gt;
&lt;p&gt;Determined to instigate a change, I embarked on a journey of transformation. I am currently in the midst of that process, but I have successfully identified the type of experience I desire. I have pinpointed a few readily available opportunities and have taken proactive measures to secure them for myself.&lt;/p&gt;
&lt;p&gt;Foremost, I yearn for an authentic perspective of the internet-a genuine representation of the collective human experience rather than a mere showcase of the glossiest and most superficial elements. To fulfill this aspiration, I sought out a suitable search engine, and as I mentioned earlier, I found my answer in Kagi-it aligns perfectly with my vision.&lt;/p&gt;
&lt;p&gt;Furthermore, I crave a steady stream of thoughtful and sincere content. To achieve this, I turned to an RSS aggregator to curate and deliver such material to me consistently. Feedbin emerged as the ideal choice, serving as the conduit for fulfilling my appetite for meaningful discourse.&lt;/p&gt;
&lt;p&gt;I discovered another low-hanging fruit on my path towards a more fulfilling online experience-a social website optimized for community rather than being driven solely by journalists. This gem came in the form of Mastodon.&lt;/p&gt;
&lt;p&gt;In my quest for a trustworthy email service that respects my privacy and shields me from the relentless influx of spammers, I received a recommendation for ProtonMail. Taking heed of the suggestion, I made the switch and, so far, I find it to be a satisfactory choice.&lt;/p&gt;
&lt;p&gt;You may have noticed that out of the four aforementioned solutions, three are paid services. Additionally, two of them are closed-sourced, while one-the email service-poses the risk of vendor lock-in. Although this may not be the ideal scenario, I weighed my options against a set of criteria that I had established. In the end, these choices emerged as the better alternatives, despite their limitations.&lt;/p&gt;
&lt;p&gt;However, I realize that this post has already grown quite lengthy, and the criteria I employed deserve a &lt;a href=&#34;../criteria_for_choosing_tools&#34;&gt;more thorough elaboration&lt;/a&gt;. Therefore, I will save their exploration for a future post, where I can delve deeper into these ideas deserving of greater attention.&lt;/p&gt;
&lt;h2 id=&#34;dear-reader&#34;&gt;Dear reader&lt;/h2&gt;
&lt;p&gt;At present, I find immense joy in my renewed online experience-a sense of tranquility and refuge washes over me whenever I delve into the internet. I wholeheartedly urge you, dear reader, who may be experiencing similar frustrations to those of my past self, to take a moment and reevaluate your internet usage. There is a strong possibility that the internet can be a much more pleasant and gratifying space than what you might be feeling at this moment. I know this to be true because I am living it right now. Embrace the journey of exploring better alternatives and reclaim the joy in your online interactions.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>HTML, The Programming Language</title>
      <link>https://prma.dev/posts/html_the_programming_language/</link>
      <pubDate>Sat, 24 Jun 2023 11:50:00 +0330</pubDate>
      <author>prma.dev@protonmail.com (Perma)</author>
      <guid>https://prma.dev/posts/html_the_programming_language/</guid>
      <description>Intro Ah yes, the eternal dispute over whether HTML counts as a proper programming language seems to bring out the best and worst of our community&amp;rsquo;s collective rational faculties. A veritable feast of half-baked attempts to define away the problem by appealing to whatever convenient characteristics the speaker happens upon, combined with a sprinkling of more serious thinkers seeking some grand philosophical theory to explain it all. But don&amp;rsquo;t get your hopes up - you won&amp;rsquo;t find any silver bullet solutions here folks.</description>
      <content>&lt;h2 id=&#34;intro&#34;&gt;Intro&lt;/h2&gt;
&lt;p&gt;Ah yes, the eternal dispute over whether HTML counts as a proper programming language seems to bring out the best and worst of our community&amp;rsquo;s collective rational faculties. A veritable feast of half-baked attempts to define away the problem by appealing to whatever convenient characteristics the speaker happens upon, combined with a sprinkling of more serious thinkers seeking some grand philosophical theory to explain it all. But don&amp;rsquo;t get your hopes up - you won&amp;rsquo;t find any silver bullet solutions here folks. Just a parade of armchair theoreticians grasping blindly for some sense of clarity amidst the fog of poorly thought out positions. So gather &amp;lsquo;round, listen up, and prepare yourself for another round of pointless squabbling. The fun is just beginning!&lt;/p&gt;
&lt;h2 id=&#34;the-loops-and-the-features&#34;&gt;The Loops And The Features&lt;/h2&gt;
&lt;p&gt;Individuals frequently endeavor to delineate programming languages by differentiating them from HTML, contending that a programming language possesses specified traits. Traits that might encompass looping structures, conditional statements, or even compilations. Alas, these efforts are founded upon retrospective comprehension - reliant on past personal observations of what constitutes a programming language. This flawed methodology, inherently, undermines the legitimacy of their claims inasmuch as they concurrently explore discrepancies between what is deemed not to be a programming language. A circular argument ensues, lacking genuineness, and thus futile in supporting the allegation that HTML lacks programming language attributes.&lt;/p&gt;
&lt;p&gt;Alright, listen up! Let&amp;rsquo;s say I&amp;rsquo;m dead set on accusing Tom of being a thieving scoundrel while vehemently asserting that Amanda is as innocent as can be. To make my case, I start off by drawing a sharp contrast between Tom and Amanda. Then, after much contemplation, I concoct a ridiculously specific definition of a thief: &amp;ldquo;Anyone who happens to be a man in his sixties with an academic background in History.&amp;rdquo; Can you believe that? Now, picture this - imagine we go ahead and convict every poor soul who fits this outrageous description. Well, I&amp;rsquo;ll tell you right now, that&amp;rsquo;s a load of nonsense! It simply won&amp;rsquo;t fly, and anyone with half a brain can see how utterly flawed and impractical that notion is.&lt;/p&gt;
&lt;h2 id=&#34;the-turing-completeness&#34;&gt;The Turing Completeness&lt;/h2&gt;
&lt;p&gt;Now, let me tell you about those folks who prefer a more unified approach when it comes to defining something, like a programming language. They often rely on axioms, you know, those fundamental principles that serve as the bedrock of reasoning. One of the most famous examples is the notion of Turing completeness being the ultimate defining factor. At first glance, it may not seem problematic. But here&amp;rsquo;s the burning question: Why on earth would we go down that route?&lt;/p&gt;
&lt;p&gt;Think about it. We create distinctions in definitions to aid us in effectively communicating a concept amongst ourselves. As far as I know, most programmers couldn&amp;rsquo;t care less about whether a programming language can perform every single computation imaginable in theory. No, sir! Instead, they value the practical aspects like ease of use and reliability when it comes to solving a specific set of problems. So, how in the world would that earlier theoretical claim serve us in our day-to-day tasks? It&amp;rsquo;s a real head-scratcher, especially when you consider that such a filter would let languages like brainfuck and whitespace pass through, while disregarding &amp;ldquo;total&amp;rdquo; programming languages that could actually lead to more robust and dependable software.&lt;/p&gt;
&lt;p&gt;But here&amp;rsquo;s the kicker - some people actually advocate for this madness. They&amp;rsquo;ve come up with a seemingly cohesive definition of a programming language, but their motivations for choosing that definition are nothing more than an afterthought. As a result, their definitions are utterly useless, or at the very least, useless to those who couldn&amp;rsquo;t care less about denigrating a language. Can you believe it? What a ridiculous state of affairs!&lt;/p&gt;
&lt;h2 id=&#34;dear-reader&#34;&gt;Dear reader&lt;/h2&gt;
&lt;p&gt;Now, let me be clear, my intention here is not to rally behind HTML and extol its virtues. Instead, I aim to shed light on our incessant desire to bestow added significance upon the definition of our work. And, quite frankly, I implore you to put an end to it. You see, a programming language can possess capabilities or be lacking in them, and a programmer may be focused on orchestrating the flow of information or on its presentation. We come in all shapes and forms, each with our unique approaches. Attempting to establish some sort of gatekeeping mechanism in this endeavor will only result in programmers overlooking the fact that they may just require HTML and CSS to fulfill their job requirements. This, in turn, contributes to the sorry state of the web&amp;mdash;bloated and disheartening.&lt;/p&gt;
&lt;p&gt;Let us cherish our roles as creators and refrain from placing undue emphasis on the definition of our jobs, but rather, let us focus on the outcomes we produce. After all, we are all creators and problem-solvers at heart.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Consider Developer&#39;s Snack</title>
      <link>https://prma.dev/posts/consider_developers_snack/</link>
      <pubDate>Wed, 21 Jun 2023 11:43:00 +0330</pubDate>
      <author>prma.dev@protonmail.com (Perma)</author>
      <guid>https://prma.dev/posts/consider_developers_snack/</guid>
      <description>Intro During my early 20s, I found myself immersed in the world of sustainable architecture as an architecture student. Engaging in various workshops centered around this field, one particular experience stands out as a monumental turning point in my life. It was a workshop conducted by a renowned professor in Iran, where I gained valuable insights. Within this workshop, we collectively brainstormed strategies to harness heat sources for a four-member family&amp;rsquo;s house, aiming to optimize its thermal efficiency.</description>
      <content>&lt;h2 id=&#34;intro&#34;&gt;Intro&lt;/h2&gt;
&lt;p&gt;During my early 20s, I found myself immersed in the world of sustainable architecture as an architecture student. Engaging in various workshops centered around this field, one particular experience stands out as a monumental turning point in my life. It was a workshop conducted by a renowned professor in Iran, where I gained valuable insights.
Within this workshop, we collectively brainstormed strategies to harness heat sources for a four-member family&amp;rsquo;s house, aiming to optimize its thermal efficiency. We considered a range of possibilities, including solar and geothermal heat, as well as the heat generated by the kitchen oven. However, there was one significant heat source that eluded our attention, as pointed out persistently by the professor.&lt;/p&gt;
&lt;p&gt;Eventually, he provided us with a clue: &amp;ldquo;You seem to have overlooked four 37-degree Celsius heaters.&amp;rdquo; It dawned on us that we had forgotten to factor in the heat generated by the family members themselves. Their body heat, a natural source of warmth, had slipped our minds entirely.&lt;/p&gt;
&lt;p&gt;Reflecting on a more recent occurrence, a certain paper began circulating, comparing the energy usage footprint of different programming languages. Yet, I couldn&amp;rsquo;t help but notice that the discussions surrounding this paper overlooked a crucial aspect&amp;mdash;it solely measured the energy footprint at one specific point in the application&amp;rsquo;s lifecycle.&lt;/p&gt;
&lt;p&gt;It is essential to recognize that the energy usage of a programming language extends beyond a mere snapshot analysis. To truly grasp the overall impact, we must consider the entire lifecycle of the application, accounting for factors such as development, deployment, maintenance, and eventual retirement. Only then can we gain a comprehensive understanding of the energy implications associated with different programming languages.&lt;/p&gt;
&lt;h2 id=&#34;the-paper-as-the-thread-we-pull&#34;&gt;The Paper, As The Thread We Pull&lt;/h2&gt;
&lt;p&gt;The paper, titled &amp;ldquo;Energy Efficiency Across Programming Languages,&amp;rdquo; delves into the exploration of various problems and their corresponding solutions, which are implemented across multiple programming languages. The researchers conducted an analysis of the electricity consumption associated with each implementation. In essence, the primary focus of the study revolves around determining the relative energy efficiency of different programming languages, with C emerging as the most efficient and serving as the benchmark for measurement.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;C      | 01.00 | ▓
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Rust   | 01.03 | ▓
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Java   | 01.98 | ▓▓
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Python | 75.88 | ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Perl   | 79.58 | ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;These results carry considerable weight, although it is essential to address a common misconception surrounding their implications. Contrary to popular belief, these findings do not unequivocally assert that a C program is inherently more environmentally sustainable than its Java counterpart.&lt;/p&gt;
&lt;h2 id=&#34;consider-the-snack&#34;&gt;Consider The Snack&lt;/h2&gt;
&lt;p&gt;In the field of sustainability literature, there exists a concept known as Life-Cycle Assessment (LCA). LCA involves evaluating the environmental impact of a product throughout its entire life cycle, encompassing aspects such as raw material extraction, manufacturing, and disposal or recycling.&lt;/p&gt;
&lt;p&gt;When applying this concept to the assessment of software life cycles, we realize that there are several significant factors that have been overlooked. Allow me to provide some insights on these important considerations.&lt;/p&gt;
&lt;p&gt;Firstly, the authors of the paper have primarily focused on the runtime of a specific set of problems. This means that their applications follow a sequence of starting up, solving the given problem, and then exiting. Consequently, the results obtained are biased towards programming languages that excel at efficient startup and shutdown processes. However, this perspective fails to account for the behavior of servers and long-running processes. Servers, for instance, typically start up once per day or even less frequently and spend extended periods in the computational phase. If a programming language is efficient during the initial startup but requires frequent restarts during runtime, this crucial aspect is overlooked.&lt;/p&gt;
&lt;p&gt;But we shouldn&amp;rsquo;t stop there. Another aspect to consider is compilation. While Rust is indeed an impressive language, its compilation process is significantly more resource-intensive compared to Go. Rust yields highly efficient binaries, but the energy expended during the compilation process is also considerably higher.&lt;/p&gt;
&lt;p&gt;Furthermore, the improved quality of Rust&amp;rsquo;s compiled binaries becomes relevant when we consider the potential presence of bugs and the subsequent need for recompilation. More permissive compilers may result in programs with a higher likelihood of bugs, necessitating additional rounds of debugging, fixing, and retesting. It&amp;rsquo;s important to acknowledge that this discussion goes beyond the developer&amp;rsquo;s running computer and includes factors such as sustenance needs, energy consumption to support their biological functioning during the process of bug fixing, and the overall impact on the environment.&lt;/p&gt;
&lt;p&gt;Additionally, the continuous deployment or release cycles, repackaging efforts, and the use of CI/CD practices all contribute to the ecological footprint. Recompilation for each platform targeted, as well as the network costs associated with distributing binaries or source code to different endpoints, also significantly impact the environment.&lt;/p&gt;
&lt;p&gt;The problem of compatibility further compounds the issue. Programming languages with runtimes shipped separately from the package, such as Python, Lua, and other scripting or JIT languages, as well as those based on virtual machines like JVM, often require reprogramming or the inclusion of older runtime versions when breaking changes occur. This adds to the complexity and environmental impact of software development and packaging.&lt;/p&gt;
&lt;p&gt;Furthermore, poorly designed programs can accumulate significant technical debt over time, resulting in rewriting. Although the language and toolchain themselves may not directly cause this, the ecosystem surrounding languages like JavaScript, PHP, and Python tends to encourage short-term thinking. In contrast, languages like Rust, C, Fortran, and others that focus on system-level development promote long-term support and are home to projects that have thrived for several decades.&lt;/p&gt;
&lt;p&gt;Moreover, the variability in usage patterns must be taken into account. While languages like C and C++ require substantial energy for compilation across different platforms, languages such as Rust, Go, and Java mitigate the duplication of energy required to support multiple platforms within a single application.&lt;/p&gt;
&lt;p&gt;Finally, we must consider the energy expended in the development, maintenance, and support of programming languages. Languages like Rust offer remarkable expressive capabilities, not merely due to better timing or superior thinking but also as a result of extensive collaborative efforts. Conversely, languages like Elm undergo minimal changes over time.&lt;/p&gt;
&lt;p&gt;It is worth emphasizing that the energy required to learn a language, the environmental consequences of mistakes made during coding (e.g., unintentionally sending a million requests to thousands of different servers), variations in energy usage among developers from different countries, and the decreasing lifespan of hardware are all factors that contribute to the overall consideration.&lt;/p&gt;
&lt;h2 id=&#34;dear-reader&#34;&gt;Dear Reader&lt;/h2&gt;
&lt;p&gt;The crux of the matter is that complexity pervades these considerations, demanding our thoughtful attention and appropriate mitigation for each aspect. Failing to acknowledge and address each facet places us at risk of optimizing solely for one element while sacrificing the other to the extent of rendering our efforts absurd.&lt;/p&gt;
&lt;p&gt;It is important to note that I have deliberately omitted discussions about post-harm mitigation. Our focus has been on reducing harm itself. Exploring the costs associated with bootstrapping and averting catastrophic scenarios would expand beyond the scope of this essay.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>FLOSS For Software Longevity</title>
      <link>https://prma.dev/posts/floss_for_longevity/</link>
      <pubDate>Wed, 14 Jun 2023 11:26:00 +0330</pubDate>
      <author>prma.dev@protonmail.com (Perma)</author>
      <guid>https://prma.dev/posts/floss_for_longevity/</guid>
      <description>Intro Free/Libre and Open Source Software (FlOSS) is a captivating realm within software development. What makes FLOSS particularly intriguing is its deviation from conventional business goals, leading to planned longevity and a distinct approach to sustainability.
Reasons Let us delve into the unique qualities of FOSS and the factors that contribute to its better suitability for longevity.
The longevity of the FLOSS business model serves it well The common business models are better suited for short-term goals.</description>
      <content>&lt;h2 id=&#34;intro&#34;&gt;Intro&lt;/h2&gt;
&lt;p&gt;Free/Libre and Open Source Software (FlOSS) is a captivating realm within software development. What makes FLOSS particularly intriguing is its deviation from conventional business goals, leading to planned longevity and a distinct approach to sustainability.&lt;/p&gt;
&lt;h2 id=&#34;reasons&#34;&gt;Reasons&lt;/h2&gt;
&lt;p&gt;Let us delve into the unique qualities of FOSS and the factors that contribute to its better suitability for longevity.&lt;/p&gt;
&lt;h3 id=&#34;the-longevity-of-the-floss-business-model-serves-it-well&#34;&gt;The longevity of the FLOSS business model serves it well&lt;/h3&gt;
&lt;p&gt;The common business models are better suited for short-term goals. There are two major approaches: selling or renting.&lt;/p&gt;
&lt;p&gt;Small to mid-sized software companies predominantly prioritize the sale of their products. The concept of product longevity, while acknowledged as necessary, assumes a secondary role rather than being a central objective. Its primary function lies in establishing trust among consumers. Once the initial excitement surrounding the launch of a new and captivating product subsides, these companies swiftly shift their attention to the next innovation. The success of marketing these novel products heavily relies on users&amp;rsquo; fear of missing out and the perceived loss of functionality associated with the previous iteration. Unfortunately, this often leads to the inclusion of unnecessary features, deliberate planning for obsolescence, and resistance against the right to repair. In this cycle, longevity takes a backseat as the perpetual replacement of one product with another takes precedence.&lt;/p&gt;
&lt;p&gt;Conversely, larger companies place a premium on the rental model for software. Instead of users owning the software outright, they opt for subscription-based payment models for continuous usage. One might assume that these companies would prioritize stability to retain their subscribers. However, practical implementation often takes a different route. These companies rely on monopolistic tactics, such as acquiring competitors or launching extensive marketing campaigns to stifle new entrants. In cases where competition persists, they resort to content exclusivity, coercing users to purchase their product alongside competitors&amp;rsquo; offerings. Consequently, users find themselves utilizing these products for prolonged periods not due to their exceptional quality, but rather because they perceive limited alternative options. The subscription model may make sense when paying for a service, but it doesn&amp;rsquo;t align with current software development. Paying subscription for developing and bug-fix of a product is simply paying for the privilege of using an incomplete version of a product.&lt;/p&gt;
&lt;p&gt;In contrast, companies adopting a pay-for-enterprise-support model for open-source products, such as Canonical and Red Hat, exhibit commendable practices. Their primary emphasis lies on longevity. If the software is functioning adequately, their tasks are straightforward, eliminating the need to address the same issue repeatedly for each client. Longevity serves as both their evidence and modus operandi. They provide support for software that has already weathered numerous instabilities. They employ different development stages, such as alpha, unstable, stable, and long-term releases. These features can subsequently be passed on to other distributions with more robust objectives, such as REHL.&lt;/p&gt;
&lt;p&gt;Although these companies may impose charges for bug fixes, their underlying offering revolves around selling stability and longevity (think Ubuntu Pro). This approach is not driven solely by inherent benevolence but rather stems from a lack of alternatives. They are unable to monopolize a product that can be cloned, forked, and utilized to initiate independent ventures. Nor can they vend software that others can fork, enhance, and sell at higher prices or even distribute for free. Their sole viable course of action entails creating a product that strikes a balance, avoiding both excessive limitations that render it futile and excessive complexity that complicates support.&lt;/p&gt;
&lt;p&gt;However, business is just one piece of the puzzle.&lt;/p&gt;
&lt;h3 id=&#34;floss-engineers-prioritize-quality-over-quantity&#34;&gt;FLOSS engineers prioritize quality over quantity&lt;/h3&gt;
&lt;p&gt;As we discussed, most businesses prioritize product quality only until it reaches a level sufficient for selling.&lt;/p&gt;
&lt;p&gt;This often leads to engineers being pushed and encouraged to develop faster, sacrificing quality and stability when it hinders &amp;ldquo;beating the competition to market.&amp;rdquo; I&amp;rsquo;m sure I&amp;rsquo;m not alone in feeling dissatisfied with creating instant legacy products and leaving behind a trail of subpar, useless software. It leaves no room for pride in one&amp;rsquo;s work.&lt;/p&gt;
&lt;p&gt;As a result, engineers who value quality find satisfaction in other avenues, such as personal projects or contributing to libraries and tools they use themselves.&lt;/p&gt;
&lt;p&gt;The dynamics of development in these situations differ. Open-source software often lacks the same level of resources, making maintainability a crucial concern. Allowing technical debt to accumulate in a project one maintains can result in paying a hefty price, even in a short period. The more users a project has, the more the burden of technical debt becomes apparent&amp;mdash;quite the opposite of the industry&amp;rsquo;s &amp;ldquo;move broken things, fast&amp;rdquo; mentality.&lt;/p&gt;
&lt;p&gt;Consequently, successful open-source products tend to have meticulous and uncompromising maintainers.&lt;/p&gt;
&lt;p&gt;Another important aspect to consider is that open-source software greatly enhances one&amp;rsquo;s resume. Similar to a resume, open-source projects showcase an individual&amp;rsquo;s best work. They are like first dates, where you present yourself at your best. Consequently, open-source projects motivate developers to create their finest code and documentation.&lt;/p&gt;
&lt;p&gt;Furthermore, transparency is a vital aspect of open-source projects. Engaging in dubious practices, such as intrusive telemetry, can agitate the surrounding community.&lt;/p&gt;
&lt;p&gt;In summary, there are four main reasons:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The cost of maintainability&lt;/li&gt;
&lt;li&gt;The positive impact on one&amp;rsquo;s resume&lt;/li&gt;
&lt;li&gt;Counteracting the lack of satisfaction caused by lower quality software in daily work&lt;/li&gt;
&lt;li&gt;Embracing transparency&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;floss-exhibits-a-greater-degree-of-diversity-dot&#34;&gt;FLOSS exhibits a greater degree of diversity.&lt;/h3&gt;
&lt;p&gt;When it comes to a biological ecosystem, its resilience stems from the diversity of its members. Let&amp;rsquo;s imagine a scenario involving a moth that feeds on maple tree branches. In a jungle filled with maple trees, the moth can feast and reproduce endlessly. However, there&amp;rsquo;s a twist.&lt;/p&gt;
&lt;p&gt;Around 10% of the maple trees have developed a variation of their membrane that is toxic to the moth, purely by chance. Now, if the moth tries to feed on these trees, it has a 1 in 10 chance of being fatally poisoned. If there were only a single moth, it would be the end of its lineage. However, imagine a population of 100 moths, and 10% of them have accidentally developed immunity. These &amp;ldquo;super moths&amp;rdquo; may be larger and more resistant to the trees, but they are also more visible to predators like birds. And so, the cycle continues.&lt;/p&gt;
&lt;p&gt;The diversity of approaches within a biological ecosystem is crucial. In the context of biological beings, the exchange of random sets of genes through sexual reproduction likely emerged as a means to enhance resilience. Microbes that prey on others, on the other hand, face a more challenging situation, as the result.&lt;/p&gt;
&lt;p&gt;These advantageous mechanisms resulting from diversity are also present in the software ecosystem.&lt;/p&gt;
&lt;p&gt;The needs and threats faced by a server differ from those faced by a German student&amp;rsquo;s laptop. While Linux is ubiquitous in the open-source desktop realm, there are numerous slightly different Linux distributions available. These variations encompass different themes, preinstalled applications, package managers, and even packaging architecture models. Additionally, there are kernels compiled with different flags and versions.&lt;/p&gt;
&lt;p&gt;Given this remarkable diversity, it comes as little astonishment that Microsoft&amp;rsquo;s ardent campaign during the 2000s against the comparably youthful, less cohesive, and resource-limited Linux met with abysmal failure. Strikingly, in a twist of events, Microsoft has lately unveiled its very own Linux distribution and dedicated years to crafting the Windows Subsystem for Linux.&lt;/p&gt;
&lt;p&gt;To the proprietary realm, an ecosystem characterized by the development, redesign, and forking of diverse products, yielding a multitude of solutions, may appear inherently inefficient. Yet, from the perspective of permaculture and permacomputing, such an ecosystem manifests as nothing short of utopia.&lt;/p&gt;
&lt;h3 id=&#34;floss-demonstrates-a-higher-level-of-robustness&#34;&gt;FLOSS demonstrates a higher level of robustness&lt;/h3&gt;
&lt;p&gt;FLOSS transcends being a mere generator of independent variations that begin anew each time. It represents a system where progress builds upon existing foundations, with each subsequent layer amplifying the importance of the underlying ones. Irrespective of how many stories above the ground one ascends, the ground level remains a paramount concern if its integrity is jeopardized. Prominent examples of this phenomenon can be observed in projects like curl, the kernel, and OpenSSL. Although these initiatives were initially initiated by individuals, they have evolved into integral components of numerous other undertakings. The driving force compelling many individuals to contribute to these projects stems from the realization that the cost of abstaining from participation would be significantly greater.&lt;/p&gt;
&lt;p&gt;However, it is important to recognize that this process is not always pleasant. Consider the immense pressure on OpenSSL developers. If they were to become overwhelmed and exhausted like many other open-source maintainers, the consequences could be significant.&lt;/p&gt;
&lt;p&gt;Yet, when such challenges arise (and they do), we all become aware of them. We sense the danger and collectively strive to find solutions. This is in stark contrast to the situation when a proprietary software developer abandons a company. Until a replacement is found, users are left unaware and vulnerable to potential security threats posed by malicious hackers.&lt;/p&gt;
&lt;p&gt;Thanks to this collective effort and attention to robustness, many foundational open-source software programs have remained the best tools for the job even after decades of use.&lt;/p&gt;
&lt;h2 id=&#34;dear-reader&#34;&gt;Dear Reader&lt;/h2&gt;
&lt;p&gt;Now, esteemed reader, I trust you comprehend the rationale behind why individuals with a penchant for enduring solutions find the realm of FLOSS far more fertile than its alternatives.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Go Vs Rust readability</title>
      <link>https://prma.dev/posts/go_vs_rust_readability/</link>
      <pubDate>Fri, 14 Apr 2023 23:49:00 +0330</pubDate>
      <author>prma.dev@protonmail.com (Perma)</author>
      <guid>https://prma.dev/posts/go_vs_rust_readability/</guid>
      <description>Intro Traditionally speaking, Go and Rust are not direct competitors on many fronts. Each take different trade-offs. But more often than not, you might need to choose one over the other. It is compared in the niche the other fails. Like low-level system development, which Rust easily rules. Or maybe dev-ops tooling which Go is easily good at it.
However, there are many overlaps in their use case. Think high-performance web-servers.</description>
      <content>&lt;h2 id=&#34;intro&#34;&gt;Intro&lt;/h2&gt;
&lt;p&gt;Traditionally speaking, Go and Rust are not direct competitors on many fronts. Each take different trade-offs. But more often than not, you might need to choose one over the other. It is compared in the niche the other fails. Like low-level system development, which Rust easily rules. Or maybe dev-ops tooling which Go is easily good at it.&lt;/p&gt;
&lt;p&gt;However, there are many overlaps in their use case. Think high-performance web-servers. In those spaces, we should compare other things. Like readability and maintainability of language. In this post, I want to share my thoughts on readability.&lt;/p&gt;
&lt;h2 id=&#34;tl-dr&#34;&gt;Tl;DR&lt;/h2&gt;
&lt;p&gt;Rust is not less maintainable than Go because Go is less readable.&lt;/p&gt;
&lt;h2 id=&#34;what-i-do-not-disagree-with&#34;&gt;What I do not disagree with&lt;/h2&gt;
&lt;p&gt;Just to be clear, although I&amp;rsquo;m making a case for Rust and arguing that readability should not be as much concern, I would like to make clear that I&amp;rsquo;m not arguing against these common-sense statements:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Go is more readable.&lt;/li&gt;
&lt;li&gt;Go has less overhead for people with no previous experience with language.&lt;/li&gt;
&lt;li&gt;Readability is generally what you want.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;why-readability-is-good&#34;&gt;Why readability is good&lt;/h2&gt;
&lt;p&gt;English is more readable than any programming language. However, readability is not the only measure that we are using for chosing a language.&lt;/p&gt;
&lt;p&gt;Readability and clearity are not inherently good, rather it is a proxy for something else we value: A readable code helps us understand the flow of information in order to &lt;strong&gt;understand its logic&lt;/strong&gt;, &lt;strong&gt;capture its bugs&lt;/strong&gt; and &lt;strong&gt;extend it&lt;/strong&gt;, easier. A line of code is read in many situations:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;I want to find out how a piece of code can give rise to a specific runtime bug.&lt;/li&gt;
&lt;li&gt;I want to audit it to see if it exposes any specific vulnerability, data-race, etc.&lt;/li&gt;
&lt;li&gt;I want to add features to it, and I want to know where and how I should plug the new functionality to.&lt;/li&gt;
&lt;li&gt;I want to make a code more robust, document it and make it more available for other people by refactoring it.&lt;/li&gt;
&lt;li&gt;I want to review the code of my colleague to see if a set of fresh eyes could capture a new bug, or an inconsistent styling with the rest of the codebase.&lt;/li&gt;
&lt;li&gt;I want to understand what a code base does. Maybe I&amp;rsquo;m trying to see if a  software is spying on me, or maybe I&amp;rsquo;m trying to understand the way it calculated my taxes.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;These are all noble pursuits. And in all these cases, readability is vital in preventing disasters and better experience in onboarding others.
Go&amp;rsquo;s readability is probably one of its best features. At my current and previous jobs, I have had to jump into different code bases with different levels of legacy and problematic codebases where junior developers with no-idea of idiomatic ways of coding Go left their projects without any context for the next developer.
Such low quality codes should take forever for one to decode. However, because of the beautifully simple syntax of Go, I could start to be productive and sending PRs in less than a day. Have you seen a codebase where all the back-end code was coded by a narcissistic lone-wolf meth-addict? Well, I have, and it&amp;rsquo;s an absolute shit-show. Yet, I committed my first edits in 3 hours. Go is excellent at that. And I can understand how a huge tech company with very quick employee turn-over can give rise to such language. Kudos to the Go team.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Moving in Rust is Pure</title>
      <link>https://prma.dev/posts/moving_is_pure/</link>
      <pubDate>Sun, 09 Apr 2023 10:44:00 +0330</pubDate>
      <author>prma.dev@protonmail.com (Perma)</author>
      <guid>https://prma.dev/posts/moving_is_pure/</guid>
      <description>Intro The act of moving arguments within Rust&amp;rsquo;s functions serves as a compelling means to uphold the purity of the function. By embracing this practice, we ensure that the function operates on unique ownership of its inputs, preserving the integrity and immutability of data, which are fundamental tenets of functional programming.
Moving a Variable to a Function in Rust Doesn&amp;rsquo;t Make It Impure So as an introduction, if you don&amp;rsquo;t know Rust.</description>
      <content>&lt;h2 id=&#34;intro&#34;&gt;Intro&lt;/h2&gt;
&lt;p&gt;The act of moving arguments within Rust&amp;rsquo;s functions serves as a compelling means to uphold the purity of the function. By embracing this practice, we ensure that the function operates on unique ownership of its inputs, preserving the integrity and immutability of data, which are fundamental tenets of functional programming.&lt;/p&gt;
&lt;h2 id=&#34;moving-a-variable-to-a-function-in-rust-doesn-t-make-it-impure&#34;&gt;Moving a Variable to a Function in Rust Doesn&amp;rsquo;t Make It Impure&lt;/h2&gt;
&lt;p&gt;So as an introduction, if you don&amp;rsquo;t know Rust.&lt;/p&gt;
&lt;p&gt;In Rust, we have this concept of moving variables. It is like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#888;font-style:italic&#34;&gt;//  A variable is made.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#888;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;let&lt;/span&gt; a_variable = some_value;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#888;font-style:italic&#34;&gt;// It moves into this function.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#888;font-style:italic&#34;&gt;&lt;/span&gt;_ = a_function_that_takes_ownership(a_variable);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#888;font-style:italic&#34;&gt;// We cannot use a_variable anymore! So, we cannot do this!
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#888;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;let&lt;/span&gt; b_variable = a_variable;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now I consider a_function_that_takes_ownership to be a pure function. However, it raises a possible confusion:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Doesn&amp;rsquo;t a_function_that_takes_ownership change the state of the outer function? Isn&amp;rsquo;t that a side effect?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I argue that it doesn&amp;rsquo;t. Here is why: a function is not a function call. Ok. let&amp;rsquo;s visualize it.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      ________outer_function_______
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;--in-&amp;gt;|       __inner_f___        |-out-&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      | -in-&amp;gt; |          | -out-&amp;gt; |
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      |       ------------        |
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      -----------------------------
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So we have two functions. One outer, and one inner.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Each function should have inputs and an output.&lt;/li&gt;
&lt;li&gt;Other than their outputs, they should not change anything outside their function space.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If these conditions are not met, our function is not pure.&lt;/p&gt;
&lt;h3 id=&#34;step-1&#34;&gt;Step 1&lt;/h3&gt;
&lt;p&gt;Now consider a variable [V].&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      _____________________________
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-----&amp;gt;| [v]   ____________        |-----&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      | ----&amp;gt; |          | -----&amp;gt; |
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      |       ------------        |
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      -----------------------------
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;step-2&#34;&gt;Step 2&lt;/h3&gt;
&lt;p&gt;With our outer function, we create a function call for the inner function.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      _____________________________
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-----&amp;gt;|       ____________        |-----&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      | [v]-&amp;gt; |          | -----&amp;gt; |
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      |       ------------        |
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      -----------------------------
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;step-3&#34;&gt;Step 3&lt;/h3&gt;
&lt;p&gt;It is no longer in the state space of the outer function. The inner function takes ownership of it.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      _____________________________
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-----&amp;gt;|       ____________        |-----&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      | ----&amp;gt; |   [v]    | -----&amp;gt; |
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      |       ------------        |
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      -----------------------------
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Semantically, for the outer function [v] was used in the function call and then dropped. Which does not violate our rules. For the inner function, it just got an input and returns an output. So it makes sematic sense.&lt;/p&gt;
&lt;p&gt;In practice, it also makes the same guarantees as any other pure function: - No null pointers. - No mutable state. - No side effects.&lt;/p&gt;
&lt;p&gt;If the caller &lt;code&gt;.clone()&lt;/code&gt; our value and make a copy of it and pass that to the inner function, it provides us with no other guarantees, other than more memory usage and slightly longer code.&lt;/p&gt;
&lt;h2 id=&#34;why-does-it-matter&#34;&gt;Why does it matter?&lt;/h2&gt;
&lt;p&gt;Well, Honestly, it doesn&amp;rsquo;t. I just had to decide if in a pure function I can consume a self, if I want to make it a pure function, considering that I cannot make it const. This was my thinking output. Now you are the outer function.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Pure Rust</title>
      <link>https://prma.dev/posts/pure_rust/</link>
      <pubDate>Sat, 25 Mar 2023 22:36:00 +0330</pubDate>
      <author>prma.dev@protonmail.com (Perma)</author>
      <guid>https://prma.dev/posts/pure_rust/</guid>
      <description>If you are not familiar with Functional Programming (FP), you are in for a ride. I will try to explain Functional Programming (FP) in more practical terms.
## A definition to work with
FP is a declarative way of writing a program that consists mostly of pure functions that operate on and produce immutable data. That was many other unfamiliar words. Let&amp;rsquo;s make it concrete.
Making it more concrete Here is a function in Rust that we will work on:</description>
      <content>&lt;p&gt;If you are not familiar with Functional Programming (FP), you are in for a ride.
I will try to explain Functional Programming (FP) in more practical terms.&lt;/p&gt;
&lt;p&gt;## A definition to work with&lt;/p&gt;
&lt;p&gt;FP is a &lt;em&gt;declarative&lt;/em&gt; way of writing a program that consists mostly of &lt;em&gt;pure functions&lt;/em&gt; that operate on and produce &lt;em&gt;immutable data&lt;/em&gt;.
That was many other unfamiliar words. Let&amp;rsquo;s make it concrete.&lt;/p&gt;
&lt;h2 id=&#34;making-it-more-concrete&#34;&gt;Making it more concrete&lt;/h2&gt;
&lt;p&gt;Here is a function in Rust that we will work on:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#888;font-style:italic&#34;&gt;// Calling `calculate_my_lateness` seems like magic.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#888;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#888;font-style:italic&#34;&gt;// We don&amp;#39;t know how it calculates it, and why it is doing that.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#888;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;font-weight:bold&#34;&gt;mut&lt;/span&gt; status: &lt;span style=&#34;font-weight:bold&#34;&gt;bool&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  calculate_my_lateness(&amp;amp;&lt;span style=&#34;font-weight:bold&#34;&gt;mut&lt;/span&gt; status);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#888;font-style:italic&#34;&gt;// This sometimes crashes and sometimes, it does not.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#888;font-style:italic&#34;&gt;&lt;/span&gt;  assert_eq!(status, &lt;span style=&#34;font-weight:bold&#34;&gt;true&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#888;font-style:italic&#34;&gt;// The point of this function is to tell us if we are late
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#888;font-style:italic&#34;&gt;// Ask yourself, how would you write a test for such a function?
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#888;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;calculate_my_lateness&lt;/span&gt;(status: &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;mut&lt;/span&gt; &lt;span style=&#34;font-weight:bold&#34;&gt;bool&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;let&lt;/span&gt; current_time = std::time::SystemTime::now();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;let&lt;/span&gt; expected_time = std::time::SystemTime::from(&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;SOME_SPECIFIED_TIME&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    status = current_time &amp;lt;= date_time;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, let&amp;rsquo;s make it &lt;em&gt;pure&lt;/em&gt; and while we are at it, we introduce pure functions and some principles as well.&lt;/p&gt;
&lt;h3 id=&#34;pure-functions-return-at-least-one-output&#34;&gt;Pure functions return at least one output&lt;/h3&gt;
&lt;p&gt;That means that if you have a function named &lt;code&gt;some_function&lt;/code&gt;, you will have at least one argument &lt;code&gt;some_input&lt;/code&gt; and it will return at least one output &lt;code&gt;some_output&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;some_function&lt;/span&gt;(some_input) -&amp;gt; &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;some_output&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Why do we do this? When we are calling a function, we are expecting &lt;span class=&#34;underline&#34;&gt;something&lt;/span&gt; to happen.
In FP world, the only acceptable &lt;em&gt;something&lt;/em&gt; is an output argument.
A lack of output is &lt;em&gt;symptomatic&lt;/em&gt; of one of these two unacceptable situations:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Our function does nothing&lt;/strong&gt;. In which case, why are we even bothering to write it at all?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Our function is doing a side effect&lt;/strong&gt;. Which means that it is changing something other than what is inside the function.
These functions don&amp;rsquo;t let us know or control what they are doing inside, without making us look at the source code.
We will get back to this throughout this post.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Please note the emphasis on &lt;em&gt;symptomatic&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;So let&amp;rsquo;s make it return the output:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;font-weight:bold&#34;&gt;mut&lt;/span&gt; status: &lt;span style=&#34;font-weight:bold&#34;&gt;bool&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;let&lt;/span&gt; output = calculate_my_lateness(&amp;amp;&lt;span style=&#34;font-weight:bold&#34;&gt;mut&lt;/span&gt; status);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#888;font-style:italic&#34;&gt;//--^^^^^^------------ we have an output now
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#888;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  assert_eq!(output, &lt;span style=&#34;font-weight:bold&#34;&gt;true&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#888;font-style:italic&#34;&gt;//---------^^^^^^----- which we use here
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#888;font-style:italic&#34;&gt;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;calculate_my_lateness&lt;/span&gt;(status: &lt;span style=&#34;font-weight:bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;mut&lt;/span&gt; &lt;span style=&#34;font-weight:bold&#34;&gt;bool&lt;/span&gt;) -&amp;gt; &lt;span style=&#34;font-weight:bold&#34;&gt;bool&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#888;font-style:italic&#34;&gt;//-notice that we are returning something--^^^^--
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#888;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;let&lt;/span&gt; current_time = std::time::SystemTime::now();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;let&lt;/span&gt; expected_time = std::time::SystemTime::from(&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;SOME_SPECIFIED_TIME&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    status = current_time &amp;lt;= date_time;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    status &lt;span style=&#34;color:#888;font-style:italic&#34;&gt;// &amp;lt;- what we are returning
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#888;font-style:italic&#34;&gt;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;pure-functions-don-t-mutate-state&#34;&gt;Pure functions don&amp;rsquo;t mutate state&lt;/h3&gt;
&lt;p&gt;As I mentioned before, a function does something when it returns something and changes the state of something outside itself.
We call that &lt;em&gt;a side effect&lt;/em&gt;.
You may have noticed that our function takes a mutable variable of type &lt;code&gt;bool&lt;/code&gt; and changes it.
In our first iteration of the function, we needed it. But now, we grew out of it. So let&amp;rsquo;s just delete it.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#888;font-style:italic&#34;&gt;// let mut status: bool;  &amp;lt;- we don&amp;#39;t need this
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#888;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;let&lt;/span&gt; output = calculate_my_lateness();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#888;font-style:italic&#34;&gt;//--------------------------------^ we don&amp;#39;t need to take status any more
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#888;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  assert_eq!(output, &lt;span style=&#34;font-weight:bold&#34;&gt;true&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;calculate_my_lateness&lt;/span&gt;() -&amp;gt; &lt;span style=&#34;font-weight:bold&#34;&gt;bool&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#888;font-style:italic&#34;&gt;//------------------^^- we don&amp;#39;t need to take a mutable variable
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#888;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;let&lt;/span&gt; current_time = std::time::SystemTime::now();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;let&lt;/span&gt; expected_time = std::time::SystemTime::from(&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;SOME_SPECIFIED_TIME&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    current_time &amp;lt;= date_time &lt;span style=&#34;color:#888;font-style:italic&#34;&gt;//  &amp;lt;- what we are returning
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#888;font-style:italic&#34;&gt;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now isn&amp;rsquo;t this better? When I call &lt;code&gt;calculate_my_lateness()&lt;/code&gt;
I&amp;rsquo;m not worried about the function changing anything it&amp;rsquo;s not supposed to anymore.
Let&amp;rsquo;s move on.&lt;/p&gt;
&lt;h3 id=&#34;pure-functions-return-output-only-based-on-their-argument&#34;&gt;Pure functions return output only based on their argument&lt;/h3&gt;
&lt;p&gt;Which means that when I call &lt;code&gt;calculate_my_lateness()&lt;/code&gt;, I should not expect it to do something different each time I run it.
Why is that? There are two reasons:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Transparency&lt;/strong&gt;: You should know what parameters change the output of a function, without needing to reading the function body.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Testing&lt;/strong&gt;: It is hell of a lot easier to test a function that you can just control without needing to change the time of your computer. Won&amp;rsquo;t you say?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let&amp;rsquo;s do it in two steps this time.&lt;/p&gt;
&lt;h4 id=&#34;step-one-don-t-use-global-variables&#34;&gt;Step one: Don&amp;rsquo;t use global variables&lt;/h4&gt;
&lt;p&gt;you may have noticed &lt;code&gt;SOME_SPECIFIED_TIME&lt;/code&gt;.
This is a variable we use to make a &lt;code&gt;SystemTime&lt;/code&gt; which we compare current time with to know if we are late or not.
The problem here is these two:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We need to write a new function, each time we have a new meeting.&lt;/li&gt;
&lt;li&gt;We also don&amp;rsquo;t know what time current time is being compared to, unless we first read the function, and then find out what it uses as &lt;code&gt;SOME_SPECIFIED_TIME&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;!--listend--&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;let&lt;/span&gt; output = calculate_my_lateness(SystemTime::from(&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;SOME_SPECIFIED_TIME&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#888;font-style:italic&#34;&gt;//---------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#888;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#888;font-style:italic&#34;&gt;// now the caller is supposed to provide the time
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#888;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  assert_eq!(output, &lt;span style=&#34;font-weight:bold&#34;&gt;true&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;calculate_my_lateness&lt;/span&gt;(late_as_of: &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;SystemTime&lt;/span&gt;) -&amp;gt; &lt;span style=&#34;font-weight:bold&#34;&gt;bool&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#888;font-style:italic&#34;&gt;//-------------------^^^^^^^^^^^^^^^^^^^^^^-----------
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#888;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;let&lt;/span&gt; current_time = std::time::SystemTime::now();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    current_time &amp;lt;= late_as_of
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;step-two-don-t-use-functions-with-side-effects-inside-your-function&#34;&gt;Step Two: don&amp;rsquo;t use functions with side effects inside your function&lt;/h4&gt;
&lt;p&gt;Imagine that you have a non-alcoholic drink, if you add another non-alcoholic drink to it, it is still non-alcoholic.
But if you add an alcoholic drink to it, it will not remain non-alcoholic anymore.
A pure function is only pure, if all the functions that are being called in it, are pure.
And &lt;code&gt;std::time:SystemTime::now()&lt;/code&gt; is definitely not pure.
Now, at some point we need to get the current time, but we don&amp;rsquo;t need to do that where it is hidden from the caller.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;let&lt;/span&gt; output = calculate_my_lateness(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                   SystemTime::from(&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;SOME_SPECIFIED_TIME&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                   SystemTime::now(),&lt;span style=&#34;color:#888;font-style:italic&#34;&gt;//&amp;lt;------ we provide the time
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#888;font-style:italic&#34;&gt;&lt;/span&gt;  );
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  assert_eq!(output, &lt;span style=&#34;font-weight:bold&#34;&gt;true&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;calculate_my_lateness&lt;/span&gt;(late_as_of: &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;SystemTime&lt;/span&gt;, target_time: &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;SystemTime&lt;/span&gt; ) -&amp;gt; &lt;span style=&#34;font-weight:bold&#34;&gt;bool&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#888;font-style:italic&#34;&gt;//-------------------------------------------^^^^^^^^^^^^^^^^^^^^^^^-----------
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#888;font-style:italic&#34;&gt;&lt;/span&gt;    target_time &amp;lt;= late_as_of
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now the nice thing here is that we can easily test this function now!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#888;font-style:italic&#34;&gt;// main and calculate_my_lateness are not shown here. Don&amp;#39;t be alarmed.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#888;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#888;font-weight:bold&#34;&gt;#[cfg(test)]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;mod&lt;/span&gt; &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;tests&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;font-weight:bold&#34;&gt;use&lt;/span&gt; &lt;span style=&#34;font-weight:bold&#34;&gt;super&lt;/span&gt;::calculate_my_lateness;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;font-weight:bold&#34;&gt;use&lt;/span&gt; std::time::SystemTime;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#888;font-weight:bold&#34;&gt;#[test]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;font-weight:bold&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;being_late_works&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;let&lt;/span&gt; res = calculate_my_lateness(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            SystemTime::from(&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;A_TIME&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            SystemTime::from(&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;A_TIME_THAT_IS_AFTER_LATE_TIME&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        );
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        assert_eq!(res, &lt;span style=&#34;font-weight:bold&#34;&gt;true&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#888;font-weight:bold&#34;&gt;#[test]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;font-weight:bold&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;being_early_works&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;let&lt;/span&gt; res = calculate_my_lateness(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            SystemTime::from(&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;A_TIME&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            SystemTime::from(&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;A_TIME_THAT_IS_BEFORE_LATE_TIME&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        );
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        assert_eq!(res, &lt;span style=&#34;font-weight:bold&#34;&gt;false&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Imagine doing this with the first function!&lt;/p&gt;
&lt;h4 id=&#34;one-more-step&#34;&gt;One more step&lt;/h4&gt;
&lt;p&gt;OK, I lied&amp;hellip; Somewhat. Have you noticed the one glaring, lack of transparency and control here?
It&amp;rsquo;s the &lt;code&gt;&amp;lt;=&lt;/code&gt;. You may need to read the function here, if you have this simple question:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If I call the function exactly, at the precise moment that I specified to be `late_as_of`, will return true, or false?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Now, not answering this question using the function signature,
won&amp;rsquo;t make my function less pure,
but still, it is a much nicer experience for the caller to be able to rely on their IDE&amp;rsquo;s autocomplete to tell them what happens.
But how the hell should we do that? Easy! We take a comparator function as input!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;let&lt;/span&gt; output = calculate_my_lateness(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                   SystemTime::from(&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;SOME_SPECIFIED_TIME&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                   SystemTime::now(),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                   |late, target| target &amp;gt; late, &lt;span style=&#34;color:#888;font-style:italic&#34;&gt;// here the caller passes the function
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#888;font-style:italic&#34;&gt;&lt;/span&gt;                                                 &lt;span style=&#34;color:#888;font-style:italic&#34;&gt;// you can also provide a few different functions yourself to make it easier for the caller
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#888;font-style:italic&#34;&gt;&lt;/span&gt;  );
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  assert_eq!(output, &lt;span style=&#34;font-weight:bold&#34;&gt;true&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;calculate_my_lateness&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    late_as_of: &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;SystemTime&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    target_time: &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;SystemTime&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    comparer: &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;fn&lt;/span&gt;(SystemTime, SystemTime) -&amp;gt; &lt;span style=&#34;font-weight:bold&#34;&gt;bool&lt;/span&gt;, &lt;span style=&#34;color:#888;font-style:italic&#34;&gt;// magic happens here
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#888;font-style:italic&#34;&gt;&lt;/span&gt;) -&amp;gt; &lt;span style=&#34;font-weight:bold&#34;&gt;bool&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    comparer(late_as_of, target_time)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now the caller is providing us we have everything we need. We did not hide one single thing.&lt;/p&gt;
&lt;h3 id=&#34;isn-t-this-just-more-work-for-caller&#34;&gt;Isn&amp;rsquo;t this just more work for caller?&lt;/h3&gt;
&lt;p&gt;Well, yes. Yes, it is&amp;hellip; if calling functions without understanding them is the only work that the caller of our function is doing.
Otherwise, our caller knows everything they need using their language server, can change everything they need, have the assurance of our tests and don&amp;rsquo;t need to crawl through our source code, and they will face much fewer bugs where they don&amp;rsquo;t know where it came from.
It may seem unnecessary for this simple function, but imagine much more complex functions.&lt;/p&gt;
&lt;h2 id=&#34;making-things-nicer-a-spicy-problem&#34;&gt;Making things nicer: A spicy problem&lt;/h2&gt;
&lt;p&gt;So we have all this power and transparency.
But the elephant is in it room: We have a very shitty API.
Let&amp;rsquo;s make it nicer using a technique called currying (hence the &amp;ldquo;spicy&amp;rdquo; pun).
What it means is: as well as taking functions as argument, we can return functions.
That way, our `calculate_my_lateness` function can become a function-maker.
Let me make it more concrete.&lt;/p&gt;
&lt;h3 id=&#34;consider-the-use-case&#34;&gt;Consider the use case&lt;/h3&gt;
&lt;p&gt;Let us suppose that we want to find time in our list of times that is not late.
Currently, we have to call the whole function, repeatedly, and include every argument.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#888;font-style:italic&#34;&gt;// we are in main, don&amp;#39;t be alarmed
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#888;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;let&lt;/span&gt; output_time1 = calculate_my_lateness(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    SystemTime::from(&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;SOME_SPECIFIED_TIME&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    SystemTime::from(&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;FIRST_TIME&lt;/span&gt;), &lt;span style=&#34;color:#888;font-style:italic&#34;&gt;//&amp;lt;------ we provide the time
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#888;font-style:italic&#34;&gt;&lt;/span&gt;    |late, target| target &amp;gt; late,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;let&lt;/span&gt; output_time2 = calculate_my_lateness(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    SystemTime::from(&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;SOME_SPECIFIED_TIME&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    SystemTime::from(&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;SECOND_TIME&lt;/span&gt;), &lt;span style=&#34;color:#888;font-style:italic&#34;&gt;//&amp;lt;------ we provide the time
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#888;font-style:italic&#34;&gt;&lt;/span&gt;    |late, target| target &amp;gt; late,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;let&lt;/span&gt; output_time3 = calculate_my_lateness(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    SystemTime::from(&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;SOME_SPECIFIED_TIME&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    SystemTime::from(&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;THIRD_TIME&lt;/span&gt;), &lt;span style=&#34;color:#888;font-style:italic&#34;&gt;//&amp;lt;------ we provide the time
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#888;font-style:italic&#34;&gt;&lt;/span&gt;    |late, target| target &amp;gt; late,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#888;font-style:italic&#34;&gt;// etc...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is not great.
Here, We can just make a function that only takes our target time.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;calculate_my_lateness&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    late_as_of: &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;SystemTime&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#888;font-style:italic&#34;&gt;// target_time: SystemTime &amp;lt;------------ we don&amp;#39;t need to take this argument anymore
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#888;font-style:italic&#34;&gt;&lt;/span&gt;    comparer: &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;fn&lt;/span&gt;(late_as_of: &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;SystemTime&lt;/span&gt;, target_time: &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;SystemTime&lt;/span&gt;) -&amp;gt; &lt;span style=&#34;font-weight:bold&#34;&gt;bool&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;) -&amp;gt; &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;fn&lt;/span&gt;(target_time: &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;SystemTime&lt;/span&gt;) -&amp;gt; &lt;span style=&#34;font-weight:bold&#34;&gt;bool&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#888;font-style:italic&#34;&gt;//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---- notice that we are now returning a function
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#888;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    |target_time: &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;SystemTime&lt;/span&gt;| -&amp;gt; &lt;span style=&#34;font-weight:bold&#34;&gt;bool&lt;/span&gt; { comparer(target_time, late_as_of) }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#888;font-style:italic&#34;&gt;//^^^^^^^^^^^^^^^^^^^^^^           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#888;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#888;font-style:italic&#34;&gt;//         |                this is where the calculation of lateness happens
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#888;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#888;font-style:italic&#34;&gt;// we are taking target time here
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#888;font-style:italic&#34;&gt;&lt;/span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You might ask, &amp;ldquo;well, how does this help?&amp;rdquo;&lt;/p&gt;
&lt;p&gt;#+begin_src rust
// we are in  main&lt;/p&gt;
&lt;p&gt;&lt;em&gt;/ now our late_before_time_x is not of type bool,
/&lt;/em&gt; rather it is of type Fn(SystemTime) -&amp;gt; bool
let late_before_time_x = calculate_my_lateness(
SystemTime::from(SOME_SPECIFIED_TIME),&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;late, target&lt;/td&gt;
&lt;td&gt;target &amp;gt; late,&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;);&lt;/p&gt;
&lt;p&gt;&lt;em&gt;/ So we can just:
let first_result = late_before_time_x(FIRST_TIME);
let second_result = late_before_time_x(SECOND_TIME);
let third_result = late_before_time_x(THIRD_TIME);
/&lt;/em&gt; &amp;hellip;much less boilerplate&lt;/p&gt;
&lt;p&gt;#+end_srcust&lt;/p&gt;
&lt;h3 id=&#34;why-const-just-won-t-do&#34;&gt;Why &lt;code&gt;const&lt;/code&gt; just won&amp;rsquo;t do&lt;/h3&gt;
&lt;p&gt;Veteran rustaceans among the readers of this blog might ask: &amp;ldquo;why not just use &lt;code&gt;const&lt;/code&gt; to mark that functions are pure?&amp;rdquo;
Well dear veteran, if you can make a function &lt;code&gt;const&lt;/code&gt;, do every one a favor and actually do it.
In fact, I regularly use &lt;code&gt;clippy::missing_const_for_fn&lt;/code&gt; lint and suggest you to use it as well.
But that does not guarantee that our functions are pure, or that every pure function can be &lt;code&gt;const&lt;/code&gt;.
Here are my reasons:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;const&lt;/code&gt; functions can take `&amp;amp;mut something` as their arguments. Taking mutable references is definitely not very pure-function-y.&lt;/li&gt;
&lt;li&gt;You cannot &lt;code&gt;const&lt;/code&gt; trait methods in stable rust, as of now. And considering that every function call inside a &lt;code&gt;const&lt;/code&gt; function should be &lt;code&gt;const&lt;/code&gt; as well, you are extremely limited, without any reasons that have to do with pure functions.&lt;/li&gt;
&lt;li&gt;Many libraries don&amp;rsquo;t to use &lt;code&gt;const&lt;/code&gt; on the functions that are &lt;code&gt;const&lt;/code&gt;. Again, limitation without pureness reasons.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;making-things-declarative&#34;&gt;Making things declarative&lt;/h2&gt;
&lt;p&gt;There is this often repeated old joke from Phil Karlton that says:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;There two hard problems in programming&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Cache invalidation&lt;/li&gt;
&lt;li&gt;Naming things&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;And here we are concerned with the second one.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;In the &lt;strong&gt;imperative&lt;/strong&gt; universe, we usually name our functions using &lt;em&gt;verbs&lt;/em&gt;. Think &lt;code&gt;calculate_my_lateness&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;In the &lt;strong&gt;declarative&lt;/strong&gt; universe we are concerned with our output, we use &lt;em&gt;nouns&lt;/em&gt;. Think &lt;code&gt;lateness_calculator&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This makes the intent of our function clear.
How it is implemented under-the-hood is not what matters to the caller.
They only care about what they get out of it.
If you now are thinking that you cared about that part before, consider the things that we just can answer by seeing the arguments that our function takes.
We don&amp;rsquo;t need to rely on our function name anymore to tell use how the function is calculating lateness.
We only need to know what it&amp;rsquo;s intention is.&lt;/p&gt;
&lt;h2 id=&#34;bye-without-iterators&#34;&gt;Bye without iterators?&lt;/h2&gt;
&lt;p&gt;In this post, I just preferred to focus on the heart of functional programming: pure declarative functions.
However, functional programming brings with it a set of extremely useful tools, patterns, etc. most well known are iterators, maps, folds, filters and&amp;hellip;.
Honestly, they are well explained in other resources. My only suggestion would be to check out &lt;a href=&#34;https://docs.rs/itertools/latest/itertools/&#34;&gt;itertools&lt;/a&gt; crate.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Hachyderm or Fosstodon</title>
      <link>https://prma.dev/posts/hachyderm_or_fosstodon/</link>
      <pubDate>Fri, 25 Nov 2022 22:17:00 +0330</pubDate>
      <author>prma.dev@protonmail.com (Perma)</author>
      <guid>https://prma.dev/posts/hachyderm_or_fosstodon/</guid>
      <description>Intro Ever since I have moved to the mastodon platform after &amp;ldquo;the great twitter migration&amp;rdquo;. I was curious about two main instances. One being Fosstodon, an instance oriented around FOSS 1, another being Hachyderm, an instance that introduces itself as social media for technical professionals.
Eventualy, I decided to go with Fosstodon, as I liked what I was seeing there more. But I couldn&amp;rsquo;t put my finger on what it was that I liked more about Fosstodon, even though many of my favorite people resided on Hachyderm, the instance owner of the Hachyderm herself, being one examples.</description>
      <content>&lt;h2 id=&#34;intro&#34;&gt;Intro&lt;/h2&gt;
&lt;p&gt;Ever since I have moved to the mastodon platform after &amp;ldquo;the great twitter migration&amp;rdquo;. I was curious about two main instances.
One being &lt;a href=&#34;https://fosstodon.org&#34;&gt;Fosstodon&lt;/a&gt;, an instance oriented around FOSS &lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;, another being &lt;a href=&#34;https://hachyderm.io&#34;&gt;Hachyderm&lt;/a&gt;, an instance that introduces itself as social media for technical professionals.&lt;/p&gt;
&lt;p&gt;Eventualy, I decided to go with Fosstodon, as I liked what I was seeing there more.
But I couldn&amp;rsquo;t put my finger on what it was that I liked more about Fosstodon, even though many of my favorite people resided on Hachyderm, the instance owner of the Hachyderm herself, being one examples.&lt;/p&gt;
&lt;h2 id=&#34;initial-theories&#34;&gt;Initial Theories&lt;/h2&gt;
&lt;p&gt;Initially I thought Hachyderm was more business-oriented. It seemed that people on Hachyderm were more interested about talking about broader technologies like &lt;em&gt;kubernetes&lt;/em&gt; and &lt;em&gt;docker&lt;/em&gt;, while at the same time there was a lot of talk about codes and programming practices.&lt;/p&gt;
&lt;p&gt;I thought maybe all the programmers on Hachyderm are working with more proprietory and enterprise solutions and as such they were less likely to share details of their daily programming.&lt;/p&gt;
&lt;p&gt;But that theory didn&amp;rsquo;t hold true, as there was as much toots in my timeline on Fosstodon about bussiness related stuff as there was on Hachyderm.&lt;/p&gt;
&lt;p&gt;Until last night that I realized that maybe what I was seeing was the difference of ideas between Operations interested people vs people involved in developing software. And as a backend-developer, I could see more relevant content from the development side.&lt;/p&gt;
&lt;p&gt;So I set to examine my assumptions.
Like a good &lt;a href=&#34;https://www.lesswrong.com/tag/bayes-theorem&#34;&gt;Bayesian&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;apis-searches-and-methods&#34;&gt;APIs, Searches and Methods&lt;/h2&gt;
&lt;p&gt;to start with, I looked into different websites that could help me search per-instance results.
That way I could search differnet keywords in each instance and compare the results.
However I could not find such a thing. Every search engine I tried lacked the ability of filtering by instance.&lt;/p&gt;
&lt;p&gt;After that, I looked into the Mastodon APIs myself.
Long-story short, I found &lt;a href=&#34;https://docs.joinmastodon.org/methods/timelines/#tag&#34;&gt;timeline API&lt;/a&gt; to be particularly useful:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-http&#34; data-lang=&#34;http&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;GET&lt;/span&gt; &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;/api/v1/timelines/tag/:hashtag&lt;/span&gt; &lt;span style=&#34;font-weight:bold&#34;&gt;HTTP&lt;/span&gt;/1.1
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Using this I could get a list of toots in &lt;code&gt;JSON&lt;/code&gt; format that had specific hashtags.
And then filter those results to only get the actual url.
I used &lt;code&gt;curl&lt;/code&gt; to make API requests and &lt;code&gt;jq&lt;/code&gt; to filter-out the keys I was not interested in.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;curl &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#39;https://hachyderm.io/api/v1/timelines/tag/container?&amp;amp;limit=1000&amp;#39;&lt;/span&gt; | jq &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#39;.[].url&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; hash.json
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And then, I had to filter out results that were not from Hachyderm or Fosstodon. And Sort each
For filtering &lt;code&gt;awk&lt;/code&gt; was perfect, and then for sorting the &lt;code&gt;sort&lt;/code&gt; command is good enough.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;awk &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#39;/fosstodon|hachyderm/ {print $0}&amp;#39;&lt;/span&gt; hash.json | sort &amp;gt; res-ops
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I just had to come up with a few keywords that I could associate more with operations and a few for development.&lt;/p&gt;
&lt;div class=&#34;note&#34;&gt;
&lt;p&gt;As you may have noticed, my methodoloy is hardly scientific and and extremly relient on subjective definitions.
My goal was to find a good-enough-for-my-decision result. Not anything more.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;I ended up with these words on differnt sides:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Operations&lt;/th&gt;
&lt;th&gt;Development&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Kubernetes&lt;/td&gt;
&lt;td&gt;Refactor&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Montioring&lt;/td&gt;
&lt;td&gt;Debugging&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Docker&lt;/td&gt;
&lt;td&gt;Greenfield&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Container&lt;/td&gt;
&lt;td&gt;Framework&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Terraform&lt;/td&gt;
&lt;td&gt;Compiler&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Deploy&lt;/td&gt;
&lt;td&gt;Interpreter&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Baremetal&lt;/td&gt;
&lt;td&gt;Testing&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Vm&lt;/td&gt;
&lt;td&gt;Ide&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Admin&lt;/td&gt;
&lt;td&gt;Library&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Server&lt;/td&gt;
&lt;td&gt;DesignPatterns&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;_&lt;/td&gt;
&lt;td&gt;LSP&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;_&lt;/td&gt;
&lt;td&gt;Nodejs&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;_&lt;/td&gt;
&lt;td&gt;Rust&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;_&lt;/td&gt;
&lt;td&gt;Auth&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The differnece in their numbers are not important to us, only the proportions of the results of each may be relevant.&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;The eventual code looks like this.&lt;/summary&gt;
&lt;div class=&#34;details&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#888;font-weight:bold&#34;&gt;#! /usr/bin/env bash
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#888;font-weight:bold&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#888;font-style:italic&#34;&gt;# this part gives us a file with results of the OPs-related keywords&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;curl &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#39;https://hachyderm.io/api/v1/timelines/tag/kubernetes?&amp;amp;limit=1000&amp;#39;&lt;/span&gt; | jq &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#39;.[].url&amp;#39;&lt;/span&gt; &amp;gt; hash.json &amp;amp;&amp;amp;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;curl &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#39;https://hachyderm.io/api/v1/timelines/tag/docker?&amp;amp;limit=1000&amp;#39;&lt;/span&gt; | jq &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#39;.[].url&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; hash.json &amp;amp;&amp;amp;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;curl &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#39;https://hachyderm.io/api/v1/timelines/tag/container?&amp;amp;limit=1000&amp;#39;&lt;/span&gt; | jq &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#39;.[].url&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; hash.json &amp;amp;&amp;amp;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;curl &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#39;https://hachyderm.io/api/v1/timelines/tag/operations?&amp;amp;limit=1000&amp;#39;&lt;/span&gt; | jq &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#39;.[].url&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; hash.json &amp;amp;&amp;amp;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;curl &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#39;https://hachyderm.io/api/v1/timelines/tag/terraform?&amp;amp;limit=1000&amp;#39;&lt;/span&gt; | jq &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#39;.[].url&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; hash.json &amp;amp;&amp;amp;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;curl &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#39;https://hachyderm.io/api/v1/timelines/tag/deploy?&amp;amp;limit=1000&amp;#39;&lt;/span&gt; | jq &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#39;.[].url&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; hash.json &amp;amp;&amp;amp;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;curl &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#39;https://hachyderm.io/api/v1/timelines/tag/baremetal?&amp;amp;limit=1000&amp;#39;&lt;/span&gt; | jq &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#39;.[].url&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; hash.json &amp;amp;&amp;amp;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;curl &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#39;https://hachyderm.io/api/v1/timelines/tag/vm?&amp;amp;limit=1000&amp;#39;&lt;/span&gt; | jq &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#39;.[].url&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; hash.json &amp;amp;&amp;amp;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;curl &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#39;https://hachyderm.io/api/v1/timelines/tag/monitoring?&amp;amp;limit=1000&amp;#39;&lt;/span&gt; | jq &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#39;.[].url&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; hash.json &amp;amp;&amp;amp;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;curl &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#39;https://hachyderm.io/api/v1/timelines/tag/admin?&amp;amp;limit=1000&amp;#39;&lt;/span&gt; | jq &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#39;.[].url&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; hash.json &amp;amp;&amp;amp;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;curl &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#39;https://hachyderm.io/api/v1/timelines/tag/server?&amp;amp;limit=1000&amp;#39;&lt;/span&gt; | jq &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#39;.[].url&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; hash.json &amp;amp;&amp;amp;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;awk &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#39;/fosstodon|hachyderm/ {print $0}&amp;#39;&lt;/span&gt; hash.json | sort &amp;gt; res-ops &amp;amp;&amp;amp;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rm hash.json &amp;amp;&amp;amp;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#888;font-style:italic&#34;&gt;# this part gives us a file with results of the Devs-related keywords&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;curl &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#39;https://hachyderm.io/api/v1/timelines/tag/develop?&amp;amp;limit=1000&amp;#39;&lt;/span&gt; | jq &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#39;.[].url&amp;#39;&lt;/span&gt; &amp;gt; hash.json &amp;amp;&amp;amp;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;curl &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#39;https://hachyderm.io/api/v1/timelines/tag/refactor?&amp;amp;limit=1000&amp;#39;&lt;/span&gt; | jq &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#39;.[].url&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; hash.json &amp;amp;&amp;amp;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;curl &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#39;https://hachyderm.io/api/v1/timelines/tag/greenfield?&amp;amp;limit=1000&amp;#39;&lt;/span&gt; | jq &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#39;.[].url&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; hash.json &amp;amp;&amp;amp;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;curl &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#39;https://hachyderm.io/api/v1/timelines/tag/framework?&amp;amp;limit=1000&amp;#39;&lt;/span&gt; | jq &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#39;.[].url&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; hash.json &amp;amp;&amp;amp;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;curl &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#39;https://hachyderm.io/api/v1/timelines/tag/compiler?&amp;amp;limit=1000&amp;#39;&lt;/span&gt; | jq &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#39;.[].url&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; hash.json &amp;amp;&amp;amp;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;curl &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#39;https://hachyderm.io/api/v1/timelines/tag/interpreter?&amp;amp;limit=1000&amp;#39;&lt;/span&gt; | jq &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#39;.[].url&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; hash.json &amp;amp;&amp;amp;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;curl &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#39;https://hachyderm.io/api/v1/timelines/tag/testing?&amp;amp;limit=1000&amp;#39;&lt;/span&gt; | jq &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#39;.[].url&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; hash.json &amp;amp;&amp;amp;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;curl &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#39;https://hachyderm.io/api/v1/timelines/tag/ide?&amp;amp;limit=1000&amp;#39;&lt;/span&gt; | jq &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#39;.[].url&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; hash.json &amp;amp;&amp;amp;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;curl &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#39;https://hachyderm.io/api/v1/timelines/tag/library?&amp;amp;limit=1000&amp;#39;&lt;/span&gt; | jq &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#39;.[].url&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; hash.json &amp;amp;&amp;amp;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;curl &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#39;https://hachyderm.io/api/v1/timelines/tag/development?&amp;amp;limit=1000&amp;#39;&lt;/span&gt; | jq &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#39;.[].url&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; hash.json &amp;amp;&amp;amp;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;curl &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#39;https://hachyderm.io/api/v1/timelines/tag/designpatterns?&amp;amp;limit=1000&amp;#39;&lt;/span&gt; | jq &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#39;.[].url&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; hash.json &amp;amp;&amp;amp;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;curl &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#39;https://hachyderm.io/api/v1/timelines/tag/lsp?&amp;amp;limit=1000&amp;#39;&lt;/span&gt; | jq &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#39;.[].url&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; hash.json &amp;amp;&amp;amp;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;curl &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#39;https://hachyderm.io/api/v1/timelines/tag/nodejs?&amp;amp;limit=1000&amp;#39;&lt;/span&gt; | jq &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#39;.[].url&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; hash.json &amp;amp;&amp;amp;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;curl &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#39;https://hachyderm.io/api/v1/timelines/tag/rust?&amp;amp;limit=1000&amp;#39;&lt;/span&gt; | jq &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#39;.[].url&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; hash.json &amp;amp;&amp;amp;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;curl &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#39;https://hachyderm.io/api/v1/timelines/tag/auth?&amp;amp;limit=1000&amp;#39;&lt;/span&gt; | jq &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#39;.[].url&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; hash.json &amp;amp;&amp;amp;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;curl &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#39;https://hachyderm.io/api/v1/timelines/tag/debuggin?&amp;amp;limit=1000&amp;#39;&lt;/span&gt; | jq &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#39;.[].url&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; hash.json &amp;amp;&amp;amp;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;awk &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#39;/fosstodon|hachyderm/ {print $0}&amp;#39;&lt;/span&gt; hash.json | sort &amp;gt; res-develop &amp;amp;&amp;amp;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rm hash.json
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/details&gt;
&lt;h2 id=&#34;the-result&#34;&gt;The Result&lt;/h2&gt;
&lt;p&gt;On the ops query we have &lt;code&gt;32&lt;/code&gt; toots from Fosstodon and &lt;code&gt;44&lt;/code&gt; toots from Hachyderm.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Fosstodon ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Hachyderm ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So far Hachyderm seems to have more activity with OPs related hashtags.
On the other hand it could be that people on Hachyderm are generally more talkative than Fosstodon about every part of the stack.
So let&amp;rsquo;s hold development as the control.&lt;/p&gt;
&lt;p&gt;On the development queries we have &lt;code&gt;49&lt;/code&gt; results from Fosstodon and &lt;code&gt;24&lt;/code&gt; results from Hachyderm.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Fosstodon ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Hachyderm ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That seems like an staggering differece. &lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;h2 id=&#34;dear-reader-dot-dot-dot&#34;&gt;Dear reader&amp;hellip;&lt;/h2&gt;
&lt;p&gt;I have no idea why this difference is so harsh. But for my purposes I have enough information to update my beliefs to make a decision for now that satisfies my accuracy-requirements for this decision.
&lt;strong&gt;*&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;*&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;Free and Open-Source Software&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;
&lt;p&gt;Staggering differences are often a sign of a weak research. So take this part with a grain of salt.&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
    </item>
    
    <item>
      <title>ME</title>
      <link>https://prma.dev/about/me/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>prma.dev@protonmail.com (Perma)</author>
      <guid>https://prma.dev/about/me/</guid>
      <description>In this vast world, teeming with approximately 8 billion human beings, I, too, find myself among their ranks, a singular entity in the tapestry of humanity.
Through my intellectual journey, I have delved into the realms of architecture and cognitive science, exploring the intricate connections between our built environment and the workings of the human mind. However, amidst this exploration, my fascination with computing remained unwavering, beckoning me towards a path where I finally discovered my true calling as a developer.</description>
      <content>&lt;p&gt;&lt;img src=&#34;https://prma.dev/images/me.png&#34; alt=&#34;&#34;&gt;
In this vast world, teeming with approximately 8 billion human beings, I, too, find myself among their ranks, a singular entity in the tapestry of humanity.&lt;/p&gt;
&lt;p&gt;Through my intellectual journey, I have delved into the realms of architecture and cognitive science, exploring the intricate connections between our built environment and the workings of the human mind. However, amidst this exploration, my fascination with computing remained unwavering, beckoning me towards a path where I finally discovered my true calling as a developer.&lt;/p&gt;
&lt;h2 id=&#34;name-wise&#34;&gt;Name-wise&lt;/h2&gt;
&lt;p&gt;You can call me Perma. My legal name is AmirHossein Alesheikh. I don&amp;rsquo;t mind either, but I prefer Perma. Read &lt;a href=&#34;../../call-me-perma&#34;&gt;Call Me Perma&lt;/a&gt; for more information.&lt;/p&gt;
&lt;p&gt;You can use any pronouns, I don&amp;rsquo;t mind any of them, I don&amp;rsquo;t identify with any of genders, anyways. But it will be nice if you could make it clear to me which one you have chosen.&lt;/p&gt;
&lt;h2 id=&#34;job-wise&#34;&gt;Job-wise&lt;/h2&gt;
&lt;p&gt;As a back-end developer, my expertise lies in utilizing languages like &lt;em&gt;Go&lt;/em&gt; and &lt;em&gt;Rust&lt;/em&gt; to build the foundational components of software systems.&lt;/p&gt;
&lt;p&gt;I predominantly focus on developing the back-end of back-ends, ensuring the smooth functioning and interconnectivity of various subsystems.&lt;/p&gt;
&lt;p&gt;Additionally, I also engage in system programming, working with low-level components and infrastructure to ensure optimal performance and reliability.&lt;/p&gt;
&lt;h2 id=&#34;tech-wise&#34;&gt;Tech-wise&lt;/h2&gt;
&lt;p&gt;Since the tender age of 5, my eyes have been fixated on computer screens, even during those moments when they lay dormant. The hours I&amp;rsquo;ve devoted to sitting behind desktop computers far exceed the time I&amp;rsquo;ve dedicated to restful slumber. Throughout my life, I proudly embrace the label of a bona fide textbook nerd, finding immense joy and fascination in the pages of educational literature. In fact, my favorite genre of books happens to be none other than textbooks themselves.&lt;/p&gt;
&lt;h2 id=&#34;advocacy&#34;&gt;Advocacy&lt;/h2&gt;
&lt;p&gt;For over 15 years, I have actively engaged in the realm of free software advocacy, passionately advocating for the principles of openness and accessibility. It&amp;rsquo;s safe to say that I find myself firmly planted in the far-left corner of political stereotypes, unapologetically embracing a feminist perspective, advocating for veganism and animal rights, and actively participating in environmentalism. While there are other aspects of my beliefs, such as my alignment with &lt;a href=&#34;https://www.lesswrong.com/tag/rationalist-movement&#34;&gt;rationalism&lt;/a&gt;, utilitarianism, and consciousness idealism, I won&amp;rsquo;t delve into those topics and burden you with excessive details.&lt;/p&gt;
&lt;h2 id=&#34;me-in-the-wild&#34;&gt;Me, in the wild&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Fosstodon&lt;/li&gt;
&lt;li&gt;Codeberg&lt;/li&gt;
&lt;li&gt;Github&lt;/li&gt;
&lt;li&gt;Linkedin&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;faq&#34;&gt;FAQ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;What time is it?&lt;/li&gt;
&lt;li&gt;What&amp;rsquo;s your dogs name?&lt;/li&gt;
&lt;li&gt;Is your dog friendly?&lt;/li&gt;
&lt;li&gt;Is it your turn to cook lunch or mine?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Yeah, I hear these questions quite fre&lt;/p&gt;
</content>
    </item>
    
  </channel>
</rss>
